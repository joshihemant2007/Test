In this course, Rob Conery takes you beyond the simple demo with Node.js and talks about ways you can structure your application, your code, and your tests. Along the way he'll discuss various JavaScript patterns and Node toolsets.

Introduction
Introduction
[Autogenerated] welcome to note application patterns here. It plural sight in this production will go beyond the fund demo and get into real concerns that come up when building modern Web applications with no jazz. For many developers, knowing what to put where and when is only a first step, many wanna know why. That's what I hope to do in this production to help you see interesting ways to build your next note application. Well, dabble with some theory, but that will put that theory into practice. Let's tackle this right up front. Why should you care about node? Aside from being new and shiny, there are plenty of compelling reasons that note makes sense as a development platform. Let's have a look at each. One note is incredibly simple and easy to use. Working with the platform requires a quick install that takes seconds, and building on top of it is a joy, which I hope to show you in this course. Upgrading our installation is usually a matter of reinstalling or running your favorite package manager like apt or home brew. No, it's package manager in p M makes working with note incredibly easy. In fact, no, it's packages or modules are the main reason I like working with note and is at the core of what we'll be doing today. In fact, I like in P M so much. It's spoiled me working another platform, such as Ruby and Rails or a SP dot net ABC. It just feels clunky and disorganized. The note ecosystem is on fire. You'll find all kinds of amazingly helpful tools and code online that solve every kind of problem from hashing an encryption to date formatting. Notice the fastest growing platform right now, and there's no shortage of help out there. Notice. Scalable and fast, it's built on top of Google's V eight engine and uses an asynchronous style of execution called the Event Loop. That means your CPU is free to focus on many tasks at once. So rather than take up an entire thread from your threat pool, waiting for the execution of a long running query note flexes javascript asynchronous nature and goes off to do other things with that thread like handle more incoming requests. Note is also single threaded, which means you won't have deadlocked commonly associated with a synchronous programs in other platforms, like job are dot net first class deployment platforms. Support note Out of the box. Azure, AWS and Hiroko all support no deployments directly. Amazon recently released an elastic beanstalk implementation for note, and Asher supports node websites. Same with Hiroko. This means you can auto scale your deployments as well as set up load balancing and redundancy. We'll take a look at deployment options more in this course. Finally, you get to work in a language that you already know. Java script. I don't know if that's a plus or a minus, but if you've gotten past the initial hurdles with Java script, you have probably come toe like working with it. Note allows you to grow your Js skills and gives you an environment where it's easy to flex the better parts of JavaScript. So what are we going to do today? Well, I want to build a membership system based on devise, which is a ruby on rails Jim that allows you to build out a user membership system really easily, and I find it's the one thing that's missing from Node and Express. I built a system just like this for sp dot net. NBC for a pragmatic Bt D screen cast. So now I'm gonna build one just for node. I've pulled up the weeds with note in many different ways over the last two years, and I'd like to share what I've learned. We'll do this by understanding some concepts first and then putting those concepts to the test by writing up some code. When you finish this course, you'll be able to create a modular note application, which you can share with others. Understand effective patterns for working with JavaScript and note itself. Effectively test your work using bee dee dee, and you become familiar with the basic tools and practices that no developers use every day. To get the most out of this course, you should understand JavaScript enough to not be afraid of it. I'll touch on a few basic things as we go along here, but I won't get too deep on language constructs or the more more basic parts of JavaScript. It's also helpful if you have a basic understanding of note. I'll go into the concepts behind. Note a lot, so if you've never used it and you should be okay if you get lost, it all just pause The video hit Google and then come on back. You should have a firm grip on the Web and how it works as well as new or frameworks out there like a SP dot net, NBC and Ruby on rails. We'll be borrowing a few concepts along the way, and you should understand the references I'll be making. Finally, have an open mind note is likely to be a lot different than what you're used to. And your cheeses, they say, will likely be moved. Half of learning is letting go of preconceptions and bias. So if you've only done rails or sp dot net, it's time to learn something new. And with that, let's get started by installing some tools and setting up our environment.

WebStorm
[Autogenerated] one question I get asked quite often when it comes to know development is what I d do you use. And, well, to be honest with you, it varies. There's a lot of choices when it comes to working outside the Microsoft universe, and you can use just a plain old text editor with your shell and have a lot of functionality. Nor you can use a full blown I t. E. The neat thing is that the folks at Jetbrains that people who make re sharper have gotten into making dedicated I de ese for python PHP, Java script and node, um, and Ruby on rails or just Ruby and generally should say anyway, Ah, Web Storm is their I d for Java script and also for the Web in general. And it works really well with note. It's $49 for a personal license, and it is great. I I bought it just because, hey, you know, I'm working on No, what? I want to have some functionality Anyway, I want to show you a few features that I really, really like. But before I do, I did want to say it is jetbrains. So it is a smart, smart idee, and there's a lot of extensive bility that goes into it. It integrates with the source control, and it also allows you to have these live templates and document templates that air so very helpful. Anyway, you can download a demo, and I'm not getting any money for this, and I just really like it. So I suggest you do. If you want to play around runs on Windows, Lennox and Mac. Ah, if you want to go over to jetbrains TV, Um, it's got all these great videos from the team and, ah, you wanted select Web Storm, but cruise on through here and see some of the things that Web storm conduce. Oh, I love the CSS integration. It's pretty neat, Um and yeah, so let's go take a look at what I dig about Web Storm in general. And here is just a demo site that I created, and I have a few modules set up for it and notice inside of here. This is an express Web app, and if you don't know what you're looking at, we'll get to this later on. But this is the configuration for the Express Web app. And one thing I like about Web Storm is that has Intel a sense or code completion, and it's really extensible. For instance. Here it knows that I'm talking about app, which is great. But if I hit dot which for folks that use visual studio is a cue for Go Find the methods and properties on AP. Well, Lynda, it's not really working. It's kind of just giving the best guess what it thinks I want gives me some shortcuts for other things, but yeah, in general, it's not really intelligence, but that's okay. What it allows me to do is I can say this file is actually using this library and right down here I can specify use the Java script library, whatever inside of here, it says, Well, I'm using note modules. I'm gonna allow you until a sense all the modules that you've installed Ah, but you see you have members this ember Jake weary Mocha test framework Ah, what are using a version of node? And yes, I am actually So this is going to check and popped in here. But it still doesn't help me because app is express. It's expressed the express framework. So I need to have until a sense for that so I can configure it out. Let's do it. Um, I'll open up my preferences and even cruise through here and go to Java script and libraries and inside here These are all the things that are configured for Intel a sense, if you will. And I don't have anything for express so I can hit, download. And then it says, Well, here's our official libraries that we offer for until a sense modernizer knockout, which is cool. New tools, prototypes, great trackers on and on. It's not in here. Well, if I drop this open here, our community stubs or community libraries that folks have made and there's a ton of stuff in here for all kinds of frameworks out there, including bootstrap, which is kind of cool. But if I come on down or if I just type in e X, we are here at express download and install, and it's going to grab it. Boom! Pops it right in there and hit. OK, now notice that all the squid Lise went away and things like a little bit different type of ap dot com. Boom, Now I have all kinds of interesting intelligence in here. Request response, mime version. And if I say request and hit it dawn on that, it still gives me full intel. Essence. One of the neat thing about Web Storm is the ability to have plug ins into all kinds of things. So if I type in plug ends in the preferences, you could see all of the plug ins that have been installed. And these are the ones that I have active in here. Man, it does a lot Copy on steroids is one that I installed myself. This allows me to select some tax and right click, and when I hit, copy it copies. It is RT F in memory, and so I can drop it onto slides and have coloring, which is groovy. Angular plug in is installed. So if I use angular, I've got full intelligence and code completion, which is handy coffee script. CSS support, of course. Cucumber dot Js. That's the weirdest thing. Note, which is again, very Andy. So all kinds of ah, all kinds of plug ins here. But if I want to install another one, I have a couple choices I can go install from Jetbrains and I get a number of different plug ins straight from the jet brains folks and including vim. That's Ah vim support. So if you like them, you can drop it right on top of the I. D. I think it's pretty cool. Cool. T f s integration right on your t f s person. You could integrate Web Storm right with it. Okay, Those air, the jetbrains plug ins. But there's a whole bunch more provided by people out there and look at this. Ah, these air all community plug ins that do big things to little things. Look at this one. AWS elastic Bienstock Integration man. That's pretty handy. It will allow you to push to Amazon. Web service is elastic beanstalk directly. Wow, that's neat. Elastic Beanstalk is kind of azure websites. There's a bunch of other things in here to Pomodoro. A lot of people really like Pomodoro. It's a timer for keeping you efficient, not burning your brain up when you're working and writing code. I think that's kind of fun. I've never used it before, but anyway, browsing through these things is a lot of fun. One of my very favorite new features of Web Storm eight is the integration with the mocha test framework. I'll talk about the details of Mocha later on when we start writing tests. For now, I just want to show you how we're gonna hook it up to the I. D. So here is a mocha test file. This d s l looks just like our spec. These individual calls or functions to call out to Mocha and you can wrap things up in a very beady sort of way. So this is just obviously a silly test, and we'll talk about this in tax of it later on. The test file is located inside a test directory inside of my cart module inside a lib folder. You talk about this structure later on. None of this is terribly important. But I do want to show you how to hook up mocha. But I'm going to do is come over here to edit configurations and you have all kinds of runtime configurations and debug configurations that you can work with. Uh, show you really quickly. You can You can, ah, structure the defaults as you like and one of the defaults. And here is mochas, you can see Ah, and I have a bunch of default values. So let's create a brand new mocha configuration and I'm gonna call this cart. Let's call it cart specs and the interpreter. That is where the node execute a bill is. So you just have to put that in there and sets user local been knowed if you're on a Mac by default using installer, if you put it somewhere else, just put wherever you put it. The working directory is going to be the main directory oversight, which is just demo. So this defaults to the project directory. You can set any environment variables you need to in here as well as any note options. Ah, the mocha package itself is exactly right there. Node modules, mocha. I installed it before. You can check which interface you want and this is me. This is one of the reasons I really like. Moka is here. You have different ways of working with actually writing tests. So this is the bee dee dee way of doing things using describes, and it should know that stuff. You can also say I'm more used to doing a TTD idea and So he has a sweet keyword and tests and stuff like that. And then if you want to do a test for module, you certainly can do that. And then finally, there's a Q and a way of doing it anyway. That's just a little background for you. So if we head back over the Web Storm, we're just gonna leave it on B d d. Any extra mocha options you want can throw in there and then finally, we just need to tell it where a test directory is, so that will be in lib and cart and test and we'll choose that. And then we're good. So hit. Apply. Okay. And then now that we have these carts specs configured, you can see that we have the option to run them. We can also deep bug them, which is really cool. So first I'll run this and you see the test runner pops up down below and you say everything is green and ah, you can see here how you might want to have some good naming in case something goes wrong. Eso Let's change this to two. I'll save it and I'll rerun the test and you'll see it _____, and you can quit to cede some gifts. But you don't need to do that. Um, and you can also click to see where the error is. So if I click on here, it's saying this is why I barfed and it puts the comer of the cursor right there. Ah, the other thing that I really, really enjoy is to have this thing auto run. So weaken, click auto test. And what that does is it Just wait. It sits and any time you put in a file changing hit, save, it waits for a few seconds and then re runs him. So we're still seeing the air. This is handy, but I like it to go a little bit faster by default. It's three seconds. Let's set it to one. So now when I come in here, change us back to one and hit save Boom. We have green change back there, and we have read. This is almost instantaneous change, which is such a great feedback loop. Ah, we can unpick in this so we can, uh, to put this into floating mode and then put it over to this side if we want which I think is pretty handy. And there's different ways of organizing this. Don't show the, uh, don't show their completed ones. There's a ways you can filter in search and look and what not? And once you're all you test her down in your super proud of yourself, you can choose to export them, and I'll just put it on the desktop here and say up, Open it up for me. You can export them and XML if you like, um or HTML and hit OK and open it up. You can show this to people if you want printed out, say, Look it, I'm a rock star looking all my tests and how well there they're going, it's up to you Another really nice feature of Web Storm is its integration with git. And, uh, I really like that It it seems like the jetbrains people are really paying attention to how developers, uh, modern Web developers are working. And so it goes far beyond just flagging files for you. Like here, we can see that product speck is green, so it's newly added to source and down here, these air blue, which means they've changed, which is need to know. Ah, and you know, we do have _______ that say commit Poland push. But it goes a little bit beyond that. Let's take a look, eh? So let's open up this tab down here that says changes and it shows you these are the files that have changed. We can push these changes up to, ah, to our origin. If we'd like to do that, we can also come into each file. We can look at a def and the different tells us Hey, you took a line out and added one here. Pretty neat. And in addition, we can also go to the version control tab, and we can see all kinds of history for our site inside here. We can see that last few changes have come in the cart folder and we can see the specific things that have happened in there. What's happened in our entire project right here. What's happened for are the index file. So these are the things that are lastly changed. Um, if we go over back to the changes window and we take a look at the log, we can see a really neat visual. Um, get graph I guess, is what you would call it that you can see a lot associated with get anyway. Ah, we can at this point push so we can come up here and just it. VCs push and it'll show us all the files that are ready to be pushed him. You could see it coming, mom. And then we have our little message in here. Updated, Updated specs. Let's put that. And here's some more fun things. We can specify a different author if we want Thio uh, modern. Why would do that? But we can reform at the code according to some coding standards. Rearrange code does. But it can perform code analysis for us before we check it in. And it will also check two DUIs that might have been left in the files that were changing. Now to do is is one of those things that ideas have been trying to get right for so long. Web Storm does a really nice job that I'll show you that in just two seconds. But for now we can do is we can commit or we could commit and push. So I'm just gonna hit, commit and boom up goes, and you can see visually that everything has changed. Updated specs. That's where their head's at. Like most modern I d Ys Web Storm has the notion of a to do list and you can created to do simply by adding a comment and then saying to dio fix this mess. So if we do that, we can pop open the to do tab here and it'll show us ap dot Js Fix this mess. Double click it. Boom in we go. But you probably are also noticing that we have 54 to do items in 32 files. Where did these come from? Some of them are in mocha dot Js and filed a chess stuff that we have no control over, which is a bit of a bummer, because these are all inside of our node modules right here. And ah, as much as I wish we could ignore these things, we can't really. But we do have an interesting work around which leads a stone a better path. So let's take a look at filtering these things right now. By default. We're showing all the two DUIs that air in our, uh, directory here. So If I want to edit filters, let's pull this down. You can see that. Well, we have all kinds of filters in here would like to do and fix me. We could create another one, Uh, and we could call it hack if we wanted to. But I think what I want to do is something specific like to do. And then maybe I got a backslash there to do Rob and then mark it as the end and well, it's just sees the icon here to that red Rob went up and we said, OK, and then what we'll do now is we will add this filter down below to do Rob check it and then robs two DUIs. Okay. And okay, good. So now if we open up our to do list and we want to play a filter, where's Rob Studios? Well, there's none, but So if I come in here and say to do and then rob, we go found one after GS and fix this Ms, this is handy because what this will allow you to dio is, of course, mark stuff for yourself. But you might wanna have other things in here like hack to do and then hack, which means, man, this is a mess. Or to do. Speaking of Hack, you might want to fill. Ah, and for another team member might pull it in and they could take a look at their own two DUIs. Web storm doesn't impose itself on your development process, meaning everything that you do doesn't have to be done through the i. D. So I showed you get just a second ago. I certainly don't need to use the I D if I don't want to. I can pop up in the terminal down here, and I could run something like its status and do all the things that I would normally do using the terminal. And this is handy. I mean, the terminal, however, is just right over here, and I could also just use that if I want to. It's up to you, but there's other things that you can do in here and what as well. And the nice thing is that Web Storm will respond as if this is just part of the idea itself. For instance, I could say, uh, let's put in a read me file and I could say read me dot marked down, and if I come up here boom, it auto loads it. So I will just delete this. Or I could come down here and say Remove, read me and coming up here Boom, it's gone. The other thing that I like about having a terminal is installing and uninstalling node modules these ways. You could do it using Web storm, but that Who needs that? I don't need that. It's easier to just toe come down here into the terminal and say, mpm install a sink and then save it, please, and then go out and grab it and do the needful. And in it goes, and if we come up here to note modules, you will see that there is a sink. In addition, like most good text editors, you can get around in Web storm really easily so I could do the typical thing of Enter a class name and then off I go to that class, However you know those I put products. I don't have a class named product. Well, it's because job script doesn't have classes. I think if I was using coffee script and it would work, although I haven't tried that. Whoever Fight id command option. Oh, interest, symbol name. And I said, Take me to product I have to do There we go. Take me to the capitalized product Boom! And I go what I could do Command shift Oh, take me to the file And if I want to go to rout Index, I could do partials in here on respect partial names so I could say about index or route user And then in we go as really easy to get around a maneuver around inside of Web Storm And you can also, if you want split the windows. I really enjoy splitting with your running tests on one file and you're doing something in the main code file. A good code editor allows you to be really efficient when writing code, and that usually involves speed. And for me, one of the key things that makes me a faster coder is snippets like my snippets, especially ones that are custom fit to my, uh the way I work and the things that I like to write. I find that Web storms code snippet system is really, really well done. So let's take a look at how they work. And to do this, I will write out some specifications for the shopping cart here that I'll be writing later on. First thing I know that I need to do is to have an assertion library. So I'll use my little R E Q snippet and require a certain next. I want to define the feature that I'm gonna be working on here. And so I'll use my describe and we'll say, shopping cart. And then I'm gonna describe adding an item and it should up the quantity. It should add the product to the backing store. And what else should it? D'oh! Um, it should set the last item. Mattos, This is another reason. Like snippets. I'm the world's worst type. Er, All right, all right. I got this file cracked out in pretty short order, and you could see that I have my snippets, like the way they work. So how do you actually create a snippet in Web storm? Well, if you find something that you type for 100 million times over and over and over, like require statements, you can just highlight it and go up to the tools menu here and you can say save as live template and then up pops this dialogue and then down below here you can see that it's taken my selection and already dropped into the template text. So here I know I need a variable. And variables can be just ad hoc things. And I could just see name and surrounded by dollar signs. And then here I would just pop over and put it in there. So anytime I typed my name there it goes in there, I can edit the variables and ah, in here I can have default values if I want and then also set it to an expression if I need to and then default expand with the tab, you can expand with other things. If I want, I'll finally I can say it should be available on coffee script. JavaScript What? Well, now that I've written all this out, we could jockey this around a little bit more. Let's do something like this. I could say describe a feature and then describe Ah, scenario it and leave it like that and maybe even give myself a little prompt here. And same or specs here. Yeah, they get So now I can go up here to save file as template, and then I just need to give it a name. So I could call this a speck and the extension will be Java script. And I could just leave this just like this. I don't need variables or anything, so I hit. Apply There is spec. Okay, so now when I'm writing out some tests, I can come appearance a new speck And what speck rewriting. And it's a product speck. And then yet I'll add it to get and boom. All of this is now in here with little prompts to remind me.

Grunt
[Autogenerated] for every project I've ever worked on, I've had the ability to run certain tasks, even with the latest projects I've been doing with massive and biggie and other things in the dark Net space. I'll always have a consul app that has spikes in it or performance tests, or maybe even building and dropping test databases. Who knows Thes task runners Air Indispensable and they're built right into other platforms like Ruby Ruby has rake, which is kind of Ruby's take on make any way you could just use Ruby code to automate whatever tasks you need. Grunt is a JavaScript task runner. Um, there's also Jake, which is the corresponding thing to rake anyway. Grete is pretty well liked. It's got a ton of plug ins, and it does a whole bunch of things. So why grunt? Why do people use Grant? Well, as they mentioned, it's a task runner, Um, but it does things that may be an I D might do for you. That is one reason that people like to use it when working with Java script. If you're just using his straight up text editor like text mates or sublime text to or vim then something like grunt is really, really helpful. For instance, here's one thing that it does. It runs this letter Js hint. If you don't know the letter is basically goes through and checks for errors in your code. It's kind of like if you're a dot net persons like using Ah, what's it called FX cop that goes through and looks a code policy. It's probably not as not as intense is FX Cop, but anyway will go through and say, Hey, forgot a semi colon er, this is a global Did you mean to do this? Where's your far stuff like that? And you could have it run in the background watching your coat, which is pretty neat. I use it for building databases out and just helping me do everyday tasks. So this is the first to all be using now. I should also point out that people are starting to use another tool called Gulp, and they find it very helpful. They find it more helpful than Grant for some reason. Ah, so it's up to you. Gulp, grunt. Either one. They both do the same thing

Command Line
[Autogenerated] If you're a Microsoft developer and you've been working with dot Net for a while using visual studio, this might seem a little odd. Working in the terminal or the command line is not something that Microsoft developers normally d'oh, however working in node or ruby or python or anything that's not Microsoft. You do end up working in the terminal, so let's just quickly take a look at some of the commands and some of the things I will be doing in the terminal because it will be a big tool that will be using. So this is the demo site that I just created and they showed you with Web Storm. If I want to see the files in here, I have a shortcut called El. But if I hit L s Dash L, then it's the same thing. So L s Dash l, and it shows who owns what it shows the sizes of files. It shows the file names when their last updated shows you just about everything. Now, why is this important? Well, if you want to navigate around and take a look at things, you certainly can. For instance, if I wanted to run the tests without involving Web Storm. Let's just say I'm really quickly wanting to see. Are these tests certain tests running or failing or whatnot? I can do that. So let's go into our module. We put some tests and I forgot the module name, but here I can see what it is. It's cart Anna, come on in here and I take a look and see. Ah, there's the test directory. I also see that there's a new file called Product GS, and I can take a look at that and there's the code by using the cat Command just throws the file contents right out into the terminal window. All right, well, let's run our tests. And I do that by executing Mocha itself. It's an execute a ble. It'll go in, take a look, a TTE, any test directory or a test dot Js file that you happen to have, and it fired founder test directory and ran the files inside of it. And unfortunately, it didn't find any tests, which is weird because I thought I wrote some what's going on here. Well, let's find out. We'll go into the test directory, take a look, do we have any specs? We do. We have to some products beckon carts back. Well, I could do the same thing. Why isn't showing up and I can see here. I've got the specs. What about the cart and can see here? Whips can't go into it. Sorry about that. Fingers. And they're okay. So I know I'm recalling that I backed all these things out and these are just two files that have no specs in them. Well, this is all making sense. I was able to do this really quickly, and I was able to execute the tests and see that I had none. But I I'm going to guess that maybe you are thinking that's neat. You're on a Mac, and it's a lot easier for you than it is for me. I'm running on windows and we don't really have the same kind of terminal you D'oh! And I can dig that, but at the same time, it's not true. You actually have a better one. Power shell is amazing. If you haven't spent any time working with partial, please consider this to be a little prod for me. To you, it is amazingly capable. So Let's do something fun. Here's Ah, Window 7 p.m. I have running on my Mac and what I'm going to do is to take the demo folder I've been working in and just drop it right in and wait out there It is. Good. So now we have a demo folder and I want to open up this demo folder in Power Shell so I can come right up here into the address bar and Taipower Shell and kaboom. Power shell is open. And in this directory, good. I've taken the time to make this look as close to my shell on my Mac as I can. I'm actually a little bit jealous. It's an amazing tool. Ah, and just really quickly did to show you what I did head on into properties and inside of here, take a moment and set the colors. The background color says something pleasing to you. I just copied what I had here in my Mac and I replaced the RGB values right over there. Simple to d'oh. In addition, I set console us as my font said it to 20 sometimes between 2024 so I can see it a little bit better. Make sure the bold defiance as well. Anyway, that makes it just a little bit more of a pleasing environment. And what we can do in here is check our version of node can do all the same things with power shell as we can with the regular bash. In fact, a lot of the commands like L s Dash L l s works almost exactly the same. The dash arguments evidently don't work, but l s will work and you can see last right time length name a little bit different than what we saw over in bash. But anyway, it does work. So what I can do here is, say, npm install and it's gonna go into a package. Jason is you can tell I have knowed installed on my project here, and I can do roughly the same things. I could go into our live directory and I believe it was cart and it corrected. My Ford slashed to a backslash that's pretty groovy. And then take a look around. There's our test, and I should be able to just run this lips. So let's do N p m. I don't have it installed globally install Mocha Dash G. So take just a second. I hear you. And now if I run mocha in the test directory, same exact thing, it runs the chest. And then if I want to take a look at the test files, I can come in and say, Take a look at Let's actually go into our test directory and I will do Cat and then Product Speck and same exact thing, which is really, really handy. So point being as I'm cruising along here in the command line, crack open power shell. It's a matter of fact there is a beginning course on Power Shell introduction here. A plural site. Um, it is outstanding. I watched it for a bit. I could believe some of the things you could d'oh to taunt you with it a little bit. You'll notice that I'm working on the C drive here. One of the things that you can do with power Shell is to mount individual directories as drives, including registry, which I think is pretty cool

Web Frameworks
[Autogenerated] we're about ready to set things up. But before we do, let's take a look at the choices we have for Web frameworks. Most people only know of one when it comes to Node Express, but there are quite a few others, and we'll take a look at those. But first, why do so many people choose Express? The short answer is that it's lightweight. It's easy to use, It's well documented, and it's highly. Extensible Express uses a middleware system called Connect, which is one of expresses many strengths. You confined middleware and modules for express that allow you to plug in just about any functionality, composing your Web application just the way you want it to be. Express embraces the node philosophy of Do one Thing Well, which itself was taken from the UNIX philosophy of Do one Thing. Well, modules are the name of the game with note and therefore how you use express. Many developers find this to be exactly what they need from most of the weapons they create, myself included. This can work really well for large systems, but often it leads to re factoring things out as a system grows. Indeed, projects tend to split apart, and you have to learn new ways of doing things. Express, for instance, used to bundle a generator that built a site for you, but no longer. It has been split out into its own module. Grant did something similar. Breaking apart its core functionality into multiple separate projects. Confused a lot of people, but everybody just went along with it because that's how you do. Node Koa is another Web framework, and it's considered to be the next Rev. Of Express. Created again by the Express team, it leans on new features coming in the next version of Java script, including generators that promised to help get rid of all the callback nightmare craziness of asynchronous coating. And it is actually supposed to be smaller than express, if that's even possible. It's still pretty raw, and I could spend a whole lot of time explaining it to you, but I'd rather focus on other things for this screen cast, so I'm gonna pass on KOA for now. Getty, named after Getty Lee, is an interesting Web framework that is essentially patterned after rails. It has generators a norm. Did you follow pretty much the same workflow that you do with rails or a SP dot net, NBC create a model. That model is conceptually tied to a controller, and that controller conveys the models data using a set of views. Sales is another framework. Get it sails, rails. It works the same sort of way, but it's a little bit more modern. It's a tad letter waiting Getty. And when you generate a model, you also generate a P i n points on controllers that are in your application. And they have, ah, basically a full rest ful back end that you can immediately hook up to a front end system like backbone. The developers who built sales build it on top of express specifically for the backbone work they were doing. You can still have normal views, but it tries to make the single page app things somewhat seamless. I've used it, and I really, really like it. It's great for smaller sites, and the documentation is pretty good as well, so it may sound like getting and sales are pretty robust, so why am I not using them? The simple answer is that note favors modularity. Casey didn't see those other slides, and these projects don't specifically. If I wanted to create any commerce system, I'd have 15 or so models and then 15 or so controllers and then 15 times four or five different views that deal with customers, invoices, sale orders, product catalogues, promotions and we basically end up with a huge ball of mud. This is really the first major bit of understanding with node. You have to think in terms of modules. It's really easy to take what you know from other frameworks like rails django sp dot net NBC and poured it right over to note and say, Ahhh! I have a great Web framework, but you'd really be missing out nodes. Modules are portable and self contained, and you access them through a well defined A P I that you construct using knows common jazz module pattern. If you take the time to break your application out into smaller applications, things become really, really easy really quickly. You're African, be built according to principles you already know like domain driven design. We'll talk about that later, and your team can stay focused on a smaller code base that each code base has its own tests. We'll see all of this in action later on for now expresses our choice because it keeps us close to the metal with note.

Setting Up Your Project
Setting Up Grunt
[Autogenerated] let's get rolling and set up our environment. I'm working on a Mac. Using I term is my shell client. If you're on Windows, you can follow along in power shell, using all the same commands you see me use here. If you haven't used power shell, this is the perfect time to get started. If you have it installed. Note yet. Let's do it. Head over to know jazz dot or GE and download the installer. I used the package installer in My Mac, and if you're on Windows, well, you don't have much choice. This will install the node. Execute a ble as well as know it's package manager NPM. No, it runs just fine on Windows, but there are a number of note modules that don't, and it's a pain to find out when you're deep into your development cycle. My recommendation to those just getting started. A note. If you have a Mac, use it. If you don't kick up virtual box or your favorite VM host and install the latest version of a boon to this will eliminate any surprises you might have with regards to note in Windows. And it's a good chance to get more familiar with UNIX. Now that notice set up, let's set up our project directory. Our first task is to create a directory for a project. This could be harder than it looks is it requires coming up with a name and I'll choose one out of thin air. Froggy frog. He's a little guy that my daughter's left sitting on my desk. I know it Listening out the contents of this director using L s. I have a shortcut. L you can see this directory is empty. Now open up. Web Storm Using a shortcut I created and there is our empty project. One of the great things about note is the amount of existing code out there that you can use in your project. Get have is loaded with these modules, and searching through them can be daunting. Why so many? Let's talk about this before we do anything else. Notes. Philosophy follows out of UNIX. Do one thing and do it well. This leads to needing more modules overall, but also decreases the amount of bloat, if you will in your final project. It's common for authors to create a useful module and then break it apart into smaller modules. If they feel it's too big, we're doing too much. A good example of this is current task Runner Tool that many jobs script developers use to help them write their code, test it, build it and, in some cases, deploy it. To install Grant, you need to do it in two steps. The first step is to install the command line binary grunt. CLI. We do this by telling in P M to install grants Eli and add the dash G flag to make sure it's a global install that would be available everywhere. Next, we need to install grant itself. We do this by using NPM install Grant NPM looks to the N. P. M. A registry using a basic get request built from the name of the module itself. If that your EL exists in P, M. Pulls it down for us into a local note modules directory that it created for us taking a look in that directory and there's our current module. Grant can do a number of useful things, and we'll get to a few of them later on. Right now. I wanted to let my JavaScript code, which is another way of saying that I wanted Toa watch what I write and validate that it's not written with bad JavaScript coding habits, such as inadvertently creating a global variable or forgetting a semi colon. This might sound like overkill, but consider that the Java script code you write will be used in someone else's application. When they go to build that application, it will likely have a litter of their own. And if it trips on your code, killing the build, no, they won't be happy with you. I don't want to be that person, so we'll set that up now with grunt. First thing I need to do is install a litter, and for this I'll use Js hint and install it with NPM. This used to be built into Grant but was separated into its own project, keeping with a note philosophy. I'm also gonna install another module for watching code files and firing off tests based on file changes. This is Grant contribute watch. I've just installed three modules into my app, and I'd like to remember that I'm using them. I'd also like to be sure that I have the right versions installed, so I can share this app with my team and also work on it on other machines I have at home. NPM has a notion of a manifest for just this reason, and by convention, it's called package dot Jason. It's a simple structure that it's a very least should have the project name. It's version which I should have had it here but didn't whips all at it later. And what dependencies it requires in our case grunt and its associated modules aren't really dependencies of the project. There's things I need is a developer. NPM allows you to specify that with E Dev dependencies Key. I'll add my three modules here specifying that the latest versions of each module will work. We'll be working with package shot Jason throughout the development process. Using grant means creating a single file called Grunt File and placing it in the root of the directory in which you want to work. You could have more than one grunt file if you like. This is usually your project or your modules. Root directory. The grand file is a node module, which will talk more about in just a minute, so we'll need to export some functionality from it. When this module is called, grunt itself has passed in so we can configure it and tell it what to do. We can configure Grant by calling in config and passing and Jason Config information as needed. Here. I'll tell the jazz hit module that I want it to lent all the files in my lib and Models directory. Grunt is a task runner, which means for it to work, it needs to have tasks created for it. These can be simple functions you right, which I'll do later, or tasks that others have created and collected into grant modules. Just like the Js hit module I installed a few minutes ago. I can load those tests in by calling grunt dot load in P M tasks and sending in the name of the module. We can see these tasks by cracking open node modules. Run contribute as hint and its task directory. This is a refreshing thing about note modules. They're right here and typically include documentation, examples and a read me file. In addition to their source code. Let's run our grand task and see what happens. As expected, no files are limited because we don't have a live directory or models directory. Let's add a live directory in a file called index dot Js and I'll forget a semi colon. Oh, no running the _____ her again in Boom finds a missing semi colon and tells me where it is. Fixing the problem and I'm lint free. We're late free, but I know that if I have to run this command all the time well into a pile up, I'd rather have a system. Watch over the changes and let me know if I've done something bad. So let's set that up with the second module installed. Grant Contribute. Watch here. I'll configure. Watch to stare at the same subset of files that I'm wanting glinted when they change. I want the GS hint task Run pretty easy. Let's see if it works. Nope. And guess why not? I forgot to load the tasks for the watch module fixing that, and we're in business. I even get to hear a fun little beep in my ear when I forget. Those semi colons tools like grant and jazz hand are indispensable when building Java script applications. Drunken do so many things for you that when coupled with your favorite text editor, it can approximate and in some ways surpass what a 90 ikan d'oh that said, I love Web Storm, so let's continue on and build out a module.

Understanding Modules
[Autogenerated] working with node modules is one of the joys of working with note. This system is so simple, yet it's incredibly powerful. At the same time, let's take a look at the basics. Now the first thing I'll do is to create an APP file. This will allow me to write some JavaScript code that note can execute here. I'll just write a message back to the terminal to run this all run note and passed the file. Hi there Now create a module called the Utility. Does everyone have one of these laying around somewhere, and I'll drop it into my live directory? I'll say hi from this file as well, using the same code, but with a lower case. Hi. To use this module, I need to require it. I do that by using the require keyword and assigning it to a variable, which I'll call utility. Running this code. It works. This module will have one method say hi, and it will do the exact same thing. This is where the note packaging system starts to shine. The notion of a module is not restricted to a single file. It could be one or more files contained in a directory to see this all created directory called Utility and Drop My Utility Js file right in and then I'll rename it to index dot Yes, we're running our code. It still works. This is because notes look up system will see that a directory is referenced and we'll look for a starting file, which by convention is named index dot Js. That's interesting, but it's hard to see why you'd want to have both the directory and file rather than just a file. The answer is the index dot Js is just a entry point. Ideally, you'll have more than one file in your module. Let's expand what we're doing in here, and I'll add a model's directory and move my index dot Js file into it next, all at a file we've seen before. Packaged up Jason. This file is a manifest that describes your module taking a look at our project tree. You can see that we already have a package dot Jason in the route. Believe it or not, that is okay. In fact, it's more than okay, because modules can and often do contain other modules, which themselves contain even more modules, nodes module system is recursive. We'll see this more later on. For now, I'll just tell Node which one of these files in my module to start with by specifying it with the main key running our code again. And it works. Noticed, too, that we didn't change any code in our app dot jazz file. We simply restructured our module, and everything worked just fine. Leaning on convention Specifying a main key, however, is not what most know developers do. It's pretty common to see an index dot yes. Father references other files within your module. It can also act as your modules. AP I letting you make public on Lee what you wish to make public again. We'll see this more later on. This structure that you see here is very common for note modules. An outer directory with the module name a package dot Jason with the descriptive information and dependencies. An index dot Js file is an entry point and coat files arranged in subdirectories. When working with note, it's easiest to always think in terms of modules. These don't have to be public modules just self contained, a little bits of logic that when combined with other modules make up your AB. That's at the core of what we're doing today, and I'll be coming back to this idea repeatedly. Throughout the video, node modules were elegant and powerful, but they can also surprise you in some ways, specifically their life cycle upfront. All knowed modules are in Stan sheeted once and cashed in memory for the life of the application. This means, basically, that you can think of them as Singleton's. This can cause problems for you if you're not aware, so let's see an example here. I'll create a user module, and I'll keep it as a single file. I'll add some get set methods for working with the notion of a name as well. Now let's head back over to our app dot Js file, and I'll require the user module. This will return the instance the Onley instance of the user module to my user variable just for fun or acquire that same module again, and I think you know where this is going. But let's play it out just so you can see what happens. Running this in both return rob as the name. If I set the name value for the first user module and then ask the second user module with the name is Yeah. As you can see, the name Steve is now set as the name everywhere in your application. Okay, that might have been a little far fetched, but let me show you some code that I wrote just two weeks ago that had me groaning for days. I had to write a shopping cart, so I sat down and created a cart module which had an item's array backing it. It had the methods that you might expect. Add item, get item, remove items on. And this, of course, won't work. The items array will be shared across your entire application because this module will be cashed and reused everywhere. If you were to pass in a unique key, however, and we're completely with the data source like red ISS, this module would indeed work this aspect of notes. Module system bites everyone from time to time. It's good to be aware of it right away.

Organization
[Autogenerated] it's easy to say something along the lines of think in terms of modules, been discussing, note and how to organize your code. But what does it mean? Here's one way that I personally have found very hopeful. Straight up front, I try not to have a parent project. In other words, if you're developing a Web, try to avoid putting all of your logic inside of a single live directory that, in turn, is in the root of your Web. What I have typically done is to create a single directory for my project and then subdirectories for each module that goes into it. But what are these modules? How do you know what she go into? A module? This is not a straightforward answer. The best possible advice I could give is to not overthink it from the start. That's easy to say, but what does it mean? Let's walk through this. This project is an e commerce project that I'm building for fund eventually to open source it or something else right off the bat. I know that I need a website and that I'll need modules to handle all kinds of things from shopping cart interactions to checking out from order fulfillment to customer management. That's a lot of stuff. My goal with slicing the project up into modules is not that I can re use it later on. It's so that development could become tightly focused and future maintenance becomes really simple. I'm going to borrow from what I know of domain driven design and think about this project in terms of business. Service is also known as bounded contexts. So that's how I'll start. And no, this is well, you can always extract things out even more later on. I'll start with a membership module as well have the notion of members as well as customers. I'll also add sales, accounting and fulfillment. You certainly don't need a structure your folders in this way, however, being the sole developer on this one right now, I prefer simplicity, so I'm gonna keep everything right in front of me. What's most important is that each module is separated from the other. This is what I want Now. What I could Dio is drag my package dot Jason Grant file and node modules into the membership directory. These files are now dedicated to my membership module before going any further, I'll rename my module. Does something a bit more specific for this all add Froggy Frog membership, knowing that I could rename it later. I'll also add an author and description while I'm here as a side note. I should also have a version in here, but I overlooked it at the time I recorded this. But why did I do all of this? Know developers have adopted the UNIX mantra. Do one thing and do it well. I want to do that here to develop a membership module and hopefully do it Well, that means I'll need to have models and processes specific to a membership system and to expose that to calling code to some type of A P I in my index dot g s file. I also want to have test specific to this module contained directly in the module itself. This approach is different from a larger all in one approach like you might see in rails or dot net, where your tests are in one place for all of your modules or projects. This makes things difficult to manage. As the project grows and expands

Choosing a Test Framework
[Autogenerated] Let's set up testing for our module. There are few tests remarks to use. Node unit vows Que unit Jasmine. Those are some of the more popular ones, but most people I know youse mocha all this tall mocha globally using the dash G flag. This installs the mocha test runner on Executed a file into my path. Also, install the Should Assertion Library, making sure to save it in my death. Dependencies. For many development frameworks, installing the test framework and run time is the easy part. Getting everything configured and running and working correctly. No, that's the hard part with a mocha and node. We had a test directory and our test files into that directory. Now we get to write a test, which I'll just step out here with a bunch of silliness. Just see the results of this test. I just execute the mocha command in the root of my module, and that's it. Just run quite fast, but they don't always stay this fast. However, as your project goes, yes, it will take a while to run all these tests, but nowhere near as long is an untwist rails are specks set up, but that is not the note way. We want our module to do one thing and do it well. This means our test weaken, stay smaller, and there's no large environment to load up Looking at the output here from Moga. It's okay, but it's not the nicest I've seen. Let's change that output by adding a few options. Tomoka I can do this is flags in the Mocha Call itself or I can create a file called mocha dot ops in my test directory running joke again much better.

Flexing Git and Github
[Autogenerated] let's get rid of this sample Test filing community module to get this is very, very important. If you're working on a larger system as I am, you don't want to add the entire parent directory to get. Each module should have its very own repositories that we can use in P m toe. Load it in. P. M. Works directly with get and get, huh? Believe it or not, and you'll see this in detail later on, I'm going to add a dot get ignore file here, and this is something you don't want to forget as well. You don't commit your node modules to your sorcery. Never do this. This sounds a huge amount of book to repositories. Makes it hard for people to work with your module. Your module will contain modules that contain even more modules, and this can go on for a very long time. That is, a lot of files know developers are used to working from the package dot Jason file, letting NPM install the dependencies for them using and PM install. Let's add our files to get Oops, I forgot to initialize their and we'll do our first commit. I've also added a remote oppa get hub so I can show you why. It's important to have a single repositories per module using in p m. On Stall the Express Web framework and then ask Express to create a new site right here in a project route, which I'll call Froggy Web. Next, I'll crack open our express APS package shot Jason until it that I have a dependency it. Tech Bob Ford slash froggy membership. NPM has the ability to search for your module in a lot of places, as we've seen. It will look for it on your local drive if it sees a file or directory reference, which must start with a dot or a slash. If your reference isn't a local one, NPM will assume that you want a module listed in the N. P M. Registry up at registry dot N, p, m Js dot or GE. If it can't find your module there, it will parcel module into a kid, have a repo until it's trying to do this by reading the output of the command. So MPM found my repo and was about to install it, but we have a problem when that I mentioned previously. I don't have a version number in my repo, which is very bad. This is how NPM knows which version to work with, and we'll stop installation if one isn't specified, because then it wouldn't even work at all. Let's fix that by adding a version number, tour package dot Jason and pushing back to get hub. Now let's run the installer again and it works. Taking a look in her Note Modules directory There's a module called Froggy Frog membership.

Building a Registration Module
The User
[Autogenerated] in this module, we're going to shift gears into a live coding. We need to start somewhere, and for me it's usually building the thing that allows data into the database for this project. That's the registration system. I'll be cutting it a bit slower pace and I've edited things just a bit slowing down when important concepts need explaining. So in the next 40 or so minutes will flip into behavior driven development mode, with mocha specifying how registration system should behave and then writing the code to fulfill those specs. As we create the test, I'll show you common testing patterns to help you write faster, more targeted tests. You'll also see me screw up a few times. Which is a good thing is some problems air rather common, and you'll see how to solve and avoid them. Finally, we'll talk about patterns you can use for building your own modules and various ways you can avoid call back ____. Let's get started writing some tests that will actually use. We know that we're going to need a user, So let's describe what a user is. I should note that I'm not going to be doing B D D here. This is just straight unit testing. Even though I'm not doing strict be d d. This is a familiar scent of when using a D S l like mocha. The outer describe block is your feature on your subject. The inner describe block is an aspect of the thing you're testing when we get to be D. D. Later on, this will morph into feature and scenarios. Each enter block should work against a single bit of data, which you structure just for the block. It's a mouthful of jargon to go along with what I'm doing, but I'm going to sidestep all of that and see if I can explain the process here in simple terms. We know we're working with a user, and we know that we want to spec out a user's default settings. So we set that up in the very beginning and right test to confirm our design ideas below. If you find that you're creating new instances of a user with in your chest, create a new subject block, you really only want to be testing one instance per block. This kind of thing may seem obvious when talking about users in default settings. When you get two more complicated things, it gets a bit less clear. We'll touch on this again. But for now, this is a typical testing structure. When using Mocha. Now, let's write some test to verify our design specifications. I have some shortcuts wired into Web Storm, so I can quickly type these things out. Each specifications in MOCA is created within it function. How you write this specifications is very important. It will convey what you're trying to do to the rest of your team and, if done correctly to the business people that care about this code, used to clarity of statements and stay away from the repetition of the word should. For instance, in my first back, I'm stating the email is robert Tech pub dot com. Many BTG fans We're reversing the word should in there somewhere. But that simply doesn't fit. And moreover, it's unclear and waffle worded email either is the default sent in or it's not. This is the Yoda rule. Do or do not. There is no should. This is your note pad, the place where you're supposed to muse on what your code is going to do, and how it will behave here. I'll jot down what I expect from a new user, knowing that I can change rename nudge things as I move along. I based this off of what I know from devise and hear the specifications for the information user contains. Before we run this, we'll need to add a user module so things don't air out and don't require it right at the top of the test suite. Now let's run mocha using the dash w flag. This will watch our files, and when we change anything, we'll rerun our tests and we get an error, A very common error at that, and I am confident it won't be the last time that we see this type. Air object is not a function. This area is telling us that we try to invoke something, thinking it was a function and it wasn't a function was an object looking over our code. There is only one place we're doing that, and that's online. 10 where we try to use the new key word with our user module. The new key word only works if our user module is a function which it isn't. So let's fix that. The simplest thing I can do is to create a variable called user and then exported. I should note that the naming here is not required. I could have called my function monkey, but it shows user proper cased for consistency, rerunning our tests and the error is gone. Each of our test is blue, indicating that there pending, which is exactly what we want by default. If you don't have an assertion function in mocha, your test will be pending. Now for the fun part, making our specs pass one by one, I'll set up the windows side by side so you can see the changes as I make them. And before I get going, I'll take my coat, her hat off and put on my walkie architects hat. I have a number of patterns I can follow here that follow from basic software practice just because we're using a funky, dynamic and somewhat encumbered language. In other words, Java script. It doesn't mean that we can't apply the skills that we've learned so far in our careers. In my test code, I used a constructor, and this is a pattern in javascript, the constructor pattern, the idea here is that you take in some initial settings, apply them to an object and then return that constructed object. If I didn't want to use the new key word, I could use an explicit method, perhaps something like create empty user or something. And that would be the factory pattern. I'll get more into this later on. For now, I want to keep it simple. I'll create an object in Assign It to a Variable, and then I'll assign an email field, assuming one exists on the arguments passed in. But I don't care for assumptions. Email is required of all users, so let's make sure it's there and formalize this for this all used notes built in Assertion Library. If there's no email we'll throw, let's continue on with optional parameters passed in, and for this we can use JavaScript truth he falsely feature here. All said it created at field. If one exists on the past in arguments, if it doesn't exist there, it will be undefined, which is valued is false. If it's put into a conditional statement, we can put this into a conditional by sticking an or statement in the assignment. This is how you write a default on JavaScript. Here I am asking if there's a created at field on the past in parameters. If there isn't a sign, a new date, fast forwarding a bit, and here we have a reasonable clone of a devise user. Now let's get our test to pass. The first check here will be email making sure it equals Robert Tech pub dot com Half the battle in working with note is remembering the assertion. Library syntax. Many developers I know just go with notes, assert library, which you've just seen me use. What I like to use should and our first test passed. Ah, feels good. Let's fill all these out as we go along. I have a feeling test with the authentication token, but I'll get there in just a second. These last tests don't make much sense in terms of defaults. Put them in because, as I mentioned these airfields that you see with devise, but I don't think they belong here, so I'm just gonna remove them. There we go. We still have one failing test, the one that checks the authentication token. I didn't set it because they don't have a way of creating a random strings just yet. So let's do that. I'll stick it on a utility module. Yes, I know, but I'll see what I can push it later on. This is a function I have used a few times before, so I'll just snap it in here and great. Now I just need to require it and use it. Nubes. That's what happens when you copy and paste stuff. Nice to have test to cover your butt, isn't it? Fixing that and we have some passing tests. Who?

A Pattern Discussion
[Autogenerated] We just saw the use of a very simple pattern. The constructor. As a programmer, you're already familiar with this way of creating an instance of a class, and as mentioned, you can use all of the same patterns you're used to in other languages. In Java script. Let's quickly touch on that. Daddy has money. A very active JavaScript community member and a developer, Google wrote a great article on design patterns and Jonah scripts and how you can work with him for this production. I'm only gonna be using a constructor, I'll tell you that straight up front, so there's no surprises ahead. But there are a number of other creation, all patterns that I could use if and win. Complexity arose these air powders you're already hopefully familiar with, including factory singleton, builder and prototype. The idea here is that if you know your patterns in another language such a C sharp, you can apply that to Java script as well. To solve a particular problem, have a read through Addie's Post. It's brilliant, and you'll find yourself getting more and more comfortable with Java script if you're not. Already there are three patterns that I want to talk more about, however, is you see them quite often with Java script and not so much with other languages like Ruby and C sharp. They're the module pattern revealing module pattern and the prototype pattern. The module pattern allows you to wrap functionality onto a Java script object. It's very simple, and you can reference it directly. We've already seen the module pattern in action. It's it the core of nodes modeling system. If you've been wondering why node modules used the words exports and requires Well, it all stems from the Java script module pattern, and you're gonna imagine there are many ways that one file can use the functionality from another file. If we lean on software design patterns. JavaScript developers recognize this. Back in 2009 as Java script was making its way out the browser and decided that rather than thresh about and reinvent many wheels, it might be good to agree on a common way that functionality from one module could be used within another. This is common Js project, started by Kevin Dinger that has a simple goal. Formalize a common FBI for JavaScript modules and packages. This is the standard that note has adopted, the system is profoundly simple. When building a module, export the functionality that should be part of your module object. This could be a function of primitive value or an object literal. When someone wants to use your module, they require it by using the require keyword. Your module will be in Stan. She aided, and every bit of functionality you have exported will be ported to a module object, then set that module to a variable and off you go. The module pattern works well, but it could be unclear to other developers what is visible through your modules. A P I. One way to formalize this is to wrap everything in a function. What's public and private is evident just by reading the code that is returned. This is a derivation of the module pattern, and many developers prefer it because it's explicit. If you've worked with any client side JavaScript libraries like backbone, you've probably seen something like this. This is how you declare a model backbone. The idea here is that backbone DOT model is an object that's being defined for you and your cloning and extending its prototype and setting it to a new prototype. You can access the objects prototype by using the prototype property, extending an explicitly rather than through the use of a helper function like we just did with extend and backbone. You'll see many know developers favoring this style of development. It could be much clearer than in line function. Declaration in a constructor for our purposes are objects are very simple, so I'm going to leave it the way we have it. Speaking of, let's get back to our project, I know that my app will need to do logging, so I'll create a log function using the constructor pattern one more time. Ah, fall of the same process that I did when creating our user module. But this time I'll go just a bit faster. I'll assert that a subject entry and user idea our past in and then return are constructed. Object. A side note. Here you often see a constructed object. Use the this key word referring to the scope of the constructor function. If I'm creating an object that doesn't extend another objects prototype, I'll create an explicit, empty object from which to build That way. I know that I'm not working on top of another prototype. That's it. We now have a logging objects

Defining a Service
[Autogenerated] up to now, we've touched lightly on testing, using it to help us verify that a user and a log exist and that we're setting default values correctly. Let's go a bit deeper now. Getting into B d D As we describe the behavior of our registration module, I should note that there are many ways Doobie Dee Dee. This is my attempt to adhere to the original idea and philosophy behind Beatty without getting mired down in the syntax, dances and testing ceremony that have since evolved. I'll start with a feature in the outer describe block registration that's our feature. Next, I'll define some scenarios and specify how my application will behave in no scenarios. The first scenario, what I like to call the Happy Path is a scenario where everything entered is correct and valid. Happy path should always work, and it's my habit to make this past straightaway and to make sure it keeps passing, as I think of various ways to make my system fail and scenarios in which failure might happen. Speaking of what happens when we enter an empty email or password, let's specify that same with password and confirmation mismatch and an existing email. Now let's specify what should happen. In other words, how does our application react when a valid application is registered? The first thing that comes to mind is that should be successful. Next, a user should be created as well as a log entry. Finally, the user status should be approved. There are a lot more things to enter here, but this is a good start for the bad pass down below. The results should be the same in every case. Results should not be successful, and the user should know why. So a copy and paste the specs on down the list here, running respects and they're all pending. Great. There's no errors in execution for each scenario. I want an explicit object that represents that scenario, So I contest what happened effectively. This means I'll need a registration module with an explicit return value Creative Registration, Judge GS file and export a single function called Apply for membership, which will accept some arguments in the form of an object Literal. This is a common pattern that you see with node and JavaScript. In general. You also see it in the ruby in python communities, use an object when passing arguments as opposed to individual primitive parameters. It keeps your A p I flexible, allowing you to change arguments as needed as your library changes in the future, I'll create an object that will represent the results and default. The success. Property toe False. No, this needs to be its own constructor. So all created explicitly right here in the same file. It gets complicated. I'll move it to its own file later on. But I think it's going to be pretty simple stuff. We'll declare a result, object in line and return it. Setting the defaults as you've seen me do. There are no arguments. I need to set on this results so I can just create an object straight away and return it. There we go. This should be enough to get a first failing a test. I'll require the registration module and then call the apply for membership method passing in typical registration arguments. Analyst signed This result object to a variable only visible in the scope of this describe block. My first test should fail as I am defaulting success to be false in yea, it fails. Now I'll just speak faultless to success with a welcome message. I know this looks nuts, but it's up to my follow on scenarios to bulletproof this so hang in there and our tests pass. I don't like this. Let's keep going and define a user as well, which is bringing something to mind you don't like. Having random records, pinned objects for convenience. I'd much rather have an explicit object that does one thing the node way. So I'll create another object called Application, which will move through the registration process. Same constructor pattern and same setting of arguments passed in. I won't assert the presence of email and password here is I don't want to throw. I'll handle this explicitly with validators in just a bit Right now. This looks good, but for getting something, can you tell what it is? I'll require my application prototype and then create an instance of it immediately in my apply for membership method. Boom. Get an error. You know why I forgot something and you have seen this error message before. That's right. I forgot to export my application product type whips. That's a common air for me. Now let's put this application object through its pieces My personal habit is to write out of things we need to do in the comments, then one by one. Create the individual methods. This is typical registration stuff. The fund isn't implementing it cleanly with an asynchronous language. Let's see how I do. The first thing I want to do is find out if my application is valid. It is. I'll return a successful result. This will error as I don't have this function, so I'll add that to my application object as a side note. If I was to use this instead of ah, object called APP, I could extend the prototype of my application object explicitly defining the is valid method below the body of the constructor. As I mentioned before, this follows a common style. You see a note, the prototype pattern, but it's up to you how you want to do it. This reads better to me as my application classes rather small here. I'll just see if an internal status variable is set to validated, which brings to mind that I'll need a way to set this variable so I'll just go ahead and create a set invalid function as well, which sets the status. Also accept a message here that I can convey back to the user. And finally, I'd like to also have an explicit is invalid method. Why not? So now we have things failing all over the place. Good. This makes me feel better only to validate the inputs sent in. So all creative function that does just this, making sure email and password are present. I could return true or false here, but I'd rather set the applications status directly. So I'll do that. And there we go. If everything passes, all validate the application. Setting this status as needed. Okay, Things are still failing, which means I'll need to actually call this function. It passes good.

Dealing With Data
[Autogenerated] I don't mind testing against a test database. I find that many errors are avoided that way. There's a little bit of extra work involved, not much, and I know this will ruffle a lot of feathers, but in general, I follow trails lead here. Just stop worrying about it. Get some work done. This is just a personal preference. It's never bothered me. There are ways to mock these things out, and we'll talk about that in just a bit. For now, let's install our database. I've been wanting to use rethink Debbie for a while now, and this is my chance. It's Mongo DVD done right, according to the Rethink Team, a sort of second generation document database, and I love it. You can install it using homebrew if you're on a Mac or follow the instructions for installing a bun, too drawn Windows. This will be a problem for you, but hopefully you can take a second and kick up on a bunch of'em because Rethink DVD doesn't run on windows yet, but it's worth it to have in a bunch of'em. So just take a second fire, a virtual box or whatever you have there, I'll be working with the data access library that I created for working with Rethink D. Be called a second thought, something I extracted from a note project I was working on recently. It's a super light bit of abstraction that helps you work with things a bit more declarative. Lee. You can install second using NPM in error. Don't worry. This is from the rethink Debbie Driver itself wanting to compile Optimizer. Things will work just fine so you can ignore it. Once installed, you can fire everything TV in our project directory by simply typing in rethink TV. You should see the output that you see here. Don't feel free to send me an email. It's Robert Tech bub dot com, and I'll do my best to start you out. Let's use grunt to help us set up the D B as well. Here are all created chance called Installed EBI, which will use second thought to create our tables. I need to make this task asynchronous, and I can do that by setting a variable to this dot a sink right inside the register task method. Now I'll wear the install code and there we go, running the task looks like we have an error, but I think everything installed I for got to require the assert module do that often. But the air happened after everything ran. So I think that means that things were installed. Let's take a look and yeah, there we go. This is the Rethink TV Web interface. From here, you can manage just about everything pertaining to your rethink TV server and databases, including Simple Scharping and Replication. It's really an amazing system. Now I can check the user's table to see if he used to exist. I just need to require second thought and use the connection method. Call back will have a DV object populated with all the tables, and we can carry it as needed. I wanted e user record back. E could issues first. There's a better one I can use, which is exists, so I'll use that the record exists. I'll set the application to invalid passing a message back, and then I'll invoke the callback. I'm also going to assert that there was no error. I want this throne right here and not leave it to the calling code to _______ it. We have an error in this query. There's something really wrong, and it should be thrown. But I have a bigger issue here when that is starting to stink. And one that I'm sure many of you are scratching their heads over. Why, Oh, why am I embedding the database connection information right here inside my method? Indeed, I don't want a couple my registration module to my database implementation, so let's make that a little bit better. We don't want to embed our connection. String inside of our module should be configurable as far up the abstraction stack as possible. Ideally at the application level or execution level is part of some configuration file. We can do this by leaning on good programming patterns that we already know, particularly using dependency injection. Well, we passed data access into a constructor, which means that we need to move from a module pattern to a constructor pattern. Aaron, a registration Ma, This is a small change at this point, so let's just do it. I'll copy paste the code we've written so far, and then export our prototype. Also, make sure I don't have scoping problems in the future and reset this to self. Yeah, we go into everything breaks, which is to be expected in my test code will require second thought and all created before function. That will go off before all the tests and my tests week connected the database and past the live connection into my registration module. This means, of course, that all need to work with registration. As an instance rather than a module we have an error object has no method apply for membership. Uh, I'm not returning self at the end of my constructor lips. Wait, Shouldn't be the problem because self equals this by reference. Oh, dear. You see the problem here? If you're used to working with a synchronous code, this might look fine to you for your Java script person. You're probably throwing things at your computer screen right now. This function is a synchronous, but our test suite has no way of knowing this. Our Reg object here is just an empty object, literal. Our connection is happening, but we're not waiting for it to return. Using a callback boy, I can tell Moka to wait for our before function to finish before moving on in the same way that I did with grunt, bypassing it. Flag function called Done mocha will wait until that function is invokes before moving on from the before function. And now things are working. Ray. Let's plug in our existing user check and remove the connection call from our method. We also don't need to have an explicit call back here. We could just pass the callback straight through, which simplifies Arco dramatically. Now we can add a check in for our applying membership method, being sure to assert for any errors. Oh, boy, something's still not working. Let's all put our exists for Abel. That's right. It's false. This is our problem. Our assertion is failing because we're expecting success to be true. Since no users exist is our call back and telling us it should be returning true. So what's the problem here? See the issue A synchronous programming takes a while to get used to this stuff. Problem is that because we've started using callbacks with our check if user exists method No, that means we need to start using call backs all the way up the stack. Here I am simply returning a result object, but once again it's completely ignoring everything inside the asynchronous check if user exists function. Yeah, I can fix this by having a callback passed into our apply for membership method. Then invoking that after calling all the methods that we want. Okay, we're almost there. Now. We just need to be sure our before function in this describe block is a synchronous as well. And I do that by using done once again. What you just witnessed is enough to deter many developers from using Java script. This stuff is just not apparent if you come from a language like C sharp or a B or Python. But we did it and hopefully you understood all the dumb things that I just did. Now we can go back and attach a new user to our result object. So our next test passes.

Saving the User Record
[Autogenerated] The next step is to save the new user to the database. There's a bit of work we'll need to do to prepare the new user records. So let's get started. When a user registers with our site, they provide us with a password and a confirmation traditional stuff. It's in our best interest to never store this password in a retrievable format. This includes clear text, of course, obfuscation and also encryption. What we need to do is hash the password, which is still not completely secure. But it's a reasonable best attempt. We're gonna be using a respectable hashing algorithm. This is a very hot topic and I'm not a crypto expert. I'm simply going to follow, devises, lead and go with using be crypt. But I know that a few people think be crypt is not as good as other solutions. So if you want to change this, feel free, we'll install the be crypt node Js library once again saving the reference to our package dot Jason dependencies and all reference the module in her registration module. Once again, when you install a module from NPM, it grabs the entire code base, including a read me take some time and read through the module. That's right in your note modules directory. If you want to learn how to use the AP, I very handy. This hash call is just what I need synchronised routine that I can call right in line. I'll use this routine and set the hash password on the user. Now I just need to create a safe routine, and I'll follow the same pattern I did with a check. If user exists, method and simply pass the callback just the safe routine directly. This means that my little JavaScript Christmas tree is going to grow a bit more as I have another call back to deal with, um, and follow the same pattern here as well, asserting that there is no error from my database and then assigning the new user object to our result. Object. By the way, I should mention that the new user you see here is complete with a new I D generated by Rethink TV, which is nice. I'll call next. Here is Well, oh my God, this is getting ugly. I want to know what's going on when we create a user, so lets out a log entry for when the user was created. Logging is not specific to membership, and I really should be using a centralized module for this. Very well. May at some point, we can start the building of it here. And eventually we can move the log out to its own module if we want. Or maybe see if someone else has created a better one. But for now, I'll set up a asynchronous events and create a new log using my log module that I created earlier. Next, I need to call that function. And you know, this means growing my little Christmas tree. Another level, man. Looks like we have a reference here. Whoops. I have a bad variable name here. Gonna rename this two bc and we have another error. Does this look familiar to you? Can you guess what I did wrong? Hopefully you can. It's the third time I've done this. My log module isn't exporting anything, so let's fix that. And that area is dealt with. But now we have another. We now have a timeout error and this is another one you're going to see often when working with Java script. Especially when testing this is happening in our before call, which means that we're timing out before a function is returning. This usually means that we've _______ up one of our callbacks, not returning anything at all. Since things were just working a minute ago, this means were missing and call back in vacation in the new stuff that I just wrote looking it over. Yep, typing too quickly there. The constructor doesn't take a call back. Call to the database does. I'll do the same thing here and pass the call back into our Saviour team and see if that changes our problem. No, which is odd when you encounter callback ____, which I am slowly lowering myself into year. One way to figure out what's going on is to drop log matches messages to the screen. No, this is hack ish, but it works. We should note that Web Storm has a pretty good to ______ that I could use if I wanted, but I find this to be faster, Believe it or not, let's find out if we're even getting to the saviors or call, and we're not hash even going off. No, let's move our consul dot log all the way to the top and see if we're even calling this function in the first place and I'll put the exists variable. Oh, dear. Right course. One of our previous test runs created a user record and course it exists. God, this means I need to delete all user records before I run this registration routine. Do that here in the beginning. Here we go and it works. Let's open up our rethink d be Consul and see the data. Yeah, there it is. Wiping the TV like this might seem ridiculous, but this one step is all I have to do. I could put it in an after block, which would go off after this blocks. Tests have run, but it would wipe out my data, and I like to look at it sometimes. Like, right now, one thing that I'm seeing is that I haven't updated their status to approve. So I'll do that here in saving, well, rear end my tests. Now you can re around my query and there is a proper use, a record. Let's finish up our tests, which should be a bit simply to deal with. And there we go. I also want to increment the user's Sinan count, so I'll do that, too, and add a test to make sure it's accurate Great.

Pyramid of Doom
[Autogenerated] let's jump forward a little bit. I filled out the rest of the test, which was rather uneventful, so I decided to spare you all of that. What I've ended up with is rather typical Java script written by someone who's just trying to make something work. That's me. There are better ways to do this. Let's take a look at a few. The simplest thing I could do is to avoid using inline anonymous functions. That's callbacks. This doesn't do much for the pyramid of pain, but it does make things a bit more discreet. I'd like to do something a bit more elegant. Whoever we could use promises, and they are simply put, an object that represents the results of an asynchronous function. Call some frameworks. Call them futures or deferred, and you often see them in platforms like Jake Worry, Angular. An ember note removed promises early on with a feeling that if a platform did less, creative platform developers would actually do more and probably do it better. Some people like promises and others don't. It would work out pretty well here, and for that I could use the Q Library calling each function in a familiar. Try catch way right here is why no developers use the callback signature standard that they do and why you should, too. Era's first argument Return data as second. If you standardize on this, you'll be able to use ____ for libraries pretty easily. For me, this code reads well, and it's simple to use, but I'd like a bit more clarity in the ability to add extensive bility later on. One of the library's I like to use to handle flow control issues with JavaScript is the A sink module. Generally, I like to lean on and embrace JavaScript. Asynchronous nature, which can be hard to do if you come from a procedural, object oriented background, is I do. But sometimes you need to do things in this stepwise fashion. Here's one spot where I needed to do just that. This is the install method in my second thought library. Basically, I need to create a table for every string element passed into the tables array, and I do this by calling the create table function. A sink makes this easy, using the each method for every element in my array, that element is passed to the create table function and that function is invoked. All of these indications are run in parallel and on Lee, when they're all finished is tthe e call back. You see here invoked. Finally, think allows you to call functions one at a time. Issue like using the serial method, and you can pass result data from one function to the next. Using the waterfall method. It's a very useful library. Take some time and get familiar with it, as you'll likely find it useful in your note adventures. A sink module would likely worked for me, but I want to have a bit more control over extensive bility, and I don't want to impose the knowledge of this library on future collaborators. I find it much easier to embrace the asynchronous nature of Java scripts and note, for that matter and just go with it, so to speak. Promises and flow libraries are interesting, but it feels like unbending Java script to be synchronous. What I'd rather do is write code that reacts to changes using events. That's how it's done and always has been done on the browser, and we can do it with note as well. Using the event emitter, Let's take a look

The EventEmitter
[Autogenerated] first thing I need to do is require nodes, events, module and set the modules event emitter prototype to an emitter variable. I'll also reference notes you till library, which will help me with inheritance in just a minute. Next, I'll invoke the event emitter, constructor and pass in this, which will be an instance of my registration function. Step isn't necessarily required, but it's a good habit to be in. Finally, I'll use the Util Library to graft the event emitter prototype onto my registration prototype. This is one way to do inheritance in a classless language like Java script. It would be nice if I could use event mr dot extend, but that would be a bit overbearing to me. This is nice and clean. We can now emit and listen for events on our registration module. This can happen both externally and internally, and I'm going to use them internally to wire things up the way I want them. I'll start at the top with the validate inputs function and I'll remove the callback if the APP is invalid and ah lim an invalid event, passing the application along If the APP is valid element of validated event and once again passed the application along. We'll do the same with each function in the chain here, remove the call back and admit the appropriately named events. Okay, so how does this all work together? I don't wanna remove my callbacks completely. They're expected to note, and I want to be sure my a p I is compliant with that. How do I make my module use both events and a callback creative variable called Continue With and assign the callback that's passed into. I apply for membership method. This way I can use it later as needed. Then I get to do something very fun removing this horrible pyramid of pain. Okay, maybe a bit dramatic, but that's a lot of code that's not particularly easy to follow, and it makes me happy to slim this thing down in this place. I'll omit a simple event application received, and I'll pass out the new application. How clean is that? How does this all go together? That's next. You can listen to events on an event better by using the on method. So here I'll listen for application received and then passive reference to the validate inputs function it's important that you don't invoke the function here. If you do, it will be invoked when the event is wired up, not when the event actually happens. The event emitter will automatically pass whatever data is past when a given event is admitted. So our new application will be passed directly to Ballade inputs as an argument. And that's precisely what we want. Now we just need to listen out for each event and call the next function we want. There we have a nice process flow list. I like the way this reads, and I especially like the way my code is slimming down until we come to the very end. What we do here, let's create a new function called registration. Okay, as well as registration. Not okay. These will be the final end points of our process. Gene, one of the in Stan she ation of the registration result down to these functions and set the result up based on what's in the application object, which should be finalized at this point. Finally, if continue with isn't know, we have a call back, so I'll invoke it and send out the result. I'll do the same with the registration. Not okay. This is a really simple way to handle callbacks cleanly, if you're using events. Okay, here comes the fun part. Let's see if I did this, right? Nope. No, wait. This looks like it might not be that hard. Oh, my goodness. It works. And here's a note. I won't lie to you. I got a bit lucky here. I was expecting this to be a little messier, because working with events can be very tricky when it comes to tests and tracking down bugs. One problem. You run into building something using events, it's very difficult to do it incrementally. It's possible, but generally I end up writing specs first than writing all of my implementation to fit it. Then spend some extra time debugging things that frankly look very strange. I'll go through this process one more time with authentication, and I'm sure that lightning won't strike twice. You'll get to see me debug internal eventing, and it is not fun as where does it can be once you understand what's going on, do you bugging is rather straightforward. Also, if you're using an i d. Like web storm or visual studio, just hit the do ______ and walk through your code in this module, we took things a bit slowly and built out a registration module that dropped people into our Rethink Devi database. Along the way, we use simple, focused BBD to help us spec out our functionality. We looked at some common issues when working with note and finally, basic patterns and techniques for working with note modules, including using notes Event emitter. To avoid call back ____ in the next module will speed things up and do this all over again as we write our authentication system.

Building an Authentication Module at Full Speed
Again, in Real Time
[Autogenerated] in the last module. We took our time and discussed various patterns in pitfalls that arise when building and node module. And if you're unfamiliar with note or Java script, much of that could have passed you by. So let's do it all again, this time with the authentication module that will log our users in. Repetition is a great teacher. And hopefully, by watching the process through again, the patterns will become more familiar to you. Okay, let's do all of this again. But this time I'll let this play out real time so you can watch me go end to end and it really speed. I'll follow all the same patterns that I did with the registration module. See if you can spot places that I might screw up. And if you get stuck, rewind is needed. No, no. Yeah, yeah. Okay. Yeah.

Debugging Evented Code
[Autogenerated] Okay. Hopefully nothing surprised you there. Let's pick this up as I've run into a bit of a wall. Somehow I broke my registration module while working on my authentication module. That's strange. Let's rewind the tape of it here and start all over all comment out the entire authentication spec Sweet. Just to just to see if my registration specs will run. Yeah, as I expected. You know Boyden commenting in the break again, This is something that I hate to say is normal when events are involved with testing engines like Mocha. Somehow Mocha is getting confused about what's throwing win and where, So the result here is unreliable. So let's slowly step through this. If I comment out the before block in my valid Logan, describe block things work. I have a feeling that Moka doesn't like the way I'm handling callbacks here, so let's separate this a bit. Just a general rule of thumb. If you see something in Javascript that absolutely does not make sense, it's an asynchronous problem, and in this case that's what we're seeing. And that is indeed what our problem is. I'm one of the Devi Connection bits and the data cleaning bits into the outer before block. This feels a bit better anyway. Then I'll move the authenticate call. Pack down below. Here's another Ariel See when working with events and testing done called multiple times. This happens most often if you try to subscribe to events in your test suite. It's easy to forget to use a new instance for each block when subscribing to events. But that's not really what I'm doing here. Geez, nice one, Rob. There's an extra done call right there. Okay, Now we're getting somewhere, but wow, How's that for an error message? This isn't something. Note is reporting, and it's not from my code. It must be from a module I'm using. So let's go Splunk this Once again, I'll use console dot log output. The off result, which is the common object I'm using in my process. Jane here. There it is. Right. So we're okay there. Let's try in the next function in line. And there it is again works. Okay. And the find user, Um, I think I know what might be happening if you pass a note to the hashing routine. No, that's not it. Living on down to saving the user stats, huh? It's in here somewhere. Take a look at the updates. They look Okay, let's take a look at the off result. There's my user. And yeah, there's no I. D. This is the record that's coming out of the database, right? I am not setting the idea on the return to object whips. I want to let rethink d b create the i d for me. So I'll just check and see if an I. D is present in the arts. And if it is, I'll set it. Otherwise, no default here. Look at that. At this point, it should be a simple matter to fill out the rest of the tests. And yep, we are good.

Integrating Our Module into a Web App
Creating an API With Index.js
[Autogenerated] we're almost at the end of this course. This is the last module. All we have left to do is integrate what we've built into an express Web application and make sure it all works. We'll create an A P I for our membership module so that other applications can use it. We'll set up another express Web application and then installer membership module, as you've seen me do, using a file reference. Then we'll hook up Passport, an express middleware package that controls access and handles user authentication and authorization. After that, we are done. So far, I've been working on the core bits of the module without worrying too much about how it will be used. Let's fix that by layering on an A p I using an index dot G s page. One reason I like working with events is that consumers of your A p I can subscribe to events and do what they like, given that I need those events to ripple up through my a p I. So I need to make the FBI event driven as well. I have a handy template for that in Web Storm, which I'll use and all call my A P I surprise membership. The one difference here is that I'm going to allow calling code to pass in the name of the D B we need to connect to this will likely change. As I mentioned, I don't like passing strings directly, but for now this will work. So I'll leave it, require my registration in authentication modules and then create an authenticate method. And this is a tough choice. I just said that it's encouraged that you pass in a single object for your argument data, but this is a log in routine, and I think for many people it's common in someone expected. You have a signature just like this in just a minute. When I plug this module into a Web application, you'll see more of why I made my a P I. This way, I'll connect to the D. B and pass the live TV object to my authentication module and then admit the events as they come back. I was hoping to find a more elegant way to do this, but from what I can tell, this is the best way to ripple events up. Finally on call, authenticate and pass along to call back a quick note. You'll notice that I wired the events before I called authenticate. You have to do it this way or you won't be subscribe to those events when they go off. It might seem obvious now that I've explained it, but it's not very intuitive when you're writing the code at development time. Trust me, let's do the same thing for registration. And it's just occurred to me that I am not admitting anything when registration is successful solo fix that here as well. Finally, I'll need a way to look up a user based on a cookie token. So add that to the A P I to I did things a bit backwards here. I don't like that I don't have tests. So make those right now and there we go, just passing. Now let's see how we can actually use this thing

Plugging into a Web App
[Autogenerated] we're ready to work with our module in an external app, so I've changed the name of it to membership and up the version 20.0 point three. Whatever you make changes, you have to be sure you change this version. Otherwise, NPM will ignore it when users go to update it all, installing express Web app in the root of our project once again and change the name of the AFT to Froggy Web next all installer module by referencing it directly. Using a file system reference, you'll notice that it installed everything just fine. But I don't have a directory reference here. It's just the name of the module. This clearly will not work for us the way we want. If I was to use NPM update, this module would be overwritten by the module registered in the N. P. M. Registry, using the name membership, and there happens to be a marshal called membership up there. If you're working on a team and you don't want things like this to happen, be sure to use a get or get a reference here. I can update this manually by installing it again if I want to and that's what I'll do for this demo. Next, I'll need to have a bit of middleware that will sense when a user is logged in and control the session bits, etcetera. And for this, most know, developers use something like passport. I'll install that Using in P M passport is fascinating, and if you're done a developer, you can think of it like forms. Authentication forms off doesn't handle your persistence or the notion of a user. You just tell it to log someone in and out and whether to persist the session in Same Deal with passport. If you're a rails developer, this is where note in rails part ways. In terms of philosophy, devise in rails. Fashion does everything for you. It built itself on two rails, creating routes, views, controllers and so on. Passport, on the other hand, is a single piece to the puzzle. Our membership module is the other piece. The passport documentation is pretty good, but it can be a bit of work to figure out just what to do. So let's go through this step by step. I've just installed the passport module. Now I need to wired up to our application The first thing to do is to set passports strategy. You can have it authenticated. Using external service is like Facebook, Twitter, Google and so on. Using O author Open I D. You can use basic authentication, or you can use what they call a local strategy, which basically means you'll tell passport what to do for that. I need to create a local strategy, and the first function it wants from you is a way to Logar user in eventually returning an error or the user record. Well, you see, here is the passport template I pasted directly from their sight. Let's comment that out and in its place all use our new membership module. That was pretty simple again. This is the function that passport will use to log the user in. All we need to do is fire off the done call back. Notice also that this function accepts an email password and a call back. This is why I wanted to keep my a p. I call the way I did. Even though I've suggested that you pass objects instead of primitives, it keeps it in line with passport, which I think is important. Okay, we're almost there. Now I need to tell my application to actually use passport. The first step is to provide the cookie parcel with a secret key. Next, I'll initialized passport and pass the passport instance to express as middleware. Finally, I'll plug passports session handler into express. Okay, lets run things and see where we're at. I could do that with Express by calling node app dot Js in groups for cut to install the dependencies for express. As I mentioned before, when you clone, get have repositories or generate no taps, the note modules won't be there. You'll have to install the dependencies yourself using in P m installed Dash D. Now that that's done, let's run our app and no problems. Hey, let's fast forward a bit here, added some styling to the site using bootstrap and put our log in page right on the home page, just for simplicity. Now I just need to plug in a log in route or remove the user dot Js route. That doesn't make much sense, and I'll add an account just paged routes. You see handy tip. I picked up from Jeffrey _____ and Bach of peop code. When you work with routing as we're doing here, just past the entire app in the constructor. That way I can wire the routes in one place as I need. I'll require passport here and set up some redirects that I'll use with passport in just a second. Next, I'll create a post, wrote for accepting log in credentials, and I'll hand it off to passports authenticate method along with the redirect manifest. And that's it. If this looks weird to you, it does take some getting used to express works with middleware in a very elegant way. You can chain whatever functions you want into the route definition function, as long as the final argument is a callback that tells the response, what to do. All that express cares about is getting a call back at some point, and it will look for that is the last argument of the route registration. This plausible model is what makes express such a joint he use, but if you're not used to it, you know, it could be a bit confusing. The final thing to do is require our accounts route so that our new route is picked up in our ABS configuration. I'll be sure to invoke the module and pass in our APP. Object. Okay, let's try and log in and see what's what I can use. The credentials I've been testing with and an error. Believe it or not, this is promising. Passport doesn't know what to do to remember who the user is, and that's because we never told it what to d'oh. We do this by calling passport dot serialize user and passing in the function we want used. This function is called after authenticate. Whatever user record is returned from authenticate is past here. What we need to dio is Safe's information into the session so we know which user to pull out later, and I'll do that by serializing the user's authentication token. Next Allah just need to de serialize the user so passport can pull the user back out. This first argument passed in is the thing I asked passport to serialize, which in our case, is the authentication token. I'll use that to fetch the user out of the database and then pass the callback directly. Okay, let's try this out. Looking in, Yeah, no error, which is great. But how do we know for logged in. Let's head over to the index route and pass user information to the view. When you log in with passport, that D serialize user function will take the user record you provide. Ed will stick it on expresses request. Object for you to use anywhere. So here I can just send requests dot user down to the view. One thing I am not showing here, which is very important, is that if you want to protect a given route, you need to plug a global function into the route definition. You can do this by flexing, expresses Extensible middleware approach. Here's a typical function that I grabbed the passport get, huh? But repositories insure authenticated. You can plug this into your route definition function right after the route definition itself, and it will get called in line. If everything's okay, the next function will be called. If not, the user will be redirected. Okay, let's head over to our view. Page and output are user's email to see if he's there. And, yes, looks like we have the beginnings of a pretty neat system

Summary and Goodbye
[Autogenerated] developing no taps can be frustrating, exciting, exhausting and exhilarating. You can have all of those feelings within the same 20 minute coding period. If you work with note and find yourself feeling frustrated and exhausted, remember that you're likely working in a system that's alien to you as a developer. If, like me, you come from a procedural object doing in background making. The transition to note will take patience and effort. Also knowledge of various patterns, which is why you're watching this video. These are the patterns I've learned after working with note for the last year and 1/2 as I mentioned, I'm not a note expert, but I have been programming and working with the Web for a very long time and Lisa the patterns that I find most helpful and they keep me from getting overwhelmed and exhausted. I do hope you've enjoyed watching this production. I'm gonna keep working on this module and others, and if you have any feedback, I'd love to hear it. You can drop me a line of the email on screen or drop me a note on Twitter. Thanks again for watching See you soon
