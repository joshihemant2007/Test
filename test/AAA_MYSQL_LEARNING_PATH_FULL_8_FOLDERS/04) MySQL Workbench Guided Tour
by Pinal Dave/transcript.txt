A detailed exploration of MySQL Workbench, a unified visual tool for data modeling, SQL development, and comprehensive administration tools for MySQL. This course will guide you through maximizing the power of MySQL Workbench and getting productive quickly with MySQL.



Introduction
Introduction
Hi, this is Pinal Dave, and welcome to the MySQL Workbench Guided Tour. Ask your nontechnical friends, which is the first word that comes to their mind when they hear the words: Integrated Development Environment? If they need help, you can give them a hint: It helps you to do your daily job. I bet they will think something like this or something like this. Both are from Star Trek. I wish our present reality was this pleasant. However, if you are a MySQL administrator or MySQL developer, when you hear: Integrated Development Environment, you will think of Command Prompt. Honestly, the reality is not this bad as well. MySQL has a great integrated development environment or IDE MySQL Workbench. Though it does not look as fancy Star Trek screens, they are not as simple as command prompt as well. MySQL Workbench looks something like this or something like this. It is a visual design tool that integrates Server Administration, SQL Development, and Database Modeling. It is also available on Windows, Linux, and Mac OSX. This means your MySQL server can be installed on any platform, but you can manage that from your preferred operating system. In this course, we are going to learn different aspects of MySQL Workbench. Let us start with the information about where we can get MySQL Workbench and how to install it. You can download MySQL Workbench from the URL displayed on the top of the screen. MySQL Workbench installation is pretty straightforward. We will see how to install MySQL Workbench in our next module of MySQL Administration. Here is a very important note about this course. In this course, we are going to learn how to use MySQL Integrated Development environment, which is MySQL Workbench. If you want to learn more about MySQL itself, like indexes, joins, or basics of select statement, you may want to watch other courses, which are listed on this screen. All the four courses are available under the MySQL category or tag in the Pluralsight library. Now, let's start our journey to learn MySQL Workbench. MySQL Workbench is an interface to do a lot of administration and development work with MySQL.

MySQL Administration
Introduction
Hi, this is Pinal Dave, and welcome to the module of MySQL Administration with MySQL Workbench. In this module, we will cover differences between various MySQL Workbench Editions, Installation and Setup of MySQL Workbench, how to do the first Connection with MySQL Server, various Management Actions in MySQL Workbench Navigator, and finally, various Actions related to Instance in MySQL Navigator.

MySQL Workbench Editions
Before you download and install MySQL Workbench, let us understand what different versions are available. MySQL Workbench has three editions, Community, Standard, and Enterprise. Most of the features of MySQL are available in all the three editions. Standard Edition has all the features of the free Community Edition as well as Schema and Model Validation, along with Automated Documentation feature. Whereas Enterprise Edition has all the features of the Standard Edition along with Backup and Recovery, as well as an Auditing feature. Remember, here we are talking about MySQL Workbench, which is an interface of MySQL Server. If your MySQL Server does not support any feature, you will not be able to do tasks related to that feature in MySQL Workbench. Here is a link to download MySQL Workbench one more time. In this course we will be using the most commonly used MySQL Workbench Community Edition and explore its features. MySQL Workbench Community Edition is free in Open Source.

Demo: Installation and Setup
In this demonstration, we will learn how we can install MySQL Workbench Community Edition on Windows platform. I've already downloaded MySQL Workbench installer from the URL which we have seen in this module earlier. Double-click on setup file, and it will bring up MySQL Workbench Setup Wizard. Click Next and click Next. It will ask you, Destination Folder, where you want to install MySQL Workbench. You can either Change the location or just click Next. Here, either you can go for a complete install or select a custom install. The size of the MySQL Workbench is not too big. I will just go with complete install, click on Next, and now click on Install. MySQL Workbench installation is pretty quick if you have a decent capacity machine. And here is the final screen, it says, Wizard Completed. Setup has finished installing MySQL Workbench 6. 0. When we click on Finish, it will automatically launch MySQL Workbench as this checkbox is selected. Click on Finish, and it will open MySQL Workbench home screen. That's it; installation MySQL Workbench is a very easy and straightforward process.

Demo: Setup New Connection
This is the home screen of MySQL Workbench, and now we will learn how we can create a connection to MySQL Server from this screen. You can see over here it says: MySQL connections. There is a + sign over here. Click on it, and it will bring up Setup New Connection screen. Enter the Connection Name, for example, I will write Pluralsight and leave the Connection Method as Standard (TCP/IP). You can also change to Local Socket or Standard TCP/IP over SSH. However, for this example, it's okay to keep Standard (TCP/IP). Enter the name of the host over here. I have installed MySQL on the local box itself, hence I will leave 127. 0. 0. 1 as it is. The defer port of MySQL is 3306; hence I will keep it as it is. Over here, you can provide the Username. I will connect with the help of root. However, the best practice suggests you create a different user for different roles in your organization. Click on Store in Vault, and over here you can provide the password to your username. I entered my password, and now I click on OK. The password will be stored in the vault, and in the future, every single time when I come to MySQL Workbench, I will not have to enter that password. However, if your business requires that you enter a password every single time, do not provide any password and it will ask the user to enter a password every single time. Over here, you can provide the Default Schema. This is equivalent to the database in MySQL. If you provide your schema, when you connect to MySQL with the help of this connection, it will automatically default your connection to that database or schema. I will leave this empty; that means when I connect to MySQL at that time, the very first task I will have to do is to select the context of my schema or database. Click on Test Connection, and everything I provided was correct, my connection is successful. Click on OK, and now click on OK one more time. On this screen you can see there is now a new connection, Pluralsight. When you double-click it, it will open SQL Editor of MySQL Workbench. Our connection is successful, and now we can start working with MySQL. Click on the home screen again, and you are back with a list of all the connections. You can create multiple connections over here for your different installation of MySQL.

Demo: Advanced MySQL Connection
Now we will see how we can edit advanced configuration of the connection which we have just created. Move your mouse to the upper right corner of the connection. There is a small page-flip animation. Click over here. It will bring up an information screen for your connection. Click on Edit Connection, and here you are where you can edit advanced configuration for your connection. If you stored the password in the vault and you want to clear that, you can just click on Clear, and it will remove the password which was stored in the vault. Now, every single time you use this connection, you will have to enter the password. You can also provide the Default Schema after you have created your initial connection. If you're using an SSL connection, you can click on the tab SSL, and can provide information related to Certificate and Key file of your SSL. When you click on Advanced, it will give you advanced options you can configure with your MySQL connection. You can use a compression protocol or use ANSI quotes to quote identifiers. You can also enable Cleartext Authentication and work with old authentication protocol by enabling checkboxes over here. Now, let's go to the Remote Management tab. You can configure this MySQL Workbench to manage any of the servers that are on the remote system. In this connection, we have just connected to a local host, hence, we do not have to worry about remote management. Now, let's go to System Profile. This tab contains information about the server and MySQL configuration. MySQL Workbench will read the configuration file of your installation and will behave accordingly. For that, you will provide the location to your configuration file over here. However, we can use the same MySQL Workbench which is installed on Windows to manage MySQL Server installed on any other system as well. For that, you just have to go over here in the System Type dropdown and select the operating system where your MySQL Server is installed. When you change the system type, it will also change options related to that particular operating system. Now, let's close the Manager Server Connections screen by clicking on the button Close.

Demo: Duplicate MySQL Connections
Now, let's see a final item related to MySQL Connections. Let's assume that we have 10 different MySQL Servers. Each of them has very similar settings, but the IP address of each of the servers is different. For that, what we need are 10 different identical settings with different IP addresses as a connection string. We essentially need a duplicate of our original connection multiple times. Let's see how we can do that efficiently and easily. Move your mouse to the upper right corner of the connection and click once. Now, on the Edit Connection click one more time. It will bring you back to the Manage Server Connection. On this screen, select the connection that you want to duplicate and click on Duplicate at the bottom of the screen. It will duplicate the entire connection right below your original connection. Let's name this connection SQLAuthority. You can come over here and change the Hostname. For example, I will change the Hostname to localhost, and if I want to change any other connection I can do that over here as well. Now let's click on Close. You can see now we have two connections, Pluralsight and SQLAuthority; the IP address of both of them are different. In a particular example, I have written over here localhost, which is a synonym for 127. 0. 0. 1. In the real world, you can pretty much use any valid IP address over here. Now, let's click on SQLAuthority, and it will ask us the password one more time. If you know this, this carry forward every single property and setting from earlier connections except password and you enter it again every time you create a new connection. Let's enter the password over here and click on Save password in vault, so I do not have to enter it again and again when I use this connection. Click on OK, and now, it will open new connection SQLAuthority. Click on Close, and now you are back on the home screen. You can also swipe the position of Pluralsight and SQLAuthority over here. For that, once again go to Edit Connection, and over here change the order of MySQL Connection, click on SQLAuthority, and click on Move Up, and now click on Close. You can see the order of SQLAuthority and Pluralsight is now changed. Now that we have successfully created MySQL Connection, we will go and do other administration tasks related to MySQL Server on the next screen.

Demo: Impact of Settings on Query
Now, let's see a very quick demo of how different settings in MySQL Connection impacts how queries are executed. Go to the upper right corner of any of your connections, and click on Edit Connection. Over here we have two connections; one is SQLAuthority and the second is Pluralsight. Now, click on SQLAuthority and click on Advanced. Over here, we have the option of using ANSI quotes to quote identifiers. Check this option, and now click on Pluralsight. Under Pluralsight, keep the same option unchecked and click on Close. That means SQLAuthority and Pluralsight have different options related to quoted identifiers. Let's test this by executing the same query on both the connections, which uses quoted identifiers. You can see the SQLAuthority and Pluralsight two connections over here. Click on SQLAuthority and type SELECT "sometext" AS SelectedValue. Copy the same script and type that into the Pluralsight connection window, SELECT "sometext" AS SelectedValue. Now in the SQLAuthority, click on Execute. It will throw an error, 1054, Unknown column "sometext" in 'field list'. However, when you click on Pluralsight and execute the same query, it will return this value. Sometext and SelectedValue become areas of the column. This is because we have different settings related to quoted identifiers for both of these connections. Even though both of the connections are pointing to the same MySQL Server, a connection property which is different is returning different result sets. Now let's explore a few of the other administrative features in MySQL Workbench.

Demo: Navigator
Here we are back on the MySQL Workbench home screen. Click on SQLAuthority and click on Connect. It will open SQLAuthority connection. On the left side we have the Navigator bar. Under this particular bar, you can see we have MANAGEMENT and INSTANCE as two subsections. If due to any reason you are not able to see this Navigator bar, pay attention to your MySQL Workbench on the right top corner. You can see that there are three different options. The very left option, when you click on it, it will toggle the visibility of the Navigator bar. If you don't see the Navigator bar, just click on this leftmost option and it will make the Navigator bar visible. Now we'll explore MANAGEMENT and INSTANCE subsections.

Demo: Server Status
In the Navigator bar, under the MANAGEMENT subsection, click on Server Status. When you click on Server Status, it will bring up the Administration-Server Status screen. Let's resize this Navigator pan so we can see more of this new screen. On this screen we pretty much cannot change anything. This is more of an information screen. Here you can see the Server Status is running. It is indicated by a green Play sign. It also displays your CPU usage, as well as Connections to MySQL Server. The Traffic to your MySQL Server is also displayed over here in kilobytes/second. As I'm using InnoDB, it also displays InnoDB Reads per Second as well as InnoDB Writes per Second. Currently, I'm not running any query on my server. Otherwise, this screen also displays Queries per Second, and here is Key Efficiency. Key Efficiency is an indication of how much value you are getting from the index caches held within MySQL memory. A higher value of Key Efficiency indicates better performance of your MySQL Server. On the left side of this chart, we can see there is a lot of information related to your server. The host of the server, which is named Big; Port is 3306; and Version is 5. 6. 14 MySQL Community version. This particular version is compiled for Windows64; that means it is 64 bit. Also, all the configuration information related to the server is also listed right below this key information. MySQL Workbench also indicates various details related to the server directory. My Base Directory and Data Directory are both on a C: drive. For the same reason, it also displays Disk Space in Data Directory. Currently I have 10. 00 GB available out of my 119. 00 GB on my disk space. That means that if I have more than 10 GB of data, I will run out of the space in my data directory in my computer. On my production server, I store all my data on D: or E: drives, which are very large in size. Additionally, it also indicates the path for the Tmp Directory, Plugins Directory, and location of various logs. On further scrolling down, it also displays details related to replication, authentication, and SSL.

Demo: Client Connection
Now let's click on Client Connections under the Navigator bar MANAGEMENT subsection. On this particular screen, we can see all the connections from Client to MySQL Server. Connection 65 is executing a query, but all of the connections are just sleeping. On connection 65, 0 seconds before a query was executed. However, all of the connections are sleeping for this many seconds. And the last column, Info, also displays information related to your command. If you want to kill any connection, you can just select that connection and click on Kill Connection. Now that particular connection disappears from this list. Remember do not kill an active connection because that connection might be executing some important command. Kill any connection only when you are confident that connection is harmless. If you do not care about sleeping connections, then just click on Hide sleeping connections, and it will now only display active connections. Let's uncheck it, and once again you will see all the sleeping connections. You can also change the refresh rate of this screen. Currently it is set to manual refresh; hence it says do not refresh. To refresh the screen we have to click on Refresh. However, you can click on this dropdown and change the refresh rate. Let's keep the refresh rate as 5 seconds. In simple words, the Client Connections screen provides a lot of important information related to all the connections to your server.

Demo: Users and Previleges
Now, next is one of the most important concepts, Users and Privileges. Click over here, and it will list all of the user accounts which have permission to connect to your MySQL installation. Click over here to hide the left side Navigator. On our login screen, we can see the Login Name, Authentication Type, Limit Connectivity to Hosts Matching, and the Password. On Account Limits, you can specify different limits to this particular user account. For example, you can set Max. Queries to some number. This will limit the number of queries the account can execute within one hour. If you set this number to 40, this particular user from this host can only execute 40 queries within that one hour. Similarly, you can also limit them with number of updates with Max. Updates. If you specify a Max. Update of 10, this particular user from that host can only do 10 updates to the database. However, it can run multiple select statements if it has the necessary permissions. Similarly, the number of connections can be limited, as well as the number of Concurrent Connections. If you specify the Max. Connections to 10, that means this particular user from that host can only do 10 maximum connections in an hour. However, if you also specify Concurrent Connection to a value of 5, that means at one particular moment you cannot have more than five connections to MySQL Server. Under Administrative Roles, you can have different roles assigned to that user. When you assign Role as a DBA, it will grant all the permission to that particular user. If you take away DBA permission that means that now the user does not have any permission. MaintenanceAdmin grants rights to maintain your server. UserAdmin grants the users to create logins and reset passwords, whereas SecurityAdmin can manage logins as well as grant revoke server access. MonitorAdmin role has rights to monitor the server, whereas DBManager has full rights on all the databases. DBDesigner, which is also part of DBManager role, gives the rights to create and reverse engineer any database schema to the user. BackupAdmin role is also a sub-role of DBManager, and gives minimum right to take necessary backup for any database. ReplicationAdmin gives rights to setup and manage replication in MySQL Server. As we select different roles over here different privileges are given to the user. When you select or unselect any privileges they reflect on the role. For example, when I select GRANT OPTION, it will automatically enable SecurityAdmin role on the left side. Selecting DBA role gives all the privileges to the user. When we click on Schema Privileges, it further narrows what the user can do in MySQL Server. For example, you can select any user and click on Add Entry. Over here, currently 'root' has access to all the schemas. However, you can restrict that with the help of pattern or a particular schema. I just select schema sakila for this user, and click on OK. User root now only has access to sakila schema. We will just simply go over here and select various privileges for that particular user. Here, I have provided all the Object Rights, but have not provided any DDL Rights; that means it can SELECT, INSERT, UPDATE, or DELETE data, but cannot CREATE any object inside my server. If you want to give all the rights on sakila database to user root, we can just click on Select "ALL" and it will give all the rights on sakila database. That means user root now can do everything in sakila database, but cannot do anything outside sakila database. You can delete any entry in this schema privileges screen by selecting the entry and clicking on Delete. Now, in the next clip, we will see how we can add a new user.

Demo: Create New User
In the User and Privileges screen, click on Add Account. It will ring up details for a new account. Enter the username, and now create a password for the user. Here I'm providing a very simple password for my test user. You can use alphanumeric with special characters to make your password a strong password. And now I will click on Apply. When I click on Apply, this new user is now created into the system. If you want to revoke all the privileges of this user due to any reason, you can just select this user and click on Revoke All Privileges. This will immediately remove all of the privileges from this account from every object at all levels. Click on it, and it will bring up a confirmation screen where you just have to click on Revoke to make this user without any permissions. If you are a corporate administrator and are ready to create a new user, what you can do is just create a new user, give necessary permissions, and click on Apply. Right after that you can click on Expire Password; that means the password is expired and the user must change the password to use the account when they login. Now, let's see how we can remove any user from the system. Click the name of the user and click on Drop. When you click on Drop, it will give you a confirmation message, but it will check with you one more time that if you really want to drop this user permanently. If you intend to do that, just click on Drop, and the user will be removed from the system.

Demo: Status and System Variables
Next we will see Status and System Variables. Click on this link inside the Navigator bar, and you will see Status Variables and System Variables. MySQL has hundreds of Status and System Variables. Each of the variables contains important information about the server. For example, in Query cache, we can see the details related to Query cache on the right side. The very first column is the name of the variable, the second column is the name of the value, and the last column is the description of this variable. For example, this particular variable counts the number of query cache hits. If you want to see performance variables, you can just click on Performance or Performance schema. Over here, you can see various information related to various performance variables. For example, this particular variable discusses how many events are lost or not recorded. The search function over here is very powerful. If you want to search all the variables related to indexes, then just click over here and search for indexes, and it will bring them back over here. If you want to see variables related to errors, just search for errors and you will see every single variable that is related to errors. If you want to copy all the variables in a Notepad, you can just click on Copy Global Status and Variables to Clipboard. Once you copy it, you can paste them in Notepad or Excel, and can do your own analysis. These variables give you very important information. However, the interpretation of these variables is up to the expert who is using MySQL. In my products and systems, I always keep record of all the variables every day. If I see any abnormality in my system, I always go back to the record of my variables and see if there were any abnormal changes in any of the values of the variables. Quite often, I have figured out the root cause of the problem I am facing with the help of variables.

Demo: Data Export
Now we will see how we can export data with the help of MySQL Workbench. Click on Data Export in the Navigator MANAGEMENT subsection, and it will bring up this screen. On this screen, under Object Selection, we can select the object which we want to export. Here I'll select sakila database. And, when you click on schema sakila, it will bring up all the objects available in sakila database. You can select all the objects, or if you only want tables selected, you can select Tables. This will unselect all the views from the selection and will only select tables. If you want any specific table to be selected, you can unselect all the objects and select the table that you want to export. For this example, I will select all the tables. Now, you have two options to export. You can export all the data in this project, or you can select Export to Self-Contained File. We will be exporting our data in a self-contained file listed over here. There are additional options available as well. We can create a dump in a single transaction, where the entire script is in one transaction, and we can also script, store routines like Procedures and Functions. We can also dump events like when we select this checkbox, and if you only want schema, we can select this checkbox, which will skip table data and will only contain table schema. There are advanced options available here as well. Let's click on Advanced Options, and you can see there are so many different options available to script data. For example, here are options for Inserts, Others, and for SQL. If you want: complete insert statement, you can just select this checkbox and it will contain the entire INSERT statement in the script, which it will. If you want to compress server/client protocol, while you generate this dump file, you can select this option. It's quite possible that MySQL will generate an error when you are creating dump files. If you click this setting, it will continue generating dumps files even though there are errors. You can click on Restore Defaults, and this particular screen will revert to its original settings. Now, let's click on Return, and click on Start Export. On the screen, you can see MySQL will execute mysqldump. exe in the background, and will generate a dump file in the location which we have specified. In the next clip, we will learn how to import and restore data from the file which we have just generated.

Demo: Data Import/Restore
Now, we will see how we can import data with the help of MySQL Workbench. Click on Data Import/Restore in MySQL Workbench Navigator under the MANAGEMENT subsection. You will see this screen. Over here, there are two options. The first option is to Import from Dump Project Folder, and the second option is whether we can Import data from Self-Contained File. We will select this option because in an earlier clip we have exported data from a self-contained file. Let's put the path of the self-contained file over here and now click on Start Import. It will execute mysql. exe in the background, and import data from the file which we have specified. Now, go back to Import from this screen. Over here, there is one more option that we need to pay attention to. It says: Default Schema to be Imported To. In our case, our exported file itself had a schema of sakila database. If the exported file, which we are going to import over here, does not have mention of any database schema, we can specify the database schema whether we want to import data over here. These settings will be ignored if our file contains schema in it. Well, the import process is very simple. Now you can see how easy it is to import data in MySQL with the help of MySQL Workbench.

Demo: Startup/Shutdown
Now we will explore the INSTANCE subsection in the Navigator bar over here. First we will learn about Startup and Shutdown. Let's click over here, and you can see displayed the database server instance status. Currently, this MySQL Server is running. To stop MySQL Server, we can just click on Stop over here. First it will stop all the plugins, and right after that it will stop MySQL Server engine. To restart it, we just have to click on Start Server. Turning on and turning off MySQL Server is very easy. To clear the message, which we see in the Startup Message Log, you can click on Clear Message. Next we will see details about Server Logs.

Demo: Server Logs
Now, let us click on Server Logs under the Navigator bar in the INSTANCE subsection. You can see here there are three different tabs. First is Error Log File, where all the error messages are recorded. The first column is Timestamp, second is Thread ID, and the last one is Details of the errors which we have faced. You can also see the location of the log file over here, as well as the file size of the log right beside it. On the second tab, General Log File, we can see Timestamp if available on the first column, Thread ID in the second column, Command Type in the third column, and additional Details related to the command in the very last column. For example, thread 14 had executed a query, and in the Details column we can see which exact query was executed. Further scrolling down, we can also see what the log file contains, server connect time, as well as quit time. In the very last step, we can also see Slow Log Files. This particular log file records every query which is slower than specified query time in options. For example, in this log file, you will notice all the queries have over 10 seconds. This is because I have specified that slow log files should record every query which takes more than 10 seconds. The first column displays Start Time, and the second column User@Host. The third column displays Time it took execute, and the fifth column displays Rows Sent to the client. The very next column also displays how many rows were examined to produce the result. The last column, the Detail column, contains text of the query which is executing very slowly. A good DBA always keeps eyes on all the log files and sees if there is anything alarming. If your queries are running slowly or if you notice any errors, the DBA should work on that immediately. If you see any error warnings or queries that are running slowly, the DBA should proactively inform the developer and make sure that error does not happen next time.

Demo: Options File
Now we will see Options Files in the INSTANCE subsection of the Navigator. Click over here, and it will open settings for Options File. The Options tab enables you to view and edit my. ini or my. configuration file by selecting checkboxes on the screen. This tab also features a number of sub-tabs which provide access to various subsections within the configuration file. The sub-tabs are General, Logging, InnoDB, Networking, Advanced, Other, Security, Replication, MyISAM, and Performance. It is out of the scope of this course to understand each option available under this section. However, note that this subsection allows you to control pretty much every single configuration available for MySQL. For example, in the Performance tab, we have a section of Query cache. Here we can change the cache limit as well as set different sizes and types for the cache. Under the Optimizer, we can control the behavior of heuristics as well as we can define the depth of a search performed by the query optimizer to find the optimal query plan. Similarly, we have many different settings available for MySQL Server. If you want to be an expert with MySQL and understand the capability of the server, I strongly suggest that every day you read one sub-tab in this Options File. There is so much information available here which will equip you with very precious knowledge related to capabilities of MySQL Server. Once you change your necessary configurations, you can click on Apply to activate the options which you have selected. Well, with this, we have completed our learning of the MySQL Administration section of MySQL Workbench.

Summary in Sixty Seconds
Summary in Sixty Seconds. MySQL Workbench Administration area has two major subsections: Management, where we learn how to check Server Status, explore Client Connection, work with Users and Privileges, check Status and System Variables, Export Data out of MySQL Server, and later on, import it back from exported files. The second subsection is Instance, where we learned about how to Start and Stop MySQL Server, how to explore various Server Logs, and how to change various Options related to MySQL Server Instance. MySQL Server Workbench Administration area is one of the most used sections of MySQL Workbench.

MySQL Development
Introduction
Hi. This is Pinal Dave, and welcome to the module: MySQL Development with MySQL Workbench. SQL Editor is where developers spend pretty much all of their time. MySQL Workbench is not a simple editor where developer writes query and executes it. There are lots of features that make the developer's life easy, efficient, and error free. In this course we will see four major areas of SQL development in MySQL Workbench. They are: Main Menu, Toolbar, SQL Query Panels, and Sidebar. We will cover each of these topics in detail in this module.

Demo: Opening SQL Editor
MySQL Workbench provides an excellent facility for working directly with SQL code. A SQL developer spends plenty of time on SQL Editor. However, before working directly with the server, a connection must be created. We have learned how to create a connection in the previous module. Now, we have created two connections, SQLAuthority and Pluralsight. Double-click on SQLAuthority connection, and it will open SQL Editor. SQL query has four main parts. The first is the Main Menu. You can see the main menu over here. The second is the Toolbar, which is right over here. The third is the Query Panel, which is this area where we will write SQL queries. There are multiple panels also available to support the SQL Query Panel. You can access them by clicking on the upper right corner of MySQL Workbench. Click over here and it will bring up Navigator and Information sidebar. Click over here and it will bring up SQL Additions where you can see various Context Help as well as Snippets. Let's learn about Main Menu, Toolbar, SQL Query Panel, and Sidebar in this module.

Demo: Opening SQL Queries File
When the SQL Editor tab is selected, the most important item on the main menu bar is query. You can click over here and can see the various options that the SQL Query menu offers. First, we'll open a file which contains various MySQL queries. Bring your mouse over to this folder icon and click over here, and it will bring up a dialog box to open SQL queries. Click on your file, and it will bring up your queries in SQL Editor. Now that we have a few SQL queries on our screen, we will understand how the SQL query menu works with the help of examples.

Demo: Query Menu: Execute
First, we will change the context of the database to sakila database, as all of our queries are using tables from sakila database. Select this statement and click over here. This will execute the selected portion of the script. You can see in the Output window the context of the database is changed to sakila. You can also see that in the left Navigator bar, the sakila database is in bold font, whereas the other two databases, or the other two schemas, are in standard fonts. Now, select this statement and click on Query menu. There are four different options ready to execute. First is Execute. It says: Execute (All or Selection). In our case, I have selected only one query, hence, it will execute only one query when I click this statement. There is only result set that is from film table. However, if I click anywhere outside and select the same option, this time it will execute all the queries which I have on this tab of SQL Editor. In my case, I have two queries. The first is film and the second one is film with film_actor. Here film 2 is set. First is from the first query and the second one is from the second query. Well, our current result set isn't a great format. If you want your result in a text format that is also possible. Go to Query and select the second option, which says: Execute (All or Selection) to Text, and it will return you a result set in text format. Now, let's go back over, create a menu, and the third option is Execute Current Statement. Now click on that, and it will execute the statement in which our mouse is placed. In our scenario, our mouse is on line 4 right after the film table. When I selected that option that only executed this query. If I put the mouse on row #10 then we will query with joins, and that query menu option will only execute this query. Let's check that by clicking Execute Current Statement in the Query menu. And our result set now contains results from film and film_actor. The fourth option is very interesting. Currently, we have columns which are placed vertically and rows which are placed horizontally. But we can change them with just a single click. When we go to the Query menu and click on Execute Current Statement (Vertical Text Output), it will return us a result in the vertical text format. Well, there is only a single column, and our data is adjusted in vertical text. There are times and places where we need this kind of output.

Demo: Query Menu: Explain
Now that we have understood how to execute a query, we will understand the next important part of creating a menu, which is Explain. Select this statement and go to Query menu. Click on Explain Current Statement. Explain Current Statement will display the execution plan for this query. The execution plan tells us if our query is using any index or not. If our query is using any special kind of join, the execution plan also informs us about that. In our deselect statement we did not have any complexity. Hence, our select_type was SIMPLE and clearly has used primary key index. The length of primary key index was 2. This particular query has about 1, 000 rows. Now we will execute a little bit more complex query and see how our result set, which contains execution plan, changes. Select the statement, click on the Query menu, and click on Explain Current Statement. Now we have two rows, each row for each table used in this query. The first table is film and the second one is film_actor. They are represented over here as film and film_actor. The table film uses no index to return the data. However, table firm_actor uses an index which is idx_fk_film_id. When we scroll all the way to the right we can also see that there are 1, 000 rows retrieved from the first table, whereas, from the second table there are only 2 rows retrieved. The additional information which we can see in the Extra column says that it is Using temporary tables and filesort. Let's close our sidebar so we do not have to scroll every time to read the data in the execution plan. Now, we will understand the next feature related to Explain. Select the statement and click on Query menu- Visual Explain Current Statement. As soon as we click that, we will see the entire execution plan, which we have seen in text, converted to graphics. In this visual graphical execution plan, we can see that it is using film table there, primary key index is used. The length of the key is 2, and the column, which was part of this primary key index was film_id. There was use of order by in this query. We just sorted 1, 000 records returned from this table. If you want, you can save this visual graphical representation of execution plan as an image. Click on this and it will ask you the location where you want to save the execution plan in PNG format. Once you save it, you can transfer this file to other users. Now, let's select our second query, which is a little bit more complicated. Select the statement, go to the Query menu, and click on Visual Explain Current Statement. Let's turn off our output window for a moment so we get more real estate on the screen to see our visual graphical execution plan. This graphical execution plan is a little bit more complex, as we are using two different tables, we have a join, and we are also ordering the entire table on actor_id. Here it is. From film we are returning all of the data, hence, this particular table is sending 1, 000 rows to the next operator. There is a second table, which is film_actor, and it is sending 2 rows to the next operator. The join between these two tables is on film_id, and to return the film_actor it is using the key which is idx_fk_film_id. The next operator where both of these tables are sending data is nested_loop. Once both of these tables are joined with nested_loop operator, these will be sent to the next operator, which is order by. Order by using temporary_table, and with the help of filesort sorts the entire results and sends it to the client. Once you are comfortable reading graphical execution plans, you will always use the option of visual Explain Current Statement.

Demo: Query Menu: Stop Script Exectuion on Errors
Now, let's click on Query menu one more time and understand other options which are available there. The option which is not highlighted right now is Stop. This will be visible when you are executing any query. If you know any reason why your query is being executed and you want to stop that currently executing query, you can just click on Stop and the query will be immediately stopped. The next option is very interesting; Stop Script Execution on Errors. Currently, this is enabled. That means if any query has an error, your execution will immediately stop. Let's see that in a quick example. Instead of table film, let's make it table films. We know that sakila database does not have table films. Now if I go to Query and click on Execute All, it will not execute both of these queries, because we have selected the option of Stop Script Execution on Errors. If there is an error over here it will stop our execution right here. However, if I disable this particular option, and now click on Execute All, this will definitely continue executing, even though it has faced an error. The error was in this statement. My SQL displays this error in the output window, but continued past the error and executed the second script. It also displayed the result in the result set, and displayed its output in the Output window. Well, my preference is to enable this option, because I want to know if I face any errors when I'm executing my query. If this option is disabled, there are chances that even though there is an error in execution, you may overlook it if you're not paying attention to the Output window.

Demo: Query Menu: Limit Rows
Now, let us see a couple of other features from the Query menu. Click over here and move your mouse over Limit Rows. Currently, you will see Limit Rows says 1, 000. What that means is that when any query runs on MySQL Workbench, and it is retrieving a very large amount of rows, it's quite possible that MySQL Workbench will be nonresponsive until the entire query result is displayed on MySQL Workbench result set. In most of the cases, users are not aware of how many rows any query result set will return. And, by accident, if they execute a query which is returning a large result set, not only will MySQL Workbench be unresponsive, but it is an additional unwanted load on your MySQL Server as well. A huge amount of network graphic may slow down your important network packets traveling in your network. It's indeed a good idea that MySQL Workbench limits the number of rows displayed on the screen. But if for any reason, you want MySQL to return a large number of the rows, you can just come here and change your limit. You can go up to a 50, 000 limit. And, on top of that, if you believe you do not want your MySQL queries to be limited by MySQL Workbench, you can just click on Don't Limit. Now, MySQL query will return all the rows from the table. For example, let's select this statement and click on Execute. You can notice that now MySQL is returning us 5, 462 rows. This is because I have removed the limit from MySQL Workbench. Let's go back over here again, and now we'll set the limit to 100. When we execute this query again, this time it will only return us 100 rows.

Demo: Query Menu: Reconnect to Server
If you do not do any activity in your query editor for a long time, it's quite possible that after awhile it will automatically disconnect it from the server. At that time, you can go to the Query menu again and click on Reconnect to Server. It will reestablish your connection and you'll be able to continue your work. But, if you prefer to make a connection in a new tab, you can click on New Tab to Current Server. This will open an entirely new tab for your existing connection. There are times when you'll want to group your queries for different databases at different times. At that particular time, this feature is very handy.

Demo: Query Menu: Transactions
Let us understand how MySQL Workbench works with transactions. Click on Query, and you will notice that Auto-Commit Transaction is checked. That means when this is selected, each statement will be committed independently. In simple words, if I execute this statement, it will commit immediately. Let's see that in action. First, we'll select a row where the film_id is = 1 from film table. The title here is ACADEMY DINOSAUR. Now, we'll update that to a new title, BIG DINOSAUR. The result set confirms that one row is affected and there are no warnings. Now let's select the same row one more time, and the title in our result set is now changed to BIG DINOSAUR. That means when any of this statement executes they are auto-committing themselves immediately. Let's open the connection in a new tab, click on Query, and click on New Tab to Current Server. Remember, in MySQL Workbench, all query tabs in the same connection share the same transaction. That means if you have multiple connections in one single tab, they'll be using the same transaction. Now, let's execute the same SELECT statement in a new tab. When we execute that, we also get a result of BIG DINOSAUR. Now, once again, go back to this original tab and click on Query menu. Now we will turn off this Auto-Commit Transactions. Here, we will change this BIG DINOSAUR to SUPER BIG DINOSAUR. Now we will execute this query once again, and this time, it will display a warning. The warning says: It's an unsafe statement written to the binary log; in other words, it is telling us that what we have done is not committed. Let's verify that in a new tab. click over here and select this statement. You'll notice here that it's still BIG DINOSAUR. If what we have executed over here was committed, the value which we see in this tab should display SUPER BIG DINOSAUR instead of BIG DINOSAUR; that means our statement was not committed. Now, click on Query one more time, and click on Commit Transaction. But, most importantly, when you go to SQLAuthority's new tab and select here, the title is changed to SUPER BIG DINOSAUR. If for any reason we do not want to commit the transaction, we can easily rollback the transaction before committing it back clicking on Rollback Transaction.

Demo: Toolbar of Resultset
Now, let's understand a few of the features available with Result Set window. Select a statement and click on execute. You'll notice that the Result Set is now visible right below query. There are a few interesting features that are also available in Menu, which is right above Result Set. For example, here we have SUPER BIG DINOSAUR. Let's click over here, and it will make this particular field editable. Instead of SUPER BIG, we can now type SMALL DINOSAUR. Click somewhere else in the window, and you will notice Apply is now visible. Click on Apply, and it will bring up a prompt of Apply SQL Script to Database. You'll notice this is the SQL script which it has generated in the background, and when we click on Apply, it will execute that statement on your MySQL Server. Click on Finish, and now your data is updated. If you want, you can just click over here and insert a new row. If you want to delete any row, you can click on the row and click on Delete, and it will delete that row. Make sure you apply your changes right after you do any of this edit operation. If you do not want to keep your changes, you can just click on Cancel, and MySQL Workbench will not commit those changes to MySQL Server. If you want to export your result to an external file, you can click over here and export it. Similarly, you can import records from an external file as well. When you click over here, you will notice that you can export your result set in multiple different formats. The most interesting option over here is SQL Insert statements; that your result set will now be in the format of SQL Insert statements, you can take those statements and run against another SQL instance. In the past, I have used this feature to take data from MySQL and insert in SQL Server. Click on Cancel, now click on this Import option, and it will bring up to the screen where we can import external files. You can only import CSV files. Now click on Cancel. In our result set, the description field is quite long. If you want to see other columns in your result set without scrolling on the right you can just resize the description field. As we have resized the description field, we are no longer able to read the entire data from this column. We can just click on Wrap Cell Content, and it will start wrapping the data in the description field. What it has essentially done is increased the display size of your row. This is a very handy feature when you are dealing with large text fields. Currently, I am limited to retrieve only 100 rows in my query. You can check that by going to Query and Limit Rows. If for any reason you want to see rows that are right after 100, you can click on Fetch Rows; this will fetch the next frame of records from the data source. Here it is. When I click over here, it brought us the results from film_id 101. Now, let's click one more time, and it has skipped the next frame where film_id is 201. To go back, you just have to click on Fetch Row Previous icon. When you click over here, it will now bring back the previous frame. If you're an avid user of MySQL Workbench, I strongly suggest that you get familiar with the features available in your result set. They are very handy and can sometimes save a lot of your time. Here is the last feature: Result Set Filter. Here you can type anything and MySQL Workbench will search that particular string and result set, and MySQL Workbench will now return only those rows where this string exists. For example, let's search for the word, drama. MySQL has filtered all the rows where the string drama occurs. Let's change that to the word, escape, and you'll notice that the result set now only displays rows where escape string exists. If your data is continuously changing you can click on Refresh, and MySQL Workbench will once again fetch new data and filter that with your string.

Demo: Features of Resultset Panel
If you right-click on MySQL Workbench Result Set, there are a few interesting options available over here as well. For example, you can Open Value in Editor. Click over here, and now it will bring up the entire first value in Editor. Click on Binary, and you will be able to see the binary of the text which you had just seen. If you are working with spatial data, well you deal with maps and geographic locations, this image field is very helpful. Click on Close, and once again, right-click over here. If you want to set any field NULL, just click on Set Field(s) to NULL, and immediately a NULL value will be placed. If you want to Mark Field Value as a Function, you can click over here and now that will be changed to a function. Similarly, you'll be able to delete this entire row by clicking on Delete Rows. There are a few more things also you can do with a right-click. You can load any value from the file as well as Save Value to File. You can copy the row and paste it in your destination. If you notice, there are no column headers over here. If you want to copy column headers, once again go back to MySQL result set, right-click over here, and click Copy (with names). When you paste it you will now notice that there are column headers along with row values. Once again, right-click on the result set, and you will notice there are options where we can Copy Row with names, quoted identifiers, tabs, as well as you can Paste the row. If you want to change the case of your string, you can just click on any of these three options. Let's click on this field, and now click on lowercase Text. Immediately the text will be now changed to lowercase. Clicking on Capitalize Text, it will make it in title case, where the first letter is in capital case and remaining letters are in lowercase. Also, you can click on any field and can change the case to UPPERCASE by clicking over here.

Demo: Toolbar of SQL Query Tab
Now we will see the Toolbar of SQL query panel. Here it is. The first item is to open the file from your system, and the second is to save any changes you made in your current script. We have already seen this lightning bolt icon. When we click that it executes the script which we have selected. This is very similar to Execute off the Query menu, whereas Execute Current Statement is very similar to this icon. When we click it, it will execute the query where our keyboard cursor is. This icon represents Explain. When we select any statement and click on this icon, it will show the execution plan for that query. The next item is toggle, where the execution of SQL script should continue after failed statement or stop. The icon next to that is for toggling number of rows that are returned in the result set. If I disable this one, it will return all of the rows in my result set. When enabled, it will only return the rows which are selected, under Query menu Limit option. The next three icons are related to transactions. Here our autocommit transaction is on. Hence, I do not have to explicitly commit or rollback my transaction. If I disable autocommit transaction, the option to commit and rollback the transaction becomes enabled. So far, all the icons which we have seen in this toolbar are already available under the Query menu. The next icon is Beautify or reformatting the SQL script. You can select any SQL script and click on Beautify; it will automatically reformat the SQL script. The next one is toggle Find panel for the editor. You can enter any string over here and click on search. For example, I will search for select. When I click on search it will keep on finding select strings anywhere I have used in my SQL script. If you want to replace any string, you can use Find & Replace. The next one is to toggle invisible characters, like space, tabs, and newlines. These characters are visible when our toggle is displayed; they actually have no impact on what is sent. Let's click this to disable that. The next one is a very important icon. For example, if you have a very long string, you can just click on this and it will automatically wrap that line. Over here, the line 11 is too long to fit in the display. As I have enabled wrap text, it will automatically wrap that in multiple lines. When I toggle wrapping text again, it will again unwrap the text. As line number 11 is now not wrapped, you can see the horizontal bar in the display. The last four options which we are seeing over here are also part of the Edit menu. You can find, Find, Find & Replace, Format, and Beautify Query. Additionally, under Format we have three more options, UPPERCASE Keywords, lowercase Keywords, or Un/Comment or Comment Selection. For example, let's select this string, and now we'll go to Edit-Format and click on lowercase Keywords, and you will notice that every single keyword which was uppercase is now lowercase. Let's convert all the keywords to uppercase once again. Select the statement, click on Edit, go to Format, and click on UPCASE Keywords. Please note that object names are not affected by this format. Only keywords like SELECT, FROM, and INNER JOIN are affected by this formatting.

Demo: Contex Help
It is practically impossible for a developer to remember every single syntax available with MySQL. For the same reason, MySQL has a very flexible and easy to use Help system. The help is available on the right-hand side sidebar. Click on the upper right corner of the MySQL Workbench, and it will show a sidebar on the right. You will notice over here it says Context Help. Context Help is very intelligent to provide help to the developer; let's see how it works. First, we will select USE keyword, and it will automatically show the help related to the USE keyword. If we click on the SELECT keyword, the help on the right side changes its topic to SELECT. Similarly, if you click on INNER JOIN clause, the help on the right side is now displaying information related to join. Here is the final example. Upon selecting UPDATE keyword, the help is now switching to UPDATE. This feature can be very handy to a new developer when they are learning a language from the beginning.

Demo: Snippets
Now we will see another efficiency tool in SQL Additions sidebar in MySQL Workbench. Snippets are very handy to do repeated tasks. For example, here are a few built-in snippets. You can click on SELECT Syntax, double-click over here, and can see a popup containing the SELECT statement. Either you can use this SELECT statement as it is, or you can edit and modify it. If you want to insert a snippet in your SQL Query Editor, right-click on the snippet and click on Insert Snippet at Cursor. This particular SELECT statement is very big. Let's assume that we just want a simple SELECT statement like SELECT * FROM TableName. We can select this statement and click on Add the current editor content as a new snippet. Our new snippet is now added at the bottom of this list. Click on Edit Snippet, and every single time you write a SELECT statement you can just come over here, right-click on the snippet and click on Insert. It will immediately insert the text where your cursor is. You can change the name of the table, and you are just ready to execute your script. So, this SELECT statement was very easy. You can create your own complex snippet and save it. To delete a snippet, right-click on the snippet and click on Delete Snippet. If you modify any of the built-in snippets, and now you want to revert the changes, you can just right-click on that snippet and select Restore Original Snippet List, and all the changes which you have done will be lost, but you will restore the original list where you started from. Snippets are a great efficiency tool. I always advise developers not to underestimate the power of snippets when it is about efficiency.

Demo: Auto Complete
Before we end the learning of SQL Editor, let's see one of the finest features of SQL Editor, which is Auto complete. Auto complete increases the efficiency and accuracy for developers. Let's assume that I want to write a very SELECT statement, then I want to retrieve all the frames which have film_id greater than 100. Let's see how this auto complete feature helps me in that scenario. Let me start writing select statement, select * from sakila. Now I don't remember the name of the table, so I will put a. over here and hit CTRL+SPACE. CTRL+SPACE will enable auto complete and will display me all the tables available in the sakila database. I will select film table and hit Enter…film. And now I will know this table as f. On the next line I want to write where condition. I will type wh, and in one second hit CTRL+SPACE for auto complete. I will write where f. Now, once again I wonder what is the column for film_id? I will hit CTRL+SPACE for Auto complete, and it will show me all the columns available for film table. I will select column film_id and hit Enter. Now I will complete my query, and I can easily execute that. In a real world scenario, when we have hundreds of tables, and each table has tens of columns, it is not possible for any developer to remember all the tables and the columns. Auto complete is a very handy tool. With the help of CTRL+SPACE, the user can immediately pull off metadata for any object. Personally I find Auto complete very powerful. I use it all the time while I'm writing query in MySQL Workbench.

Summary in Sixty Seconds
Summary in Sixty Seconds. MySQL Serve Workbench Developer area has four major subsections: Main Menu, Toolbar, SQL Query Panels, and Sidebar. You can enable the auto complete feature with the help of CTRL+SPACE while you are writing queries. This improves accuracy and efficiency of the developer. Lots of developers get confused when they cannot retrieve over 1, 000 rows in MySQL Workbench. You can change limits from the Query menu-Limit Rows option.

Data Modeling
Introduction
Hi, this is Pinal Dave, and in this module we will understand Data Modeling with MySQL Workbench. Data Modeling is a process of creating a data model for an information system, in our case, MySQL, by applying formal data modeling techniques. The process of data modeling involves expert data modelers working with business stakeholders to build meaningful and efficient data models. The scope of this course is to explain to you how you can implement various data modeling concepts with the help of MySQL Workbench. In this module, we will understand how to create a Data Model, how to import any Existing Data Model into MySQL, and we will also understand how we can build, enhance, and create a relationship diagram with the help of MySQL workbench, frequently use Reverse and Forward Engineering features, we will explore how Schema Transfer Wizard works across different connections, how Template Models can expedite developers efforts to build data models. And finally, we will cover Various Tools and Utilities which makes the developer's life easy and bug free.

Demo: Create EER Model by Reverse Engineering
Now here we are in MySQL Workbench home page. On the lower left corner we can see Models. There are three icons right beside Models. The first one will create a new model, the second one will open existing models, and the third one, upon clicking, displays two options: The first is Create EER Model from Database, and the second is Create EER Model from Script. We will click on Create EER Model from Database. Upon clicking over here it brings up Reverse Engineering Database visual. First, we will provide Stored Connection SQLAuthority, the Method is Standard (TCP/IP), and Parameters are localhost, default port, root username, and password which we have saved in the vault. Click on Next, and it will connect to the database and fetch necessary information. Now, let's click Next one more time. Over here, it will bring up schemas which we can reverse engineer. Click on sakila, and now the Next button is enable; let's click one more time. Over here it will let us select an object which we want to reverse engineer. Currently, every object from the database is selected. If you want to further filter it out, you can click on Show Filter and can select only tables which we want to reverse engineer. However, to keep this demonstration simple, I will leave everything as it is, click on Back, and now once again click on Next. Without modifying anything over here, we'll click on Execute. On the screen we can see Reverse Engineering Progress. The Operation Completed Successfully. Now click one more time Next, and it will display a status summary. The status summary says it has reverse engineered 17 tables, 7 views, and 9 routines from schema sakila. Click Finish, and we are in the default MySQL Workbench, and we can see the EER diagram open in MySQL Workbench. Let us scroll around, and we can see it contains various tables. Let's select table film. As soon as we move our mouse over table film, it highlights a few columns. The columns which are highlighted are foreign key and primary key. The first column, film_id, which is highlighted, is primary key, and original_language_id are foreign keys to another table. If you want to see which table they belong to, you can mouse over the relationship and it will tell us that they are from table language and the column which is in the relationship is language_id. Let's click over here, and this will hide the right-hand panel. We will get more real estate now to see the entire diagram. You can also zoom in or zoom out the diagram from the setting on the left panel. Now we have pretty much managed to fit the entire diagram in one screen, however, we are not able to read anything as the fonts are too small. Let's click on this dropdown and restore the zoom level to 100%. Now, let's click on section Indexes of film table. When you click over here, it will list all the indexes belonging to this table. I'll put the mouse over PRIMARY, and film_id column is highlighted in this table. When I mouse over the next index, which is idx_title, it will check the column highlighted in the upper section of film table. Similarly, when I move my mouse on another index, it gives us a hint of what other different columns are part of that index. You can also expand Triggers. The yellow bubble which you see over here is View. You can drag that on the right side, and now you can clearly see what other different triggers exist on this table. Upon double-clicking the table, it will open up Table creation panel right below over here in EER diagram. There are a few additional properties of table that also exist in this panel. You can see the data type property in this screen, and you can create different indexes in the next step of create table. Each of these tabs helps you further define your table. Let's click on Close, and now we are once again back to our EER diagram section. When you click on MySQL Model, the same diagram is now represented differently. What we have seen earlier was an EER diagram, which stands for Enhanced Entity Relationship Diagram. What we are seeing right now over here is a data model for sakila database. Tables are listed on the top, and right below that Views and Routines are listed. You can further expand and can see Schema, SQL Scripts, and Model Notes. Now, click on Save, and it will bring up Save dialog. Give any name to the file, and keep the file type as MySQL Workbench Models. Click on Save. Now this data model is saved in your local disk. Go to the home page, and under the Models section, now the model is listed which we have just created.

Demo: EER Diagram
Now, we will see various details related to EER diagrams. In the previous clip, we have created sakila-EER diagram. You can see that in the Models section in MySQL Workbench. Double-click over here, or click Open and navigate to the folder where you created MySQL Workbench model file. Double-click and it will open two different tabs on the top; one is MySQL Model where you can see various information related to tables, views, and routines, along with Schema Privilege, SQL Script, and Model Notes. On the second tab of the EER diagram, you can see all the same information placed and organized as enhanced entity relationship model. When you mouse over any table name, it will bring up a yellow box with information related to that table. For example, film_category table has three columns; it has references to the other two tables, category and film. Also, in the yellow box, you can see on which column both the tables are related. Also, you can notice in the yellow box it displays the columns on which both the tables are related. The connecting line between them indicates a relationship. When you mouse over it will highlight the column which this relationship is using to connect tables. There is a cascading relationship on update, hence it also displays the same. Click on this relationship, and it will bring up the Relationship window. Hide the left and right panels to get a maximum view of this relationship window. Here is the name of the relationship, and here is Visibility Settings. You can hide the visibility of this relationship by clicking on the Hide radial option. Now, click on Foreign Key. Over here, there is various information related to Cardinality, Reference Table, as well as an option to Edit the table. As I mentioned earlier, the goal of this module is not to teach you how to build an EER model, the goal of this module is to show that MySQL Workbench has various capabilities to support advanced users to build an EER diagram. On the Edit Table screen, you can pretty much change any property related to the table. Here is the option for primary key, the property of the column being Not Null, the property related to Unique index, the property related to Binary column, and various others detailed. You can change the data type of the table by just one click. Here is other information related to this table as well, where we can change details related to indexes, foreign keys, triggers, partitions, options, inserts, and privileges. Click on Close and click on Close one more time. Now, you are back on the EER diagram. You can right-click on any table and can do various tasks. You can either cut this table, copy this table, or do any other modification task that is listed over here. By clicking on Delete actor, you can even delete this table from this EER diagram. In summary, a developer should always explore EER diagrams and understand various properties of the database before he or she starts working on it. Understanding relationships, data types, and various properties of the database will help the developer to do faster development with minimum mistakes.

Demo: Vertical Menu
Let us quickly look at EER Diagram vertical menu. The very first icon is a cursor, it helps us to select various objects. You can select table, relationship, or views, and can perform various activities. The second one is the icon of a hand. It can help you to move and traverse in your model very quickly; it also supports right-click. The third option is an eraser. First, click over here and click on any object. It will delete that object and all the relationships along with it. The next option is to place a new layer in the EER diagram, and right after that we'll place a new text object. If you want to insert any image, you can select this and insert an image. The one next to that will insert a new table in your EER diagram. Click on it and click on empty space in your diagram, and it will create your table. You can further change the property of the table by double-clicking over it. Click Close. Similarly, the next icon is to create View and store the Routines. The last four icons are to create various relationships between tables in the EER diagram.

Demo: MySQL Model and History
So far we have seen how we can modify EER diagrams. Now we will see an alternate method of modifying MySQL Model. Double-click on the model which we created earlier, and it will open two tabs; one is EER diagram and the second is MySQL Model. Click over here and now we will see the entire model in this new format. Here we have the EER diagram on the top, but right below it there is Physical Schemas. All of the tables are listed here, along with Views and Routines. Right below that we can see Schema Privileges. There are various roles that exist in this database schema, and you can see them over here. If you've got any script associated with it, you can see that here. If you've got any notes or descriptions related to the model, you can see that over here. To modify any table or view, you just have to double-click over it. It will open the Table panel right below it, which we have seen earlier. Remember, there are different tabs available in Table panel. Add or modify properties as per your business needs, and click on Close. In this view you can also see the history of all the changes we have done so far with this database model. For that, click on the bottom left corner of MySQL Model on the History tab. Currently, the history is empty, as we have not changed anything. But now, we will go to actor table and make one of the columns Not Null. As soon as I uncheck this box, you will notice that the same information is now visible in the History tab. Close it over here, and now go to any other table. Here add one more column, which is VARCHAR(45). That entry is also available now in the History tab. Click Close, and now you are back to your Model Overview screen. If you want to undo any of the actions which you have done in your model, you can click over here and it will undo that particular action. Let's try that by going to actor table one more time. The last column which we made, Not Null, is now once again allowing null, and in the second table of store, the additional column which we have added does not exist anymore. This is a very handy tool if you're doing multiple modifications to your SQL model. Now, click Close, to go back to the home screen.

Demo: Model Templates
Now we will understand how templates work in Database Models. Double-click on the model which you created earlier, and it will bring you to this screen. In the EER Diagram tab, on the right side there is Modeling Additions. If Modeling Addition is not visible, click over here on the upper right corner of MySQL Workbench. There are two icons over here; the left one says, Open the table template editor, and the right one is, Create a new table based on the selected table template. Click over here, and it will bring up Table Templates. In this area, we can create a template of tables with three different columns and store it. If certain table structures are needed frequently in our application, we can copy that from the table template very quickly. Let's see how that works. For that, first we'll create a simple table. Click on New Template, and it will make an entry of the first table template. Click over here, and rename this table template to Sample Table. Now, click here to add a column. Column ID, Datatype integer, and primary key. The second column, as column 1, with datatype Varchar(100), and let's make this a unique key. Now, click on Close, and it will display over here a simple table. Similarly, we can add multiple table templates over here. Now, if you want to use this table in your EER diagram, just click over here, select the table template, and create a new table based on the selected template, and it will immediately insert the table in the EER diagram. Once the table is in your EER diagram, you can add various relationships to it, as well as change the property of this table, which will not impact your original template. This is a very handy tool for developers who need to create a similar kind of table repeatedly.

Demo: Forward Engineering
Now we will see how we can do Forward Engineering. Well, we will take any model and will create a script to generate the database from it. Let's assume that this is our brand new EER diagram. We have just built this one, and now we want to deploy this to our development server. You can easily generate each object and their relationship with the help of MySQL Workbench. Go to the database and click on Forward Engineering. This will ask you to set parameters for connecting to the database. Here we will keep our connection as SQLAuthority, and click on Next. Here, you can set various options based on your business needs. Let's enable DROP Objects before Each CREATE Object option. Now, we'll click on Next. Over here it will ask us which particular object we want to Forward Engineer. We can use a filter, but in this example, we'll keep everything as it is and click on Next. On this screen, it will give us a script which it will execute on the server connection we provided earlier. It's always a good idea to review your script before you execute it. And now click on Next, and it will forward engineer the entire process. Before that, it will first connect to the database, execute the entire script which we have just seen, and read back changes made by the server. Right after that, it will save synchronization state, and will display success message. Click on Close, and now your forward engineering is successful.

Demo: Schema Transfer
Now, let us understand how we can transfer schema from one server to another server. Go to the EER diagram or MySQL Model, click on Database. Over here, go to Schema Transfer Wizard. Now, click on Start the Wizard. It will ask you two connections; one is source connection and another is destination connection. Let's pick source connection as SQLAuthority, and destination connection or target connection as Pluralsight. In my case, both are on the same server. However, in the real world, you will be connecting to a different server as a source and a target. Click on Test Connection, and the connection is successful. Click Next, and it will ask us which schema we want to transfer from one database to another database. I'll select test database. Now, click on Start Copy. It will give us a warning that the schema test will be dropped in the target MySQL Server and all the existing data will be lost. Do you want to continue…Yes or No. As we are here to transfer schema, we'll click on Yes. The wizard has finished performing the task to copy the database. Click Next, and you can see the message that one schema is transferred. The name of the schema is test. Click on Finish, and you are done. It's extremely easy to transfer schema or database with the help of MySQL Workbench.

Demo: Schema Compare
There are a few other features of MySQL Workbench, which are very powerful and useful to data administrators. Though they are out of the scope of this course, we will still understand what those features do. Click on Database Tool, and one of the options is Migration Wizard. When we click on it, it brings up MySQL Workbench migration wizard. With the help of this wizard, you can connect to any source database which supports ODBC connection and can migrate to MySQL. There are a lot of configurations and settings one has to tackle when you are migrating from an entirely different database application to MySQL Server. Let's go back to EER diagram and click on Database. This Compare Schema option will connect to two different servers and compare the schema between them. Before we see how Compare Schema works, let's go back to our EER diagram and change some information in our existing sakila database. We will just create an additional table, click over here, and now we have a new table in our sakila database schema. Let's click on Database and click on Compare Schema. This particular screen will now ask us source and destination database. For Source, we will select Model Schemata. In Destination, we will select Live Database Server, and later on we will select target database as sakila. Click on Next, and now it will ask us connection to the target database. Click on here and click on SQLAuthority. Click Next to continue. Now it has retrieved source and target schema names. Click Next, and it will display that in Source Schema it is sakila database, and in Target we have three different databases. Click on sakila in the Target Schema, and click on sakila in the Source Schema, and immediately you will notice the Next button. Click on here, and it has successfully retrieved target objects selected schemata. Click Next, and it displays the different between our schema and live server. The difference was Table sakila SimpleTable was dropped. That means our source does not have sakila. simpletable. If we switch the position of our target and source, the message would be Table 'sakila'. SampleTable was created.

Demo: Tools and Utilities
Now, let us quickly see what the different tools available for data modeling are. Click over here, and you will notice there is a Utilities section. The first option is Obfuscate Object Name in Catalog. When our table structure contains sensitive information, if you for any reason want to send the schema to somebody else who does not have company MBA, you can just use this utility. Click over here, and it will change the name of all the schemata and tables used in the model. Let's click on OK, and immediately you can see that the names of all of the tables are now changed. Now, let's click on Tools one more time, and click on Utilities. The next option will change the storage engine for all the tables. You can change your storage engine from INNODB to MyISM or from MyISM to anything else. Basically, this quick utility saves a lot of manual work of changing storage engine for each table one by one. Clicking on the Catalog, it will give us a few options where we can dump all the table columns or copy the table list to the clipboard. In the industry I have seen many organizations having strict naming conventions. If you want to prefix all of your tables with a specific string, you can just click over here and enter the prefix. Here I will enter dbl_. Now, let's click on OK, and immediately the names of all the tables in your model will be changed. Each table will contain dbl_string as a prefix. Now, let's click on Tools again and go to Objects. Over here you'll see five different options. Each of these options is easy to understand.

Summary in Sixty Seconds
Summary in Sixty Seconds. Data modeling is the process of creating a data model for a database system by applying data modeling techniques. We can build an Enhanced Entity Relationship, or EER diagram, from an existing database with Reverse Engineering technique of MySQL Workbench. We can create index on all key columns with the help of Utilities, available under Tools menu. MySQL Workbench can migrate any database supporting ODBC connection to MySQL with the help of Migration Wizard.

MySQL Workbench Preferences
Introduction
Hi, this is Pinal Dave, and in this module we will discuss MySQL Workbench Preferences. MySQL Workbench Preferences control how MySQL Workbench will behave with users as well as MySQL Server. There are many different settings available for MySQL Workbench. In this module, we will cover a few of the General settings related to MySQL Workbench. We will also explore settings related to Administration and SQL Editor. Later on, we will see preferences related to SQL Queries, Model of MySQL, and Diagram. Finally, we will explore how we can change the Appearance of MySQL Workbench and change the overall Theme of MySQL Workbench. Let's see how all of these preferences work with the help of demonstrations.

Demo: Workbench Preferences Screen
Though MySQL has three major areas of administration, development, and data modeling, the next key area to explore is Preferences. Preferences control how MySQL Workbench behaves with users and with MySQL Server. MySQL Workbench preferences changes how administration, development, or modeling sections work. To see various MySQL Workbench settings, click on Edit in the menu bar, and click on Preferences. It will bring up nine different tabs in this screen. We will understand a few of the important preferences from each of the tabs.

Demo: General Preferences
Here we are in the General tab of MySQL Workbench Preferences. Under EER Modeler section, the very first option is Automatically reopen previous model at start. Let's click on this, and now click OK. Currently, when we open MySQL Workbench, it brings us in its home page. Now, let's close MySQL Workbench. Let us reopen MySQL Workbench again. When we open MySQL Workbench, this time it will automatically open EER diagram of sakila database, which was the last MySQL model open in this MySQL Workbench. To turn off this feature, go to Edit, click on Preferences, and uncheck the very first option under EER model. Next time when we open MySQL Model, it will not reopen itself. Also, Model undo size is currently 10 under EER Modeler. We can change that to any other value. Currently, the Model undo history size is 10. If we change that to 20, MySQL Modeler will have undo history of 20 different saves. Currently, MySQL Models are auto-saved at every 1 minute. We can change that to 20 minutes or we can even change that to 10 seconds. If you want to manually save MySQL Model, you can disable the auto-save feature. Personally, I keep this setting as it is because I believe it's a good idea to save our MySQL Model at every minute. Under SQL Editor we have a feature called Save snapshot of open editors on close. When this is checked, the preferred behavior of this setting is on. What that means is when we reopen MySQL Connections, it will automatically open the query tab with the last query snapshot. This was the query which I had executed when I closed my Pluralsight tab. As that setting was enabled, when I opened the Pluralsight tab, it has automatically restored my query in the editor. Now, let's go back to Preferences. You can also change the auto-save option of your script as well. Currently, this is marked as disabled. If you want your script to be auto-saved, you can change it to any other value in the General tab of MySQL Workbench Preferences. Next, we will see how the Administrator tab works.

Demo: Administrator Preferences
Let's click on Administrator, and you can see that there are three options over here. Under this tab, we can set a path to mysqldump Tool. If you leave this one blank, MySQL will assume the full path for mysqldump. exe. Due to any reason, if you move mysqldump. exe to any other place, you can specify the path of that location over here. When we execute Data Export from MySQL Workbench, at that time, it uses mysqldump. exe from the location specified over here. Similarly, you can also specify the path for MySQL Tool, as well as Export Directory. Next, we will see the SQL Editor tab.

Demo: SQL Editor Preferences
Now, let's click on the SQL Editor tab. On this tab, there are various options related to SQL Editor. There are three major sections of SQL Editor preferences: General, Productivity, and SQL Parsing. Pay special attention to two of the values which we specified in seconds over here and over here. The first value represents database connection keep-alive interval. That means it will keep any connection alive for 600 seconds or 10 minutes, even though there is no activity in the connection. The second setting is database connection read time out; it is also set to 600 seconds. That means for 600 seconds or 10 minutes, MySQL Server will attempt to read data from the query. Due to any reason, if the query is not able to retrieve data for 10 minutes, it will automatically time out that query. Under the Productivity tab, there are two options which I always enable on my personal computer. The first is Automatically Start Code Completion, and the second is use UPPERCASE keyword on completion. Let's enable both of these options and click OK. Now, we will start writing code, and as we write the code it will be auto-completed and the keywords will be UPPERCASE. Let's see this in action. You will notice that I am typing keywords in lowercase but the suggestion provided from auto-complete is in UPPERCASE. SELECT * FROM film WHERE film. film_id = 10. Well, auto-complete improves performance and reduces error when typing MySQL queries in Query Editor.

Demo: SQL Queries Preferences
Next, we will see SQL Query tab in MySQL Workbench Preferences. Click over here, and now you can see various options related to SQL queries. The Max. query length to store in history is currently over 65, 000 bytes. You can change it to a higher number as well as a lower number. If queries beyond the specified size are executed, they will not be saved into the history. Also, you can enable to continue the SQL Script to run even though there is an error. If there is more than one query in your SQL Editor, when you execute all the queries together, if there is an error in any of the queries, it will prevent execution of queries from that point. Safe Updates is a very interesting feature. If you enable this, it forbids UPDATE or DELETE with no key in WHERE clause or no LIMIT clause. What it means is you cannot update or delete any record without a WHERE clause. Let's see that in action. However, for that, we need to reconnect to our instance. Click OK, and close the existing tabs. Now, let's reconnect again. Now let's write an UPDATE statement without a WHERE clause. Let's select the statement and click on Execute. It will throw an error that you are using Safe Update mode and you cannot execute this query. To execute this query, you have to write a WHERE condition. Now you have provided a WHERE condition to this query. Let's select this query and click on Execute. This time, UPDATE will be successful as we have a WHERE condition. Safe Update will prevent accidental updates or deletes happening to your entire table. If due to any reason you have enabled Safe Update but you need to update the entire table, you can write a WHERE condition creatively. Here it is. In our WHERE condition, we are comparing 1 with 1. This means this condition is always true. Now, let's select this statement and click on Execute. Well, we thought we could cheat MySQL Workbench. However, MySQL Workbench is smart enough to figure out that the condition which you have provided in your WHERE clause is always going to true; that means it is equal to no WHERE clause in this update statement. MySQL will prevent this kind of query as well. To update or delete the entire table, you will have turn off Safe Update. Click on Edit and go to Preferences. Now click on SQL Queries one more time. Here are a few options which are related to autocommit, Limit Rows, as well as Confirm Data Changes. Currently, any query in MySQL Workbench is retrieving 100 rows. You can change this setting from 100 to 150, or any other value and now MySQL Workbench will start retrieving the number of rows based on the value specified over here. Next we will see how Model Preferences work in MySQL Workbench.

Demo: Model Preferences
MySQL Workbench Model option is very straightforward. Under Model we provide various formats for our keys. For example, the name of our primary key is usually id followed by the name of the table. There are other additional options or varchars you can provide over here. You can see various substitutions into the popup menu when you mouse over this textbox. The data type of the preferred primary key is integer, and all other columns are VARCHAR. Remember, this is just a model; you can change the values on runtime when you clear your table or views. In the bottom section of Foreign Key/Relationship, we can also provide naming conventions for various keys. When we click on Model: MySQL, here there is an option related to MySQL Version. Currently, it is targeting MySQL Version 5. 5. However, if you want to generate your model, which is compatible with an earlier version, you can select this to MySQL Version 5. 0 Additionally, by default, all the new tables which we create in this MySQL Workbench default to Storage Engine InnoDB. But changing that setting is pretty easy. You can click the dropdown and again select any other storage subsystem. For the moment, we will not change the value and keep this value as InnoDB. Next, we will see preferences related to Diagram.

Demo: Diagram Preferences
When we click on Diagram, it also contains a few options related to EER Diagram. If you noticed earlier, when we mouse over any of the table, it will automatically highlight itself with different colors. This is because we have enabled the feature Propagate Object Color Changes to All Diagrams. The data type of columns was also visible in tables. If you want to hide that, we can unselect Show Column Types, and it will automatically hide data type in EER Diagram. If your table contains lots of columns, it will be difficult to fit that into one EER Diagram. To adjust the table in EER Diagram, we can limit the number of columns a table can display in EER Diagram. The default value of the number of columns to display in EER Diagram is 30. We can either increase or decrease it. Beyond the number which we specify over here, the table will be truncated. Similarly, a stored procedure or stored function with over 20 characters will be truncated in EER Diagram. We can increase that value by increasing the number over here. Now, next, we will learn about Appearance and Theming.

Demo: Appearance and Theme Preferences
Appearances and Themes. Under the Appearance tab, we have different Color Presets. On the left side we have colors available for tables and views which we see in EER models. On the right side we have colors for layers and notes. We can easily change the fonts which we use in Editor. Here is the face of the font and here is the size of the text. You can click over here and now change the size from 11 to any other value. This will change all the text and figures to font 15 of Tahoma. Click it again, and you can change it back to any other value. Similarly, you can change the font for various locations of MySQL Workbench. The locations are listed in this column. Now, let's click on the tab of Theming. Currently, we have selected Systems Default theme; we can change it to Windows 7 or Windows 8 theme. Let's see how MySQL Workbench looks in Windows 8 theme. Click OK, and now MySQL Workbench looks very different. To change the theme back, go to Edit, click on Preferences, and click on Theming again. Now, once again, you can select System Default as an option in your color scheme, and click OK.

Summary in Sixty Seconds
Summary in Sixty Seconds: It is important to keep the auto-save model and auto-save script interval to a lower value to avoid loss if Workbench unexpectedly quits. To improve efficiency, enable Auto Code Completion for SQL Editor. Experiment with different themes for your MySQL Workbench. SQL can be monotonous sometimes-add some colors to your coding.

MySQL Workbench Shortcuts
Introduction
Hi, this is Pinal Dave, and in this module we will discuss MySQL Workbench Shortcuts. There are two different kinds of shortcuts for MySQL Workbench. The first is Link Shortcuts, and the second is Keyboard Shortcuts. Let's understand about each of them in detail.

Demo: MySQL Workbench Shortcuts
When you open MySQL Workbench home screen, on the right side you will see various shortcuts. These are very essential shortcuts for any MySQL user. The very first shortcut links to mysqlDlocument Library. Over here, you can find complete MySQL Workbench reference manuals. You can search for phrases or keywords and find relevant information. The second shortcut will bring up MySQL Utilities. You can see the list of commands by typing help in the command prompt. The third shortcut will bring up MySQL Migration Wizard. This wizard assists to you migrate tables and data from a supported database system to MySQL. The fourth shortcut will bring up MySQL Bug Reporter. On this page, you can report any bug related to MySQL. The fifth shortcut is to Workbench Blogs. There is plenty of information about MySQL Workbench. Over here you will find details about bugs, utilities, various tricks and tips. The sixth shortcut is about Planet MySQL. On this webpage, once again you can find a lot of different information related to MySQL. On the right side of this blog, you can also find the Top 20 Most Active Authors; they are prominent experts in the world of MySQL. The seventh shortcut is to Workbench Forums. Over here, you can engage with fellow users of MySQL Workbench. You can discuss various issues related to MySQL Workbench. For example, if you're a new user, you can discuss about Source, Bills, Installer, or just Quality Assurance. As you start learning more about MySQL Workbench, you can talk about various tools, connections, and a lot of other things. If you have any problems, MySQL Forum is the best place to search for answers. The last link is to Scripting Shell. It brings up Workbench Scripting Shell, and over here you can do your shell programming. In simple words, these are very essential shortcuts for any MySQL Workbench developer.

Keyboard Shortcuts
MySQL Workbench is an efficiency tool for a MySQL developer and administrator. It is usual practice for developers and DBAs to work mostly with the keyboard. Personally, when I'm working, I like to keep my fingers on the keyboard. I do not like to switch between the keyboard and mouse to do my various tasks. DBAs and developers in the real world have similar habits. MySQL Workbench increases the efficiency for developers and DBAs. There are a few essential tasks that you also can do with just keyboard shortcuts. For example, for a new model, you just have to type Modifier+N; that means Command on Mac OSX control for Windows and other platforms. You can type Ctrl+N, and it will create a new model. If you want to undo any of the tasks which you have recently done, you can just type in CTRLZ. For search and replace, the shortcut is CTRL+Shift+F. From MySQL Workbench official site, I have built this Excel worksheet which contains all the shortcuts available for MySQL Workbench. You can get this MySQL Workbench from a downloaded file in your Pluralsight course, or from the URL bit. ly/mysql-shortcuts. It is nearly impossible to remember all the shortcuts for MySQL Workbench. I suggest you download this MySQL Workbench shortcut Excel and keep it with you all the time.

Final Note
Finally, thank you very, very much for watching this course. I really appreciate your time. I hope you have learned a few tricks which can improve your efficiency with MySQL. If you have any questions or concerns, you can reach out to me on Twitter or Facebook.
