Data is very important to any application and business. It is very important that every business plan for data safety. Database backup strategies are often discussed after the disaster has already happened. In this introductory course we will explore a few of the basic backup strategies every business should implement for data safely. We will explore how we can recover our server quickly after any unfriendly incident to our MySQL database.

Introduction
Introduction
Hi this is Pinal Dave and welcome to my MySQL Backup and Recovery Fundamentals course. Database concepts are considered as dry subject. I promise to make backup and recovery subject as interesting as possible. We all want to be happy and wish there are no problems in our life. We want to see lush green plains, soothing blue seashore, kids growing with nature, and a digital life where there are no disasters. In other words, we want perfect world. In reality the world is not perfect. Disaster happens and things can go wrong many ways, sometimes they are intentional and often they are not intentional. However, the reasons are always not pleasant. With reference to the database I often see developers forgetting something like this. They accidentally drop table and do not have any backup. They want to audit database which existed quite a while ago, sometimes they have a backup and they do not know how to restore it, and sometimes they are just disaster when something bad happens and they do not have data or database backup. Well excellent, disaster and human errors are going to be there always. In addition to that, there are some valid business cases when none of the above has happened, but we need to recover or restore our database in its previous original state. In this course we are precisely going to learn how to take efficient backup and recover your database by restoring it to its original state.

Course Outline
This course is based on MySQL Community Version, which is commonly known as MySQL Standard Version as well. This version is widely deployed across MySQL ecosystem and it's also available for free. In this course we will learn together how to take backup with mysqldump command and right after that we will understand how to restore database with MySQL command. We will also understand how we can use MySQL Workbench to export and import data. And finally, we will also learn how to point in time recover our MySQL database. This is very important concept and to master it we need to first learn how to take backup with mysqldump command and how to restore backup with MySQL command. And finally we will cover few of the best practices. Here are things which we are not going to cover in this course. We will not discuss concepts related to MySQL Enterprise editions. We will also not focus on storage subsystem specific recovery options and advanced concept related to replication and corruption we will also not cover in this course. Each of the topics listed over here warrants its own course. Reference course, if you are here to learn MySQL, I strongly suggest you follow the learning part, which is displayed on the screen. Pluralsight library has MySQL fundamentals courses. If you are new to MySQL, I suggest you watch MySQL fundamentals part 1 and part 2 in Pluralsight library. MySQL workbench is _____ tool for MySQL. To master MySQL workbench you can watch MySQL workbench guided tour course. If you are into performance ______ here are two courses, MySQL indexing for performance and MySQL query optimization and performance tuning. If you're an expert with MySQL, I still suggest you watch these courses as I'm very confident they will teach you one or two things in every module. While you are watching this course if you have any questions or concerns you can discuss with me in Pluralsight forum as well as you can reach out to my on Twitter and Facebook. Now, let's start our journey to learn MySQL backup and recovery fundamentals.

Backup With mysqldump
Introduction
Hi this is Pinal Dave and welcome to the module of Backup with mysqldump. Let us see what we are going to cover in this module. First we will understand the basics of mysquldump. Right after that we will set up the scenario which we will use to explain various concepts of the mysqldump in this module. Later in this module we will understand how to take backup of single database, multiple databases, as well as all databases. There are quite a few instances when _____ has to take backup of a single table. We will cover that specific scenario in this module as well. Before we complete this demo we will also talk about how to backup various objects like stored procedures, triggers, and events with the help of mysqldump. It is extremely important to understand how mysqldump works for anybody who loves their data.

Notes on mysqldump
Introduction to mysqldump. Mysqldump is a client utility that performs a logical backup. A logical backup is kind of backup which contains create and insert statements such as it can recreate the data. Mysqldump precisely does the same task. It generates SQL statements that can be run to reproduce original schema objects and data. Besides SQL statement mysqldump command can also generate CSV, delimited text, or XML format. Matter of fact you can take any of these formats and can import data in any database application such as SQL server, _____, or any other database application which accepts input in these formats. Remember for large scale backup and restore it's always advisable to use physical backup copy of data file. You can take the original data file and save it at safe storage location. Later when you want to restore it you can move the file back to data file location of MySQL.

Scenario Setup
Now, let me introduce you to scenario setup. With the help of the scenario we will understand various cases where mysqldump can be useful. Let's assume the name of the company is SQL Authority. Company's headquarter in United States of America. The primary business of the company is movie rentals. Company has two offices, first one in United States of America and second one in India. Due to different laws of USA and India company runs both the businesses independent of each other. However, the technology department collaborates with each other very closely. Rahul is in charge of database of India and Mike is in charge of database in the USA. As the company is headquartered in the United States of America Mike has additional responsibility of safeguarding database across United States as well as India. Mike frequently takes help of Rahul to maintain database in India. So here is the scenario so far. We will be using simple database sakila, test and world in this demonstration. Sakila is a database of movie rental. It is easily available to download from MySQL website. Test and world are also simple database freely available on MySQL website. Remember in our scenario India and United States run different business units, however, the technical team collaborates on various front. Now, let's see our very first business need and scenario.

Scenario 1: Backup Single Database
Let us see very first scenario, India and US runs a separate business unit and maintains their own databases. Every month end India and US have to take the inventory of all the movie rentals and pay the royalty to film studios in the USA. This means Mike requests Rahul to take backup of sakila database containing film rentals activities and send it from India to USA. Rahul will have to take backup of single database sakila and later on will send it to Mike. Mike will collect all the necessary royalties in United States and will forward that to finance department. Let's see with the help of demonstration how we can take backup of single database sakila.

Demo 1: Backup Single Database
Now we will see demonstration where we will take backup of a single database from our India office. India office has three databases, sakila, test, and world. We will be taking backup of sakila database. Let's open command prompt. On command prompt change the context of your current directory to the folder where your mysqldump. exe file is located. Type CD in the folder mysqldump. exe. Now, we will enter command to take backup sakila database. As this is our very first demo, we will type everything together. Type mysqldump -h for name of the host, -u for username, -p for password. Right after that we will not enter our password. Password will be asked when we hit enter key after we complete the entire syntax. Next, we will write the name of the database, which we want to take backup. We will enter sakila. Now we will enter the location of the file where we want to dump our sakila database. On my machine I will create dump file in C backup folder. I will name my dump file as sakilabackup. sql. Now before I hit enter over here, let's go and open c. backup folder and bring it on the screen. Here it is. I have opened C backup folder on the background of command prompt. This folder is empty. Now, let's click enter over here on command prompt, it will bring up enter password, however, in the folder you can see sakilabackup. sql file is already created. The size of the file is 0 KB. This is because I have yet to enter the password. Please keep watch on the size of the file when I enter password. Now, as soon as I hit enter you will notice that size of the file is now 3291 KB. This indicates that sakilabackup. sql file contains dump of sakila database. We can check that by opening this file. Go to MySQL workbench, click on Open, then we get to C backup folder and double click sakilabackup. sql. On the top of the file there is a command MySQL dump, version name, as well as few other information. This entire file contains all the details related to sakila database. You can take this file and execute this on any other MySQL server and it will create sakila database schema, data, and all the objects. You can also restore this file, however, we will see that in the next module. Well that's it. It's that easy to take backup of single data. In our scenario Rahul will now send this particular file to Mike in United States.

Scenario 2: Backup Multiple Databases
Let's see another scenario. As mentioned earlier, India and US run separate business units. Every month end India and US have to take the inventory of all the movies rented and pay the royalty to film studio in the USA. For this Rahul has to send sakila database to Mike. We learned how to do that in the previous clip, however, there is one more thing over here. Team India is also developing a new application which is based on the world data. As database development has significantly progressed it is important to send the new database to Team USA for collaboration. Mike will help to evaluate what are the changes Team India are doing in the world database and start working with other project managers on various aspects of the database. For this reason, now Mike has to request Rahul to take backup of sakila database, which is database of movie rentals, world database containing new development of India Team. Rahul will send both the databases from India to the USA. Let's see how we can take backup of multiple databases in the next demonstration.

Demo 2: Backup Multiple Databases
Now, let us see how we can take backup of multiple databases. I already changed the context of directory to the folder where mysqldump. exe is located. Now we will enter command mysqldump, host name, username, -p for password, and two hyphens or minus sign followed by keyword database and here is new learning. Now right after keyword database we will enter name of the database of which we want to take backup. We want to take backup of sakila database and world database. Let's enter sakila followed by world. Now we will write back to output file where we will store dump of sakila and world database. Click enter and it will ask for password. Enter valid password and click enter. It will create file to TwoDBbackup. sql in your backup folder. You can open this file in MySQL Workbench and validate that it contains database sakila as well as database world. If you take backup of more than two databases, you can specify more than two databases right after hyphen hyphen database keyword. If you forget to specify, keyword hyphen hyphen database MySQL will treat the first name as database and all the subsequent names as table. Hence, it's very crucial to specify this hyphen hyphen database keyword if you want to take backup of multiple databases.

Scenario 3: Backup All Databases
Now let's see another scenario. India and US both are running their own business unit, hence their database is also independent and contains different information as daily operations take place. Every month end India Team has to send their database to USA so Team USA can calculate royalty and pay to studio. However, for audit purpose it is important to take backup of all the database on India and USA server and keep at a central location in the USA. As the headquarters is in the USA there are additional ______ and standard Team USA has to follow. Now, in this situation Mike will have to request Rahul to send not only sakila and world database, but every other database which exists on database to USA. Team USA will follow all the privacy rules and keep the database safe for the audit purpose. Let's see how we can take backup of all the databases on the server in the next demonstration.

Demo 3: Backup All Databases
Let us see how we can take backup of all the databases on the server. I have already changed the context of current directory to the folder where mysqldump. exe is located. Now I will enter mysqldump command host followed by username, prompt for password, and now I will enter keyword which will take backup of all the databases, --all-database. As this keyword will take backup of all the databases we do not have to specifically mention name of the databases after this. We just specify the location of the file where we want to dump schema and data of all the databases. Click enter and it will ask for the password. Enter valid password and it will create a dump file containing all the databases on your server. On my server there are three databases, sakila, test, and world. You can open this file in MySQL Workbench and examine the content of this file. This will contain backup of all the databases on the host 127. 0. 0. 1.

Scenario 4: Backup Single Table
Let us see another business scenario. As you know India and US run separate business units. Now there are times where there is a holiday in India and it's not holiday in USA. On holidays rental movies are charged more. Because of this kind of logic its important that royalty is calculated everyday in USA as well as in India. However, for our business, the headquarter is in the United States. Hence, India Team will have to send all the rental activity every single day to USA so Team USA can calculate royalty and store it on their end. For this reason Mike has to request Rahul to take backup of a single table which contains rental activities and send it to USA everyday. Even though for audit purpose they are taking backup of every single database every month, it is equally important to send a single table backup to United States everyday. Let's see how we can take backup of a single table from database.

Demo 4: Backup Single Table
Now we will see how we can take backup of a single table from database. In command prompt I have already changed context of my current directory of the folder where mysqldump. exe is located. In our business requirement, we have to take backup of the database where all the rental activities are stored. Let's go to MySQL Workbench and explore database sakila. Table rental is the table which contains all the rental activity of _____. We will be taking backup of this table. Let's go back to command prompt again. Now we'll type command to take backup of this rental table from sakila database. Mysqldump, host name, username, prompt for password, database sakila. Now we will enter the name of the table, --tables and name of the table. --table will indicate all the names after this particular keyword, will be table. We are to take backup of single table, hence we have put here table. However, if you want to take backup of multiple tables we can specify other names for the table right after rental. Now we'll give the name of output file. Click enter and now insert valid password. It will create a file in backup folder. Let's see the content of this backup file. Go to MySQL Workbench. Click open and double click on this file. This file contains table rental from database sakila. When you scroll down you can see there is a schema to create the table and right following that there are insert values. Here are a few of the additional options for the table. Well, it's very easy to take backup of single table in MySQL with the help of mysqldump.

Scenario 5: Backup All Databases
We can discuss many different scenarios with related to mysqldump and the real world. Let's see one more scenario. As you know so far that India and US has a separate business and their royalty model is different for movies. The business logic is usually stored into stored routines like stored procedures or functions. As the logic in India differs from USA, Team USA would like to keep the copy of the logic as a backup. For that, Mike will request Rahul to take backup of all the database objects liked stored procedures, triggers, and events and send it to him in USA. Well, there is one more thing which I would like to say over here, that Mike only wants logic where royalty calculation is stored. He doesn't want any schema or table data at this point of time. This particular request makes this demonstrate a little bit more tricky. Let's go and see how we can take backup of all the routines from database, but do not take any schema of table as well as data.

Demo 5: Backup of Stored Procedure, Triggers, and Events
Let's start with command prompt with the current directly where mysqldump. exe is located. First we will type in mysqldump, host name, username, prompt for the password, database sakila, and now we want all the routines. We will type in --routines. This will take backup of all the routines of this database. Now we have to do another task. We need to make sure that we do not have any create statements for database, tables, or data. For that, there are a few options which we have to specify. Here are all the options. No create info will not create any table definition. No data will not create any table content. No create db will not create database statements, whereas this last option skip opt will turn off option set by any other options. Now we will type location for output file. Click enter and it will ask us to enter password. Once you enter password click enter and it will create a file which only contains routine from database. Go to MySQL Workbench, click Open, and double click on the file which we have just created. This particular file will only contain routines from secular database. Scroll down and you will see create statement. This is creating trigger, upd and _____. Further scrolling down begins another create statement for trigger. Let's scroll down a little more. Over here, we can see create statement for function. Similarly when we scroll down, a little more down, we can see create for procedure. Well, all the routines are created in this file, however, there is no create statement for table or database. Additionally, there are no insert statement which inserts data into table. If you are familiar with various options related to mysqldump, you can cleverly complete many of your tasks.

Various Backup Options
Mysqldump has various options. There are many different options available for mysqldump. You can also create a separate option file and MySQL can read it when connecting to database. This is an advanced feature, hence we are not covering that in this introduction course. It is very important for MySQL administrator to understand and read all the available options for mysqldump. You can read all the mysqldump options over here. When you go to the said URL you can see various MySQL options. Each of the MySQL option you can specify in command prompt. The first column talks about the format for command prompt and second column discusses about what option you should provide if you are going to use option file. The third column contains description. When you scroll down you can see there are various options related to create statement, debugging, fields, inserts, log, as well as many of the settings. I strongly encourage all of you to read these options and get yourself familiar with what are the different options available for mysqldump. It is nearly impossible to cover every single option and most of the options are self explanatory. If you want additional information about any of the options you can just click over here and it will bring you to the _____section where you can read additional details about that option.

Summary
Summary in 60 seconds. Well, so far we have seen various scenarios where user has to take backup of database, tables, or database object and send it to another user for further processing. Mysqldump is very powerful and easy to use too. It is a client utility that performs a logical backup. User can take backup of database, tables, schema, stored routine, and various other objects with the help of mysqldump. Here is very important URL for additional backup option related to mysqldump.

Restore With mysql
Introduction
Hi this is Pinal Dave and welcome to the module of Restore with mysql command. In earlier module we learned how to take backup with the help of mysqldump command and now in this module we will restore the same backup with the help of mysql command. Let's see what we are going to cover in this module. First we will have introduction to the syntax, right after that we will understand scenario setup for the demonstration. Scenario of this module is very similar to previous model scenario. We will help company set up in two different countries. Right after that, we will see demonstration where we will restore a single database and before the module ends we will see a demonstration of restoring multiple databases. Finally, we will have summary in 60 seconds.

Notes on Restore
Let us start with two important statements. A success restore is equally valuable as a successful backup. And second, a disaster recovery strategy is never complete without a test of database restore. Well, I have been working with database for over 10 years and I pretty have seen every single scenario possible with database backup and recovery. Most of the organizations have a proper backup strategy, however, the real trouble begins when they try to restore the backup which they have taken earlier. I often see the restore process failing at a critical time as no one has tested the entire life cycle of the backup and restore process. I strongly recommend everyone to test their backup by restoring it on the development or test server. Remember, always test your backup by restoring it on test server.

Script for Backup and Restore
Now, let us quickly see the script for backup and restore. The script is very simple. Here is the script to take backup of database. We have learned this in the previous module. The syntax is mysqldump command followed by _____operator and location of the file where database dump will be stored. Now, let's see the script for restoring the database. We will learn this in this module. The syntax is very similar to taking backup. Mysql command is followed by _____ than operator and location of the file containing database dump, which we will restore. Though they look very similar, there are three important differences between them. First the operator, which we use between options and dump file, has different direction in backup and restore operation. Additionally, we have taken backup with the help of mysqldump, but we will restore the dump with mysql command and not with the help of mysqldump. I commonly see _____ forgetting this minor detail and getting confused and distressed while restoring the database. Remember creating backup, mysqldump command and restoring backup, mysql command. Next, we will understand scenario which we will use in the demonstration.

Scenario Setup
The scenario is very similar to the previous module. We have company called SQL Authority, headquartered in United States of America. Companies business is movie rental. Company has two branches, one in United States and second in India. There are two database administrators, Rahul and Mike. Rahul belongs to India and Mike belongs to USA. In this demonstration we will once again use simple database, which are freely available on mysql download section. The databases which we will use are sakila, test, and world. Sakila database contains movie rental activities. Now, let's see our very first scenario.

Scenario 1: Restore Single Databases
Scenario 1. India and US run separate business units and maintain their own databases. Every month end India and US have to take inventory of all the movies rented and pay the royalty to the film studio in the USA. Mike requests Rahul to take backup of sakila database containing film rental activities and send it from India to USA. Upon receiving the backup file Mike will restore the database on its server and calculate the royalty. In this demonstration, we will see how Mike will restore single database. Additionally, it will be very interesting to observe how Mike will restore India's sakila database on the server where US sakila database already exists.

Demo 1: Restore Single Databases
Here is the file Mike has received from Rahul. This file contains rental activity of India region. Now let's go to mysql Workbench. We will connect to US office. On this server we can there three databases exist, sakila, test, and world. Sakila database contains rental activity of United States region. We are to restore another database on the server. Mike decides to create another database called sakila India on this server. Create database sakila India. Click on Execute and click on Refresh on the left side of navigator pain. Sakila India database is now visible on the schemas. Click on Expand and click over here one more time. You will see there are no tables in this database. Now with the help of mysql command we will restore sakila India database over here. Let's go back to command prompt and over here we will change the part of our current directory to the folder where mysql. exe exists. Cd, part of the folder, hit enter. Now, we'll enter mysql command, mysql, name of the host, username, prompt for the password, and name of the database where we want to dump data from our backup file. I will enter here sakila India, less than operator, and location of the dump file. Click enter and it will ask for the password. Enter valid password and click enter one more time and that's it. There are no errors on the screen, that means our database is restored successfully. Let's validate that by going to mysql workbench. Click over here and click refresh. Sakila India database is already expanded and under tables you can notice list of the tables, which we have just created with the help of dump file. Right click on any of the table and select rows. Notice that _____ we also have data. That's it. We have successfully restored sakila India database on our US server. If we do not specify the name of the database in mysql command line, for an example over here I have specified sakila India, mysql will restore dump file to the database which was the origin of the dump file. In simple words, in our case it will restore all the data on the top of sakila database. If that happens, we will lose US sakila database and will have copy of India sakila database on the server. Hence, be very, very careful with the options you specify in mysql command when you restore any database from dump file.

Scenario 2: Restore Multiple Databases
Let's see another scenario. India and US run separate business units, hence their activities are different. In US headquarters all the calculation related to royalty is carried out. However, for audit purpose US Team would like to keep every single database which exists in India Team on United States server. For that, Mike requests Rahul to take backup of all the databases of the server and send it from India to USA. Now, upon receiving the backup file Mike will have to restore all the databases on the server. This is a little different scenario. In this case, Mike will create entirely new server and restore all the databases it has received from India on that server. Let's see how Mike does that.

Demo 2: Restore Multiple Databases
Here is the server which Mike has created in US office. Click Refresh on schema and you will notice there are no schemas. Now Mike will open command prompt, will enter command to restore all the database it has received from India Team. All the data is stored in this dump file. Now let's go to command prompt. Here I have already changed the directory of my current location to the folder where mysql. exe is located. Now let's enter command mysql, host name, username, prompt for the password, and the location of the file where all the database dump is stored. Click enter and it will ask for a password. Enter valid password and click on enter. There are no error messages, that means our restore process has successfully completed. Let's validate that by going to mysql workbench. Over here click Refresh on schema and you'll notice three new schema has emerged. Expand sakila, click over here and you'll notice it contains many tables. Right click on any of the tables and select rows. Table also contains data. This means we have successfully restored all the databases from our dump file. There is one key difference between this demonstration and earlier demonstration. In earlier demonstration we have specified name of the database where we wanted to restore our dump. This was because we already had database exist on our server, however, in this case we had to restore multiple databases and we wanted to create databases as exactly the same name as original database. Hence, we skipped the database name option in our mysql command. Well, with this we complete our demonstration of restoring all the databases on server.

Summary
Summary in 60 seconds. Mssql is a client utility that restores a logical backup. Mysqldump command is useful to take back up and mysql command is useful to restore the backup. Do not use mysqldump command to restore backup. I often see _____ trying to restore database with the help of mysqldump command. That will not work to restore database. For additional backup options related to mysql you can visit this link over here. And on a final note, at frequent interval do not forget to test your backup by restoring them on your base server.

Data Export and Import With Workbench
Introduction
Hi this is Pinal Dave and welcome to the module of Data Export and Import with MySQL Workbench. Let's see outline of what we're going to cover in this module. First we'll have introduction to MySQL Workbench and right after that we will see how we can export data with MySQL Workbench. We will see various options as well as cool tricks about data export. Following that you will understand how to import data with the help of MySQL Workbench. And finally we will have summary of what we have learned. Remember this is not a course to learn MySQL Workbench. If you are interested to learn about MySQL Workbench, I have already built a course explaining various features of MySQL Workbench in Pluralsight library. The name of the course is MySQL Workbench Guided Tour. It covers three important aspects of MySQL Workbench as well as explains many efficiency tips and tricks to use MySQL Workbench. In this module we are going to focus on data export and data import, features of MySQL Workbench.

Notes on MySQL Workbench
MySQL Workbench is a ______ designing tool that integrates SQL administration, SQL development, and database modeling. It is available on Windows, Linux, and MAC OS. That means you can use MySQL Workbench on any of these platforms and can use this unified integrated development environment for your mysql database system. You can download MySQL Workbench for free from the URL displayed on the top of the screen. MySQL Workbench installation is pretty straightforward. I covered that in detail in my other course of MySQL Workbench Guided Tour. So far, we have learned how to take backup and restore with the help of command prompt. We can achieve almost same results with the help of MySQL Workbench. In MySQL Workbench under Navigator section we have two important options, Data Export and Data Import. In this module we'll be discussing the same in detail with the help of demonstration.

Demo: Backup Single Database
In earlier modules we discussed various business needs and scenarios related to backup and restore. As those business needs and scenarios does not change we will not repeat them in this module. Instead we will focus on practical aspect of MySQL Workbench backup and restore in this module. Let us first learn how we can take single database backup with the help of MySQL Workbench. Let's switch to MySQL Workbench and see how we can back backup of single database. Here we are in MySQL Workbench. Double click on Connection and it will open up this screen. On the left side under Navigator section you can see there are two options, Data Export and Data Import. First we will explore Data Export. Click over here, it will bring up this Administration screen where we can do data export. On the left side you can see all the databases exist on this server. First we have to learn how to take backup off single database. Hence, we will click on sakila. Here are a few of the options. We will learn them later in this module. Hence we will keep them as it is. Over here we have to specify the file where we are going to export our data from sakila database. We will ______ to C:/backup folder in MySQL Workbench. Right after that we'll enter the name of the file, sakilabackup. sql. Now click on Start Export. It will bring up to second type of export process. Over here you can see status is export completed. There are 23 different objects and each of them are exported successfully. Under log we can see various messages. If you want to know what technology MySQL Workbench uses to take backup off entire database, well you can just look at over here, mysqldump. exe-defaults and various options. In simple words, MySQL Workbench also uses mysqldump. exe to take backup. You have already learned about this in earlier module and now you can see that MySQL Workbench also uses mysqldump to take backup off database. Remember MySQL Workbench is just integrated developmental environment and then it will use all the features and commands of native mysql. Let's go back to our backup folder. Over here, you can see the file sakilabackup. sql. You can open the same file in MySQL Workbench and can see if contains backup of database sakila. Well, it's that easy to take backup with MySQL Workbench.

Demo: Backup Multiple Databases
In the last clip we have learned how to take backup of single database. In reality most of the time we take backup of multiple databases. Let's see how we can export schema and data off multiple databases with the help of MySQL Workbench. Go to MySQL Workbench and click on Data Export under Navigator pane. Over here let's selected three different databases, sakila, test, and world. Now let's provide location and file name for data export. Backup folder under C drive is our location and multipledb. sql is the name of the file where we will export our data. Click on Start Export and you can see data export is completed. Upon looking at the log we can see it has taken backup off three databases, test, world, and sakila. And then we can see export is finished and here is the location of the file. Let's open this file to examine its content. Click Open and click on multipledb. sql. First we have backup of test database. Upon scrolling down we can see backup of world database and when we further scroll down we can see backup of sakila database. Well it's extremely easy to take backup of multiple databases with the help of MySQL Workbench.

Demo: Backup Individual Tables
So far we have learned how we can take backup of single or multiple database. However, in business there are sometimes needs where we are to take backup of one or more tables. We may not need backup of all the tables in database. Well, when we are using command prompt to do the same task it's a little bit complicated as we are to enter name of every single table which we want to take backup in command prompt. However, when we are using MySQL Workbench the same task becomes very easy. Let's see how we can achieve that with the help of MySQL Workbench. Change the context. Let's open MySQL Workbench, double click on Connection and click on Data Export. Over here let's select database sakila and click on the name of the database. On the right side, it displays all the tables exit in this database. We can click on Unselect and now can select the table which we want to take backup off. In this example, I will take backup off actor, city, and film table only. Let's enter the location _____ where we want to export our schema and data. Name of the file is selectedtables. sql in backup folder. Click on Export and it has quickly exported three tables from sakila database. Let's open this file to examine its content. Click Open and click on selected tables. Over here you can see schema of film, city, and actor. Well, its indeed very easy to take backup of schema off selected tables. Now let's learn one more thing in this demonstration. Click on Data Export tab one more time and observe mysqldump command, which this export process executed. Over here, there is an option called no data. That means our exported table does not have any data in it. This is because when we click on Start Export at the time we have option of skip table data selected. That means when these three tables are exported, at that time it will not contain any data in it. Let's uncheck this option and see what our export file will contain. The name of the file where we will export our data and schema is datatableexport and the location is backup folder on the C drive. Click on Start Export. Over here you can see now two entries. This entry belongs to our earlier export and this entry belongs to our recent export. Now, let's open this file to examine it's content. Click Open and click on datatableexport. sql. Over here first table structure has been exported _____ in that it also exported data of the same table. This did not exist earlier. Similar details you can see for city table as well as for actor table. Well, MySQL Workbench makes it very easy to take backup of ______ tables and its data.

Demo: Backup Routines and Events
So far we have talked about taking backup of schema and data. With the help of MySQL Workbench we can also take backup of routines and events. Let's see how we can take backup of routines and events with the help of MySQL Workbench. Open MySQL Workbench and click on Connection. Click on Data Export under Navigator tool. Now we will take backup of routines and events of sakila database. Let's select the database and now right below here you can see there are two options, dump stored routines and dump events. If you keep both of them checked you're export will contain all the routines and events from sakila database. Provide location and the file name and now we will unselect every single table over here. This is because we only want to take backup of routines and events and no data as well as schema of any of the table. Click on Start Export and export has completed successfully. Let's open this file and examine its content. Click Open and click on routinesandevents. Over here you can see all the events and routines of sakila database. Sakila database does not have any events, hence the events section is empty. However, sakila database has many stored functions and stored procedures. You will see them listed right below over here. Here is the stored function, get customer balance and it's content. When we scroll down further, we can see various procedures like film not in stock or rewards report and many others. Taking backup of routines and events with the help of MySQL Workbench is very easy.

Demo: Backup Database in Dump Folder
Now, let's learn about one more feature of backing database in dump folder. So far we have seen when we export data the backup file is single file. However, there are business needs when we want to take backup in multiple files. For example, you may want to take backup of every single table into its own file and distribute those files to _____ department. Well, that's possible with the help of MySQL Workbench. Let's go to MySQL Workbench and click on Data Export. We will select sakila database and select option export to dump project folder. When we select this option each table will be exported into a separate file. This allows selective restore, but it will slow us down. Let's give the name of the folder over here. C:\backup\individual and click on Start Export. Export is completed successfully. Here is long list of log file. MySQL Workbench has individually exported every single table. Let's observe the content of this folder. Click Open and navigate to individual folder under backup folder. Over here every single file contains export of single table. Let's open any one of the files, sakila. city. This file will contain data for table city from sakila database. It will have table structure as well as data of city table. However, it will not contain any other details. This is because when we exported our data we had selected export to dump project folder. Now we can individually distribute these files to different departments. Remember when we exported the schema, at that time we also had enabled dump stored routines and events. These stored routines and events also created a file called sakila routines. All of the stored procedures, stored function, and events are combined together in this single file. Let's examine content of this file. Go to MySQL Workbench, click Open and click sakila_routines. This file contains all the views, temporary tables, events, routines, like functions, and stored procedures. Well, it's that easy to create separate files for tables and routines with the help of MySQL Workbench.

Demo: Restore Database From Single File
So far we have seen how to export database objects and data. Now we will see how we can import or restore database objects and data from the dump files. Let's go to MySQL Workbench. Here we are in MySQL Workbench. Click on Connection. Over here click on Data Import or Restore option under Navigator. It will bring up this screen. First we'll learn how to import data from self contained file. On this server we have three databases, sakila, test, and world. We will import sakila database and restore on the top of this database. For that, first we will open our existing sakila database and drop payment table. The payment table is gone from this database. Now, we will click over here and select the location of our sakila database dump. Click over here and select import from self contained file and navigate through the folder where we have dump of sakila database. Click Open and now click on Start Import. Import is successfully completed. Now let's go back to our schema and click on Refresh. Now let's see if our table payment reappears in this database and it is. The payment table, which had dropped before our import process, is now reappearing in this database. That means our database is restored successfully. Well, it's that easy to restore database from dump file.

Demo: Restore Database From Dump Folder
We just learned how we can restore database from single file. In this demonstration we will learn how we can import and restore database from the dump folder. Let's open MySQL Workbench and click on Connection. Over here, select Data Import or Restore option under Navigator selection. Leave import from the dump project folder as it is and select dump folder over here. The dump folder is C:\backup\individual. As soon as we select this folder, it will automatically bring up database which is available in project folder. The database which is available is sakila database. Upon selecting it will bring up all the objects from this database. We can either select all the tables or any individual table as well. For this demonstration we will try to select only payment table from this backup. For that, we will first explore our current sakila database and go to payment table. Select the table and drop it. It will bring up this option. Select Drop Now. And now payment table is gone from this option. Select refresh to double check that payment table does not exist in our current database. Now, we will come over here and unselect all of the tables. We will select single payment table as option to restore. Now select Start Import. The import process is completed successfully. When we see the log file we can see it has restored file which is sakila_payment. sql. This file contains schema and data for payment table. Now, under Navigator section click Refresh. It will automatically bring up payment table over here. This table did not exist before. That means it has been restored from our dump folder with the help of data import feature of MySQL Workbench. Either we can select all the tables or restore individual tables. As you can see importing data with the help of MySQL Workbench is very smooth process.

Summary
Summary in 60 seconds. MySQL Workbench is integrated development environment for MySQL. It can do all the basic backup and restore tasks related to data for MySQL databases. You can download MySQL Workbench from URL displayed on the screen. Remember MySQL Workbench is free tool. It is always good idea to test your backup by restoring them on your development server.

Frequently Asked Questions
Introduction
Hi, this is Pinal Dave and welcome to the module of Frequent Asked Questions. Whenever I talk about mysql backup and restore and I often get lots of questions. I have selected five of the most frequently asked questions and will be discussing them in this module. First, we will discuss about point in time recovery. Right after that we'll discuss topics like frequency of backup, location of backup, as well as how to copy database from one server to another. And finally, we will discuss best time of the day for backup and restore. Let's start with our very first scenario of point in time recovery.

Point in Time Recovery
Point in time recover. Here is one of the most popular questions I often receive. I just deleted a row from a table, can I reverse my last action? To error is human. That means we all do mistakes once in a while. However, it becomes very difficult when we cannot reverse our small error. Well if you have just deleted a row from a table you can of course reverse that with the help of point in time recovery. You just have to know when you have done your mistake. Here are two of the matters for point in time recovery. We can use event positions or event times. We will understand that with the help of demonstration. However, first let's set up scenario. Here is the scenario for point in time recovery. Let's assume that you are deleting something from your table. Here is event 1, here is event 2, here is event 3. Right after that you have done event 4. Now after event 4 you realize that between event 3 and event 4 you have accidentally done one error. At that point of time you wonder how can you go back in time just erase the accident between event 3 and event 4. Well with the help of point in time recovery we can easily remove accident happened between event 3 and event 4. Well, your final outcome will exactly look like this. However, to achieve this, you will have to stop further operation on you mysql server and do backup and recovery operations on your server. This will help you to overcome errors you have done while doing operations on your server. Let's see that with the help of demonstration.

Demo: Point in Time Recovery With Log File Edit
First open MySQL Workbench and double click on Connection. Over here you will see databases listed under Navigator pane under Schema section. First, let's select data from sakila database and payment table. Select the statement and click on execute. In the result side you can see various payment IDs. Now we'll take full backup of sakila database. Open command prompt and change your directory to the folder where mysqldump application is located. Now, with the help of mysqldump let's take backup of sakila database. Click enter and it will ask for password. Enter valid password and click enter. This will take backup of sakila database. Now let's simulate the situation of our accident. From ______ let's assume that we want to delete ID 1, 2, 3, and 12 from payment table of sakila database. However, during the script we will also execute this statement, which will delete record with payment ID 11. We will call this statement as our accident statement or our mistake. Let's execute all the statements one by one. Here I deleted the record with payment ID 1, here I deleted record with payment ID 2, similarly this statement will delete record with payment ID 3. Now this is the statement which we should have not executed. However, let's assume this is our accident. Well, we delete row with payment ID 11. Select the statement and click on execute and right after that we will execute our normal operation where we delete record with payment ID is equal to 12. Now, let's go back on the top and select all the records from payment table of sakila database. Select the statement and click on execute. Well, in our results we can see payment ID 1, 2, 3, 11, and 12 are gone. Now let's remember our question, how do we retrieve a row which we have deleted accidentally. Here we will have to restore our database in point of time right before this accident has happened. That means we have to restore our database in such a way that it will delete 1, 2, and 3, but will not delete a record with payment ID 11. Well, before we do anything else we should take log backup. Log backup contains every single _____ update or delete activity of database. After every full backup or service restart mysql engine uses new log backup to keep details of all these modification activities. You can execute command, show binary logs to list all the log files available for this server. First column is the name of the log file and second column is the size of the log file. Now scroll _____ over here, the last row indicates current log file. That means the delete operation which we have recently performed is in this file. We can also use show master status to see which is the latest log file mysql is using. Over here, _____ once again validates that this file contains recent operations. Let's take backup of this log file. Let's go to command prompt and over here we'll take backup with a new command mysqlbinlog. This command takes backup of the log file. Next, we will write the location of the log file and right after that destination wherever you want to save this log file. Click enter and backup is successful. Now as we have taken backup of log file let's restore our original backup which we have taken before we executed all these delete commands. To restore the database, we will use mysql command, mysql, host name, username, prompt for the password, and database name. Click enter and now type valid password. Click enter one more time and it will restore our database successfully. To validate if database has been successfully restored, let's go back over to MySQL Workbench and execute this select statement. When we execute this select statement, we can see that our result contains 1, 2, 3, 11, and 12. That means all the records which were deleted before now are back in our database. Next we will open the log file. Click over here and navigate to the log file location. Double click on the log file and it will open log file in MySQL Workbench where we edited. Over here you can see delete statement. It deletes records with payment ID 1. Similarly when we scroll down a little bit more, we can see payment ID 2 and record ID 3, and other records as we scroll down. Right over here we can see delete statement of payment ID is equal to 11. This is the statement which we had executed accidentally. For this demonstration we have a little bit different situation. We not only have to restore everything before this statement, however, we also have to restore everything after this statement. That means we need everything except these two lines. This makes this entire scenario a little bit tricky. You just have to delete this one statement from this log file. Delete the statement and click on Save. Next, go back to command prompt and over here destroy this log file, which we have just modified. Always take backup of your log file before you edit that. It is quite possible we might have done some mistake when we edited the log file. Now, let's restore this log file with mysqsl command via command prompt, mysql, host name, username, prompt for the password, and just like any other backup file we will restore log file. Click on enter, it will ask for password. Enter valid password and click on enter. As there is no error, it has successfully restored our log file. Let's go back to MySQL Workbench. Now, we will execute this statement and validate our results. When we click on execute in our result set. we still see record with payment ID 11, however, record with payment ID 1, 2, and 3, which were before 11, and record with payment ID 12, which was right after this statement, are not there in our result set. That means we have corrected our error and this particular row, which should not have been deleted, still exists in our result set. That's it. We resolved a very complex situation with very simply solution of point in time restore.

Demo: Point in Time Recovery With Timestamp
In earlier demonstration we have learned how we can restore data from log file and correct our mistake. In this demonstration we will take the same example, a little bit more ahead, and see how we can restore database log with the help of stop date time. For example, in our tricky scenario we had to restore data before and after this statement. Hence, we had to go to log file and edit that. But let's assume that you just want to stop when you made error. That means, you only want to restore data right before this error has happened. You can do that if you remember the time when you executed the statement. Well, it's not possible always to remember when we have made mistake, however, our log file contains the very precise detail of timestamp. Go to log file and over here you can notice detail for timestamp and right before that in commit you can also see time in our familiar format. Let's assume that you only want to delete first two records. You do not want any of your action after you deleted record containing payment ID 2 from payment table. We can accomplish that very easily. Remember this timestamp and let's take a look at the very next timestamp. This timestamp contains second part of 32 and right after that timestamp contains second part of 53. That means if I take any moment between these two times and stop execution of my log file right there, it will solve my purpose. In other words, if I stop executing of my log file at second 33, however, it will execute everything until this moment, but it will not execute anything after this point. Let's validate that. Let's go to command prompt first and let's restore full backup and right after that we will now restore log backup with stop date time. Here is the command mysqlbinlog followed by --stop-datetime. The date and time belongs to my server and timestamp is with second part is 33. That means it will restore everything up until this particular time. Key in the name of your log file, right after that we specify mysql command to restore our database. Click enter and type valid password. Hit enter and it will restore your log file. Now let's go back to MySQL Workbench and execute the select statement one more time. Here it is, our result set demonstrates that it has deleted first two records where payment ID is equal to 1 and 2. However, as we have stopped with the help of timestamp right after this statement it has not deleted record with payment ID 3. We have learned how to restore our database in point in time with the help of log file recovery mechanism.

Frequency of Backup
Here is another very frequently asked question. What should be the frequency of my backup? Well, there is no right or wrong answer. Honestly you should take backup of your database as many as time as much you need. Your ultimate goal is data safety. If you were to take 10 times backup to maintain safety of your database, you are to take 10 times backup. There is never a right or wrong answer when it is about security and integrity of your database. However, you should be very, very careful about one thing when you take backup of your database. If you take your database backup too frequently it will waste three important resources of your database system. Those are REM, CPU, and hard drive. Though hard drives are getting cheaper every single day, ______ resources are associated with your computer system and are limited. Always try to find right balance between availability of your resources and backup frequency. If you need to take backup or not, the answer is always take backup. You cannot go wrong at any time when you have additional set of backup available if needed just in case.

Location of Backup
Here is another popular questions. What is the best option to store database backup? Again, there are many different answers to this one question. However, I will list four of the most popular database backup locations. They are Google drive, Dropbox, Amazon Simple Storage Service, known as Amazon S3, and your remote computer where you can FTP your database. Honestly, there is no right or wrong answer to your database backup location. You should remember _____ that in case of emergency you should be able to easily and quickly retrieve your backup and restore in your database. If any of the recommended service fails to do so, you have definitely selected wrong location to store your backup. Remember, in case of a disaster, you want your database readily available and it should not take a lot of time to just retrieve from your backup location.

Copy Database From One Server to Another
Here is another popular question. What is the best method to copy database from one server to another one? Well, there are two prominent methods to copy database from one server to another one. The method one is with the help of mysqldump. Mysqldump is database level operation and can copy entire database from one server to another server. We have learned everything about mysqldump in our module 2, hence I will be not repeating details and demonstration related to the same. The second method is mysqlimport. Mysqlimport is table level operation and it sends _____load data in file statement to the server. You can compress your database if you database is too huge with the help of mysqlimport, however, mysqlimport command only supports table level operation. That means, if you want to move a database from one server to another server you will have to repeat mysqlimport process for every single table for that database. This can be very lengthy as well as complicated process if your database is too huge. My recommendation is to use mysqldump as it supports database level operation and due to any reason if you want to do table level operations it also supports.

Best Time of the Day for Backup and Restore
Here is the final frequent asked question. What is the best time of the day for backup and restore operation? Well answer is pretty straightforward. When you database is not used. In reality that's rarely possible. That means you should do backup and restore operation during your nightly maintenance process when you stop user access or you have very low database activity. This is because backup and restore operations take valuable resources from your regular operations of database. On my production server every night I reserve 10 minutes time, during that I disconnect database from application and do although the maintenance activity. Right after I complete all the maintenance activity I once again connect application to my server and this way I make sure that none of my user faces any issue during my backup and restore operations.

Final Note
Well, with this finished to the final part of this module and this course. Here are a few of the things which we have learned so far. We have learned how to take database backup with mysqldump as well as we learned that we can restore our database with mysql command. We also learned that with the help of MySQL Workbench we can export and import our database as well as various objects of our database. Errors happen, but with the help of point in time recovery we can usually correct them if we have taken proper database backup right before that. And in this module, we also explored few of the best practices related to database backup. Well this is just the beginning. There are a lot of different places we can go from here. Here are a few of my suggestions. You should try out every single demo of this course. Without proper practice it will be very difficult for you to backup your database and restore it during emergency. In industry I have seen quite a few people taking backup regularly, but never testing them on the development server. I strongly encourage that you practice restoring your backup on your development server and feel confident as well as comfortable with your backup file and restore process. There are many advanced concepts related to backup and recovery. Once you master your mysql community edition mysqldump, I suggest you try mysql enterprise edition and various advanced recovery techniques available in enterprise edition. Well, that's it. I really thank you for attending this course and staying along with me in this journey.
