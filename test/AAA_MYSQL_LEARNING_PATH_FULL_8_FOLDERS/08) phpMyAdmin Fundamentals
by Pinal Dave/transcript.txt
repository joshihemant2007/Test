phpMyAdmin is a free and open source tool written in PHP for the administration of MySQL via a web browser. It can perform various tasks such as creating, modifying or deleting databases, tables, fields, and rows as well as executing SQL statements or managing users and permissions. This course will guide you through maximizing the power of phpMyAdmin to get productive quickly with MySQL.

phpMyAdmin Introduction
Introduction
Hi, this is Pinal Dave, and welcome to phpMyAdmin Fundamentals. When you start a new job, a very common expression you hear is, "Good Luck and Best Wishes". Based on your location and surroundings, you often see many different "Good Luck" symbols. Here are a few of the common symbols I've come across in recent times; however, if you hear a statement, like the ones you see on the screen, from your boss, where you have to deal with database, a good efficiency tool, along with good luck. In this course, we are going to talk about one such tool, which helps database developers and administrators accomplish complicated database tasks easily. Here it is, phpMyAdmin. phpMyAdmin is a Free, Open Source, and Cross Platform tool available to download on the internet. It is built with PHP, XHTML, CSS, and JavaScript. It is a browser-based administration tool, hence, users can access it very easily on any browser. With the help of phpMyAdmin, users can create, modify or delete various databases, as well as tables. In this course, we are going to learn various features and functionality of the phpMyAdmin. To make things interesting and address real-world scenarios, I will tell you stories of two Database Administrators, Rahul and Mike. Rahul is an intern and Mike is a Senior Database Administrator. Rahul wants to grow in the organization and eventually wants to become Senior Database Administrator. In this course, we will see Rahul's journey under the mentorship of Mike. Here is the Outline for this course. In this course, we are going to learn four main topics together. We'll be learning about Installation and Configuration of phpMyAdmin, various Database Operations, various Table Operations, and a few of the very critical Home Screen Settings for phpMyAdmin. Before we end this course, we will go over a few of the very important Resources. And now, we will discuss what we are not going to cover in this course. This course is not about learning PHP. There are other courses available in the Pluralsight Library, which can teach you how to build applications with PHP from scratch. Additionally, this course is also not about learning Database Advanced Concepts. We'll be discussing a few of the basic database concepts, as we need, in our demonstration. However, if you are very keen about learning Database, in the next slide I will show you a few of the important resources for learning Database from scratch. There are five different courses available in the Pluralsight Library, which will teach you MySQL, from Fundamentals to advanced levels. If your code area is Performance Tuning, Pluralsight has courses on Performance Tuning as well. Well, let us start our PHP-guided tour right away. During this journey, if you have any questions or comments, please feel free to ask on the Discussion Forum at Pluralsight or you can reach out to me on my social media handles.

phpMyAdmin Installation and Configuration
Introduction
Hi, this is Pinal Dave, and welcome to the module of phpMyAdmin Installation and Configuration. Let's see what we are going to cover in this module. First, we'll discuss about various Prerequisite Software needed for phpMyAdmin and how to install them. Right after that, we will see where we can Download phpMyAdmin and how we can Install phpMyAdmin. Trust me, the Installation Process of phpMyAdmin is very simple. Once we install phpMyAdmin, I will show you a couple of tricks, how to configure phpMyAdmin without any warning or error. After successful installation of phpMyAdmin, we'll start with our journey to learn how we can connect to MySQL and use it efficiently.

Prerequisite Software
Let us explore various Prerequisite Software to install phpMyAdmin. First, we will need Web Server. We can use Apache Web Server or IIS. We also need PHP installed on the system, where we want to install phpMyAdmin. Remember, phpMyAdmin is Web Browser-based software, so you can access it from anywhere, but you need to have PHP on the Server where you install the phpMyAdmin application. You need PHP 5. 3 or newer version to install phpMyAdmin. You will also need a Database to store various settings related to phpMyAdmin, to store various settings of phpMyAdmin. You can use MySQL 5. 5 or newer version, or MariaDB 5. 5 or newer version. Though, I do not see lots of installation of Database Drizzle, it can also work with phpMyAdmin. Last, we need a Web Browser which supports Cookies and JavaScript. Well, so these are the Prerequisite Software to install phpMyAdmin. Let's see, in the next clip, what are the different softwares we are going to use for this course.

Prerequisite Software for This Course
So, pretty much you can use any of the software mentioned in the previous clip to run phpMyAdmin successfully. In this course, we will be using the following softwares. For Web Server, we'll be using Apache Version 2. 2. 25 on Windows32 platform; you can download that from the URL displayed here. For PHP, we'll be using Version 5. 3. 28 and you can download that from the URL displayed over here. I will be using Database MySQL 5. 6. 17. It is available to download for free from the URL displayed on the screen. Web Browser, I will be using Chrome. Chrome supports JavaScript and Cookies. You can download the Chrome Browser from the URL displayed on the screen. Once you install and configure all the Prerequisite Software successfully, the next step would be to download phpMyAdmin from the URL displayed on the screen. In the next demonstration, let's see how we can download, install, and configure phpMyAdmin to work with our Database application.

Demo Setup
For the sake of completeness in this demonstration, I will first install Apache. Right after that, I will install PHP and MySQL. Once all three of them are installed and configured successfully, I will download and install phpMyAdmin. Right at the end, we'll configure phpMyAdmin to work with all three of the prerequisite software, and we'll land on phpMyAdmin's Home screen. Well, let's start with our very first installation.

Demo: Installing Apache Server
In this folder, I have downloaded already all the prerequisite softwares; Apache, PHP, MySQL, and phpMyAdmin. Browser is already installed with my Operating System. Let's start by installing Apache on this Server. Double-click on Installer, and it will bring up this screen. Click Next, and click Next. Double-click on the application file and it will bring up this screen. Click Next and Accept the agreement, click Next. Make sure you read this entire thing first, and right after that click Next. Under Network Domain, type in name of your domain and name of the server. And right after that, enter your Administrator's Email Address. Now, click Next over here, and on this screen, let the Typical be the default setting for installation. Click over here, and one more time click on Next. At this point of time, this Wizard is ready to install Apache Server on your computer. Click on Install, and the Installation Process will start. This Installation Process is very quick and instant. Here it is; this screen suggests that installation of Apache Server is successful on our computer, click on Finish. Next, we'll install PHP on our machine.

Demo: Installing PHP Server
Now we will install PHP on this computer. Double-click on the installation file, and it will bring up this screen. Click Next, and Accept the Licensing Agreement. Click Next, and one more time click Next. Over here, select Apache 2. 2. x Module as our Web Server setup, and click on Next. Here, we are to select Apache Configuration Directory. We will select on Browse and select our Apache Software Installation Directory. Click OK, and now click on Next. This is the screen where we will select various features for PHP. We'll just leave it as it is and click on Next. Now, our Wizard is ready to install PHP 5. 3. 28. Click on Install, and it will very quickly install PHP on our server. Here it is; we have installed PHP successfully on our computer. Click on Finish.

Demo: Installing MySQL Server
Now we will quickly install MySQL Server on this computer. Double-click on MySQL Installer, and it will bring up this screen. Click on â€˜Install MySQL Products', accept the License Agreement, and click on Next. On this screen, click on Execute; it will find if there are any updates available on the internet or not. Click Next. Over here, leave the Developer Default selection as it is. Click on Next, and one more time click on Next. This is the screen where MySQL Installer is ready to install all of the components which we have selected. Click on Execute, and it will download any necessary component from the internet and install on this computer. Installing MySQL Database is also a fairly quick process. If you want to learn the various nuts and bolts of MySQL Installation Process, you can watch my other course, MySQL Fundamentals Part 1, where I explain various details related to MySQL Installation Process in detail. Now, click on Next and it will bring up this Configuration Overview screen. Click Next, and over here click on Show Advanced Options. Click Next. Now provide MySQL Root Password and one more time click on Next. Leave all the settings as it is and click on Next. If there are any errors, select General Log and Bin Log to record all of your activity related to MySQL Database. Click on Next, and now your MySQL is being configured. One more time, click over here, and you have successfully installed MySQL Server. Click on Finish. Upon clicking Finish, it will bring up MySQL Workbench. MySQL Workbench is another IDE, just like phpMyAdmin. However, we will be not using this one for --- this course, hence, we'll click on Close. Next, we will learn how to install phpMyAdmin on this machine.

Demo: Installing phpMyAdmin
Here we are on phpmyadmin. net website. Click over here to download phpMyAdmin's compressed file for installation. I have already downloaded this file over here in this folder. Now, let's unzip this file over here. Click over here, and it will extract phpMyAdmin folder over here. Double-click and you will see various files related to phpMyAdmin. Let's go one level up, and rename this folder. For the sake of simplicity, we'll rename this folder to phpMyAdmin. Now, we will go back to our browser one more time. In the browser, we will type URL localhost and click on Enter. It will display "It works! " That means our server is configured successfully. Now, minimize this browser. Now copy this phpMyAdmin folder. Go to the Installation Directory of your Apache Web Server. In my case, it is on a C: drive, Program File, Apache Software Foundation, Apache 2. 2 Directory. Over here, I have a folder called htdocs. Double-click on this folder, and paste our folder, phpMyAdmin, over here. Double-click on the folder, and you will see there is an index file. Let's call this file from our browser. For that, we are to go to our browser. Right after localhost, type phpMyAdmin and index. php. Click on Enter, and it will bring up the phpMyAdmin screen. Honestly, it's that easy! We have successfully installed phpMyAdmin, and we just have to log in to phpMyAdmin with our Database Username and Password. Isn't this one of the most easy tasks you have come across in recent times? It is, indeed. In the next clip, we will log in to phpMyAdmin and fix a few of the small configuration issues.

Demo: Getting Started With phpMyAdmin
Now, we are on the Log in screen of phpMyAdmin. Let's type in Username off your database and enter Password over here. Click on Go, and it will log you in in phpMyAdmin Home screen. On the left side, we can see various databases; on the right side, we have various options. When we look at further right side, we have a few very important information, like database server. The database server is installed on localhost and it is connected via TCP/IP. The Server type is MySQL and Server version is also listed right here. Username is displayed right below over here; however, Password is not displayed because of security purposes. Right below, over here, we can see information related to Web server, like we have Apache 2. 2. 25 and stored on Windows platform. And right below Web server, we have information related to phpMyAdmin. Here is Version information and it displays that it is up to date. If there was any later version after this, it would have also displayed that over here. Right below that, there are a few important links and resources for phpMyAdmin. One, this is just a Home screen of phpMyAdmin; however, when we scroll it further down, we will see a warning. The warning says, "The phpMyAdmin configuration storage is not completely configured, some extended features have been deactivated. To find out why click here. " This is one of the most annoying warnings a lot of phpMyAdmin administrators face. When you search online, you will not find a proper answer most of the time. This is the reason I'm going to spend the entire next clip explaining how you can disable this warning and configure your phpMyAdmin with some extended features.

Demo: Removing Warnings and Error From phpMyAdmin
As we discussed in the previous module, we are going to fix the warning, which we are seeing over here. However, along with this warning, there is one more error as well. If you scroll this one down further, you will see the error in the red box; "The configuration file now needs a secret passphrase". Now, we will see how we can fix this warning and this error together with one simple change with configuration. First, click on the Import tab in the Menu Bar. Over here, select â€˜Browse your computer' and click on â€˜Choose File'. Now, go to the folder where you have installed phpMyAdmin under Apache Server. And then we get to the part; C:, Program Files, Apache Software Foundation, Apache2. 2, htdocs, phpMyAdmin, and now go to examples folder. Click on create_tables file, and it will be selected over here. Scroll down and click on Go. What it essentially does is that, it will create a Database called phpmyadmin on your server. You can see the script right over here, as well as a newly created database over here. This newly created database now stores all the settings related to phpMyAdmin. Now, you have created a phpmyadmin Database and 11 tables. You will have to still do one more task; you will have to go to Users tab, and create a User which has enough privilege to read this phpmyadmin Database. I'll click on â€˜Add user' and type User name: pma. We'll enter Password pmapass, which is pma and pass. We'll type that one more time. And give it all the necessary permissions. Over here, for the sake of simplicity, for this course, I'll just give it all the privileges. Now, scroll down, and click on Go. You can notice that User pma has been created successfully. Now, there is one more task we have yet to complete. Go to our folder of phpMyAdmin one more time in your browser, under Apache Web Server. Over here, you'll find a file called config. sample. inc. Rename this file to config. inc, open that in WordPad. Scroll down a little bit more and you will notice a section called â€˜Authentication type'. Right below that, there is a section called â€˜phpMyAdmin configuration storage settings'. This is the section where we have to make changes. First, we'll uncomment these four lines. They are related to host, port, user, and password for your Server. You can notice over here, User name pma and pmapass. The same user, which we have just created in our Server. Right below that, you will notice â€˜Storage database and tables'. These are the tables which will store various phpMyAdmin-related settings, like bookmarks, relations, history, as well as various other configurations. We are to uncomment all these lines so phpMyAdmin can start storing various settings into these tables. Now, let's click on Save, and close this file. Let's go back to our phpMyAdmin and click on â€˜Log out'. For that, you have to click on this second icon right beside the Home icon. Click over here, and it will bring you, once again, on phpMyAdmin's Log in screen. One more time, enter Username and Password, and click on Enter. Now you are back on phpMyAdmin Home screen. Let's scroll down, there is no warning and no error. Now we have successfully configured our phpMyAdmin to work with our Database. If you change any of your settings of phpMyAdmin, they will be now successfully saved in Database, phpmyadmin, on your Server. With this, we complete our Installation and Configuration of phpMyAdmin.

Summary
Well, that's it; we have successfully configured phpMyAdmin. We also learned how to install Apache Server, PHP Server, as well as MySQL Server. While installing phpMyAdmin, we also learned how to overcome warnings and errors related to Configuration. A side product of resolving our configuration issue was to learn how to import SQL files in phpMyAdmin and execute it, along with creating a user with Admin permissions. Now, as we have configured phpMyAdmin successfully, let's explore various features and functionality in upcoming modules.

Database Operations
Introduction
Hi, this is Pinal Dave, and welcome to the module of Database Operations with phpMyAdmin. In this module, we are going to discuss various database operations, which we can do with the help of phpMyAdmin. It can be pretty boring and monotonous to learn about tools without context of the real world. Hence, I decided to talk about real-world scenarios and associate them with the features of phpMyAdmin. In this module, we are going to discuss various scenarios, which we often see in the industry. First, we'll talk about the need of reporting related to database and various softwares associated with phpMyAdmin. Right after that, we'll discuss variables and their usage, and after that we'll discuss about how we can monitor various activities of database with phpMyAdmin. Right after that, we'll discuss some of the crucial database operations and, after that, we'll talk about security and creating users. Finally, we'll talk about how to export and import Database. And we'll summarize all these concepts in the final clip of Summary.

Scenario Setup
Let's start with Scenario Setup. Let's assume there is a Company called SQL Authority. The Company SQL Authority's Business is Movie Rental; that means the Company has various stores across the country where they rent movies. The Company also has an exhaustive catalog of movies. The Company is headquartered in the United States of America. However, their IT Division exists in India, along with their US Office. In this scenario, we are primarily going to talk about two of the Database Administrators. Rahul, who is in India, and Rahul is an intern; he has recently joined the company and he aspired to get a promotion based on his skills. And Mike, who is a Senior Administrator located in the United States and direct manager to Rahul. Well, let's go over the scenario now. Every day, Mike and Rahul discuss about various database operations and daily needs. As Rahul is an intern, Mike guides Rahul what to do and how to do various tasks related to MySQL. The primary tool, which Rahul uses to manage and develop database, is phpMyAdmin. Let's see what happens into their life. Before we jump to the real-world scenarios, let's recap this entire situation. The Name of the Company is SQL Authority, headquartered in the United States of America. The Business model of the Company is Movie Database and Rental. The Company has 2 Offices, the Headquarter in USA and IT Office in India. There are primarily two Database Administrators, Mike, who is Senior Administrator, and Rahul, who is an Intern. Mike is located in the United States and Rahul is located in India. The Sample Database, which we are going to use in this module, is sakila. Sakila is available to freely download from the URL displayed on the screen. If you have followed the Installation Process described in the previous module, it would have automatically installed the sakila database when you have installed your MySQL. Now, let's see our very first scenario.

Scenario 1: Reports
Scenario 1: Reports Mike asks Rahul to build a report containing properties of MySQL Server installed in India. In other words, what Mike wants is character sets and collations supported by MySQL Server, details related to storage engines and their support, various server variables and their settings, along with Current Status of Server with All _____ Statistics. In simple words, Mike wants to see a report on various capabilities of their MySQL Server. Mike has not provided any specific report format, hence, Rahul can prepare his own format and can send it to Mike. Let's see, with the help of phpMyAdmin, how Rahul can build such a report.

Demo 1: Reports
Here we are on the Log in page of phpMyAdmin. Let's enter a valid Username and Password. Click Enter, and it will log you in to phpMyAdmin's Home screen. On the very right side, we see three different sections; Database server, Web server, and phpMyAdmin. Under Database server section, we can see various information related to MySQL Server. Server is installed on the localhost and connected with TCP/IP protocol. Type of the Server is MySQL. The version of Server is 5. 6. 17. We are logged in with Username root and the Server character Under Web server section, it is running on Apache/2. 2. 25 and PHP/5. 3. 28. On scrolling down further, we can see phpMyAdmin's Version is 4. 2. 0. Now, we will go all the way on the top, on the menu bar, and click on Variables. Upon clicking over here, right below over here, we can see various Variables and their Session value or Global value. For example, auto increment is 1 and auto increment offset is 1. Now, go to the top menu bar one more time and click on Charsets. Upon clicking over here, it will display all the Character Sets and Collations supported by MySQL Server on this system. Rahul also has to copy this entire list and send it to Mike. Now, one more time, go to the top toolbar and click on Engines. This is very important and I usually spend plenty of time reading details about Storage Engines. InnoDB supports transactions, row-level locking, and foreign keys. Upon clicking over here, it displays all the variables related to InnoDB. Now let's click on MEMORY. You can notice the message, "MEMORY is available on this MySQL server. " That means, you can configure tables in a MEMORY storage subsystem on this MySQL server. If you want any additional information, you can just click on the question mark right beside the title, over here. Upon scrolling down, it will also explain to you what you can do and what you cannot do with MEMORY tables and MEMORY storage subsystem. Now let's go back to phpMyAdmin and over here we'll click on Back. Let's see our very first row; it says FEDERATED and the Description is â€˜Federated MySQL storage engine'. If you carefully look at this, it is a little bit grayed out. That means this particular storage subsystem is not available to our MySQL server installation. To check that, let's click on this FEDERATED Storage Engine, and here it is. The message is clear and loud; "This MySQL server does not support the FEDERATED storage engine. " Rahul has to copy all this Storage Engine information, as well as the drilldown page, which we have seen along with that. Now, there is one more information, which Rahul has to send to Mike. Let's click on Status in the top menu bar, and it will bring up various statistics related to Server. Over here, the very first variable says, "Network traffic since startup:". It will also tell us how long MySQL server has been running, as well as startup timestamp. Upon clicking on the Query Status, phpMyAdmin will display details about various queries since the startup of this Server. Now, let's scroll up and click on â€˜All status variables'. This is the screen which Rahul should copy and send it to Mike. Mike has asked the current status of server, with all the statistics, and this screen has the current status of server, along with all the statistics. Once Mike receives details of this Status tab, along with Variables, Charsets, and Engines, it will complete the very first task he has given to Rahul.

Scenario 2: Variables
Now, as we have seen in Scenario 1, Rahul has prepared a report and sent it to Mike. Mike reviewed the entire report and gave a few suggestions to Rahul. Let's see what are the different suggestions Rahul received from Mike. Mike asks Rahul to check some of the important variables and made sure these variables are set to the value, which Mike is suggesting. For example, auto increment should be set to 1 and autocommit should be always on. The time format should be in the format displayed on the screen. Now, it's Rahul's responsibility to go to check all these variables and make sure the values are, as suggested by Mike. Let's see how Mike can do that in the next demonstration.

Demo: Variables
While you are on the phpMyAdmin Home screen, go to the top menu bar and click on Variables. Upon clicking Variables, it will bring up this screen. Our task is to check auto increment variable, which is this one, the value which we need is to be 1. And when we pay attention all the way to the end, we can notice that the value is 1; hence, this particular setting is perfectly fine. Our next setting was to validate is autocommit. Autocommit is over here. We need to make sure that value of autocommit is set to ON; whereas, in our case it is set to OFF. Click on the Edit link, which is in the middle of the row, and it will bring up this textbox. In this textbox, instead of OFF, type ON and click on the Save over here. Now, value of the autocommit server variable is set to ON. That means all the SQL statements, which are running on this server will be autocommitted. There is no need to restart the server, as this particular setting is applied as soon as we change over here. Now, our third variable to validate is time format. As there are lots of variables over here, we will go all the way on the top and type in time (space) format in this Filters. Right below this filter, we have a single variable display, which is time format. This is the variable which we were looking for, and the format of this variable is also as per Mike's suggestion. Hence, Rahul doesn't have to change anything over here for these variables. That's it! It is very easy to change various server variables for MySQL with the help of phpMyAdmin.

Scenario 3: Monitor
Scenario 3: Monitoring Every day at 6 PM India time, heavy traffic is observed by the database server. Mike asks Rahul to watch the server and give advice on performance. If you know, Performance Tuning is a very complicated subject. Mike has given this task to an intern, who is Rahul. Though Rahul is a smart guy, Performance Tuning or Monitoring can be a little bit difficult or a tricky task for an intern. What essentially Rahul has to do is to watch the performance and build an advise report. The question is, why such a critical task was given to an intern by an experienced developer, like Mike. Well, the answer is pretty simple. phpMyAdmin is also a very smart tool. It can help you to watch the performance, as well as help you build an advise report. Let's see how we can do that in the next demonstration.

Demo 3: Monitor
To monitor the performance of MySQL server, with the help of phpMyAdmin, Rahul has to just go to Home page and click on Status. Under Status, there is a sub-tab called Monitor. Click over here; it will give us the status of a few of the important variables and resources for MySQL server. For example, first is for Questions. It will display how many different queries, or questions, are running on the server. Right after that, there is a graph for Connections or Processes. Just below that, System CPU Usage and System Memory graphs. Rahul can watch this graph and if he sees any abnormality, immediately alert Mike for remedy. If you watch this particular graph follow-by, you will notice a change in the graph value. That represents that there are some activities going on behind-the-scenes on MySQL server. As soon as Rahul spots an abnormality, he has to inform Mike for necessary action. However, if you remember, Mike has also asked for a few advisory reports. Rahul can quickly build that by just clicking on Advisor submenu, under Status section. When you click over here, it will display various issues and their recommendation. For example, for this particular server, phpMyAdmin is suggesting that Uptime is less than 1 day; hence, Performance Tuning may not be accurate. This is true. I have restarted the server less than 2 hours ago. That means, any collection of data may not be accurate. That's why phpMyAdmin is giving the recommendation that MySQL server should be running for longer than a day. Similarly, there are other issues listed right below over here and their suggestions. One of the suggestions is, "The query cache is not enabled. " That means, currently MySQL server is retrieving all the data for queries from this. If the query cache was enabled, it would have greatly improved performance of this particular server. Rahul just has to copy all these issues and recommendations and send it to Mike. Now you can see, even though Rahul was an intern, Mike knew that with the help of phpMyAdmin, Rahul can quickly build recommendation reports for MySQL performance.

Scenario 4: Database Operations
After a few days, Rahul is now pretty good at various database-related operations. Mike realized that Rahul is now comfortable with various settings and configuration of MySQL server, as well as monitoring the performance. Now, Mike gives him a very interesting first task, where Rahul has to check the main database sakila and enable statistics on it. Statistics are very critical for the performance of a database server. Additionally, Mike also asks Rahul that he has to create a new database, FutureDB, which they will use in the future. In simple words, Rahul's task is to check the statistics on Sakila, as well as create a new FutureDB database. Let's see how Rahul can do that in phpMyAdmin.

Demo 4: Database Operations
Here we are on the Home screen of phpMyAdmin. Rahul has to click the Database section in the toolbar. Over here, it will see a list of all the databases which exists on this server. Right over here, you will see a Note; it says, "Enabling the database statistics here might cause heavy traffic between the web server and the MySQL server. " This is a friendly warning. That means, you should enable statistics when your MySQL server is not busy or during the maintenance window. Rahul has to enable statistics on sakila database; hence, click on the checkbox right beside the sakila database and click again on the link, which says "Enable Statistics". That's it; statistics of sakila database is now enabled. Now, our next task is to create a database. Click in the textbox over here, right below â€˜Create database', and type in the name of your database. In our case, Mike has asked the name of the database should be FutureDB. Type in FutureDB and click on Create. It will display a popup and the database is created successfully. That's it; it was that simple to create a new database. In the next module, we will see how we can create tables and other objects in any database.

Scenario 5: Create User
Mike and Rahul are working together for quite awhile now. Mike has been giving various tasks to Rahul and Rahul has been completing them successfully every single time. Rahul has gained a lot of trust of Mike. Finally, Mike decided to give him tasks related to security of database. Mike asks Rahul to create a user with SELECT permission but with no INSERT permission for their auditor. Though it looks as a very simple task, Rahul has to be very careful when creating a user. Rahul has to create a user with SELECT Permission, but without any INSERT Permission. If Rahul makes any mistake while creating a user, the security of the entire database can be compromised. Let's see how Rahul does this task successfully in the next demonstration.

Demo 5: Create User
Here we are again on phpMyAdmin's Home screen. This time, Rahul has to go to the Users section in the top menu bar. This is the place where we can create a new user. Click on â€˜Add user', and it will bring you to this screen. Let's add a new user with the name auditor. We're given permission on any host by specifying percentage over here. Now we'll type in the password in the next two text fields. Scroll down a little bit further. On the very left side, we have permissions SELECT, INSERT, UPDATE, DELETE, and FILE. We have to only give the user SELECT permission, but no INSERT permission. Hence, we'll keep INSERT not selected. As there is no mention of UPDATE and DELETE, we will also leave them as it is. This means we are pretty much granted all the necessary permissions, which we want to give to our auditor user. Scroll further down and click on Go. Now, we have created a new user successfully. That means user auditor can now only read the data and cannot do any other changes. Let's validate that by logging in as auditor User. Click over here to log out from root User and now type in Username as auditor and enter valid Password. Click on Go, and now we are logged in as User auditor. We can check that on the very right side over here. Let's go to our database sakila; expand various Tables. Go to Table, actor, and it will load all the data from Table, actor. Now, click on the Insert tab right over here. This tab will insert data in actor's table. Let's enter various values; we type in _id, first_name, last_name, and click on Go. When we hit Go, it will give us an Error. The Error says, This INSERT command cannot be executed successfully, because INSERT command denied to user auditor@localhost for table actor. That means, when Rahul created this user, he has done a good job. The auditor can only select data from all the tables, but cannot modify any data by inserting or, matter of the fact, updating or deleting any rows. Now, I personally feel Rahul is doing a pretty good job about administering MySQL database. Let's see what will be the next task for Rahul by Mike.

Scenario 6: Export and Import
Rahul has been interning with Mike for quite a long time. Rahul wants to get out of the role of intern and wants to be a regular employee of the Company, SQL Authority. For that, Mike is to grant him a promotion. However, before Rahul ever gets a chance to discuss about a promotion, Mike gives Rahul the very interesting task of Export and Import. Mike wants to keep a backup of the database in his central repository in the USA. He asks Rahul to Export sakila database so he can Import it in his local system. For that, Rahul is to Export the Database and give it to Mike, and Mike has to Import the Database. Now, in the next demonstration, we'll play the role of Rahul and Mike, and see how we can export and import any database.

Demo 6: Export and Import
In a previous example, we have logged in as auditor Username, which has limited permission. Hence, Log in with root Username for this demonstration. Type in valid Password and click Go. And it will bring you to phpMyAdmin's Home screen. We are to check backup of the sakila database. Hence, first we'll click on sakila database on the left Navigation pane. It will list all the tables and other objects on the right side; however, we will go to the Export tab in the top menu bar and it will bring up this particular screen -- Exporting tables from "sakila" database. The Export Method, which we will select, will be quick for this demonstration. Under Format, we can select various different formats over here; however, we'll keep the format for Export as SQL and click on Go. As soon as we hit Go, it will download a SQL file on your computer. If you want to do customization, you can select Custom as an Export Method. Now, Rahul has successfully exported the database and sent it to Mike. For the sake of simplicity, we'll be using the same installation of phpMyAdmin to demonstrate how Mike will import this database. For that, first we have dropped the sakila database. We will go to the Home page of phpMyAdmin, click on Databases, and click on sakila database. On the very right side, there is an option of Drop. Click over here and it will ask us for confirmation, if you want to drop the sakila database or not. Click OK, ______ server _____ server. However, if you are on a production server, dropping a database like that can be a career limiting move. Now, we will go back on the left-side navigation and click on New. Over here, we'll type in name of the database as Sakila and click on Create. We have now a new empty Sakila Database created. Select the sakila database on the left navigation and click on Import. There is one thing which we have to note over here; the Maximum file size you can import is of only 2 MB. Let's go and check the size of our sakila backup file. When we see the backup file size of sakila database, we'll notice the size is over 3 MB. Let's ZIP this file very quickly over here. And now, the size of the file is less than 1 MB. If we try to import the sakila file, which is over 2 MB, our phpMyAdmin will give us an Error. However, the sakila ZIP file, which is less than 2 MB, will import without any issue. Select the ZIP file, and click on Open. Now, click on Go. After a few seconds, you will notice that Import has successfully finished. Rahul has successfully exported the database and Mike has successfully imported the database.

Summary
Here we are, on our very final clip of the module, Database Operations with phpMyAdmin. Rahul has been doing a pretty good job since he started as an intern. Rahul has created various reports, modified variables, monitored performance, as well as done critical operations related to security, as well as exporting the data. Mike is very happy with the performance of Rahul; he gives him a promotion. That means Rahul is no more an Intern, he is now a Junior Database Administrator. We will see various tasks which Rahul will do as a Junior Administrator in our very next module, where we will discuss various table-related events, as well as a few interesting features of phpMyAdmin.

Table Operations
Introduction
Hi, this is Pinal Dave, and welcome to the module of Table Operations with phpMyAdmin. Let's see what we are going to cover in this module. In this module, we are going to discuss various table operations, which we are going to do with the help of phpMyAdmin. As you know from the previous module, we are discussing one story. This story has two characters, Rahul and Mike. In this module also, we'll continue the same story. We'll understand that a relationship, as well as focus on Rahul's aspiration to become a Senior Administrator from Junior Administrator, Mike will be giving various tasks to Rahul; for example, how to browse and edit tables, change data structure, Create, Read, Update, and Delete data, doing Advanced Search, maintaining table, Advanced Table Options, exporting and importing tables, and finally, how to track changes in any table. We'll walk through all the scenarios with the help of two characters. Finally, we will have a Summary, where we'll discuss if Rahul got the promotion or not. Let's start with Scenario Setup.

Scenario Setup
The scenario is very similar to what we have discussed in the previous module. Let's refresh the knowledge one more time. The Name of the Company is SQL Authority and the primary Business of this company is Movie Rental. The company has many stores across the country. The company also maintains a large database of movies. The company has an office in the United States of America, as well as in India. There are two primary Database Administrators; Rahul, who is Junior Administrator in India, and Mike is the Senior Administrator in the United States of America. In the previous module, Rahul was just an Intern; however, as an Intern, he has performed so well that Mike, who is his direct manager, has given him a promotion and he is now Junior Administrator. However, Rahul has dreamed to become Senior Administrator. He is very happy with the mentorship of Mike and going to do everything with full dedication to prove himself to Mike. Let's see, Mike has decided to give challenging tasks to Rahul to test his _____medal. In this module, there will be eight different tasks for Rahul to complete. If Rahul completes all of them successfully, Mike may give him a promotion. However, we'll only figure that out in the final slide of the Summary. Let's quickly review the scenario one more time. Name of the Company -- SQL Authority, with the Headquarters in the United States of America. The primary Business of the Company is Movie Rentals across the country. There are two offices, one is in the United States of America and the second one in India. There are two Database Administrators, Mike and Rahul. Throughout this demonstration, we'll be using sakila, which is the default database available with MySQL. You can freely download that from the location displayed on the screen. Now, let's start with our very first scenario in the next clip.

Scenario 1: Browse and Edit
Scenario 1: Browse and Edit As you know, Rahul is now Junior Administrator. He'll be getting more challenging tasks than what he used to get in the previous module. Mike asks Rahul to browse and edit actor table in sakila database and do the following tasks. Rahul has to delete actor with actor_id = 2, change the first_name of actor ADAM to AD, prepare Profiling of Table Query, and print first 50 rows of table actors. All of these tasks are new for Rahul. Let's see how he accomplishes each of them in the next clip.

Demo: Delete Rows
Here we are on phpMyAdmin Log in screen. Enter Username and Password, and click on Go. You will see phpMyAdmin Home screen. On the left side, under Navigation, we can see a list of all the databases. Mike wants Rahul to change the actor table in the sakila database; hence, we'll click on + sign right beside sakila and it will list four different objects; Functions, Procedures, Tables, and Views. Now, click on the + sign right beside Tables and it will list all the tables. Mike wants to make some modifications in actor table. Rahul will click on actor table. Actor table has four columns; actor_id, first_name, last_name, and last_update date. When you scroll up over here, you can see a query, which has produced this result. The result is displaying rows 0-24, that means a total of 25 rows; they belong to actor_id 1-25. This is because, over here, the number of rows is selected to 25; however, actor table has a total of 200 rows. If we change this dropdown to 250, the entire table will be displayed on this screen. Now, our very first task was to delete actor with actor_id = 2. With the help of visual inspection, we can quickly see, here is actor_id = 2. Upon clicking on a structure, we can also see that actor_id is an AUTO_INCREMENT column. That means, it is always increasing. Now, we'll go back to tab Browse one more time. It is clear from Tool information, there can be only one actor_id with the value 2. First, this column is AUTO_INCREMENTAL; hence, there's a good chance that there is only one column with id 2, and second, currently I have ordered this column ascending on actor_id. If there was any other actor_id with the value of 2, it would have listed it right below this column. We can go to the SQL tab and figure this out with the help of a WHERE query and confirm it; however, now as per the instruction of Mike, Rahul has to delete that row. It's very easy to delete the row by clicking on Delete. Click over here. It will ask us, Do we really want to delete a row with actor_id = 2? Just for double confirmation, it also displays as SQL, which it will actually execute behind-the-scene. Click OK, and it has given us an Error. The Error says, DELETE FROM â€˜sakila' WHERE â€˜actor' is not successful because there is a foreign key constraint on film_actor table. That means, we cannot delete this row until and unless we have all the REFERENCES removed from film_actor table for this actor. At this point of time, Rahul has two options; first, he can go to the film_actor table and delete all the rows with actor_id = 2 and come back over here and delete this row, and second, go back to Mike and ask if he really meant to do this. However, for the sake of this demonstration, we will go to film_actor table and try to delete this row and come back over here. Click on film_actor. Over here, you will quickly notice that there are many rows with actor_id = 2 and each of them are now associated with film_id on a second column. If we try to delete any of this row, it will be successful. That means, if we delete all the rows of actor_id = 2, we can go back and delete the row from actor table. Click Delete over here and click Delete one more time. If you keep on deleting rows, eventually you will run out of rows with actor_id = 2. However, the current display was only limited to 25 rows. It's quite possible there are more records with actor_id = 2. Click over here and select 500 as the number of rows to display. Now we can see there are many more rows with actor_id = 2. It's going to be very, very difficult for us to delete each of them one by one; hence, we'll click on Delete one more time and copy this entire DELETE script. Now click OK and go back to the SQL section over here. Now, paste your new query and modify it to delete all the rows with actor_id = 2 from film_actor table. Click on Go and it will ask you, Do you really want to EXECUTE this query? Click OK, and the query has deleted 18 rows. If you go back to film_actor table, now you will not see any row with actor_id = 2. Let's go back to the table actor. Click over here. One more time, click on Delete, where actor_id is 2. It will ask us, Do you really want to execute DELETE FROM this table? Click OK and it will successfully delete 1 row, where actor_id = 2 existed. However, we are still not done with all the tasks Mike has given us; there are three more tasks for us to complete.

Demo: Edit Rows
We have just completed our very first task about â€˜Delete actor with actor_id = 2'. Rahul has to still complete three more tasks. As he is now Junior DBA, he receives a little bit more complicated tasks than what he received earlier. Let's go back to phpMyAdmin and complete the rest of the three tasks. The second task is to change the first_name of actor ADAM to AD. For that, Mike has to search this entire table and find the actor with the first_name ADAM. We can either go back to the SQL tab and write the query for the same, or can just filter rows with typing ADAM over here. The result is empty. This is because, at this point of time, there were only 25 rows from table actor that were displayed due to this dropdown menu. Either you can change this dropdown menu to 500, as we know a table only has 200 rows, or can just simply click on â€˜Show all'. This will display the entire table on the screen. Now, one more time, you can type in ADAM. Our result set now contains two rows. What we need to do is to change the value of ADAM to AD. There are two ways to do that. First, let's double-click over and this particular display field will now change to an editable textbox. Change ADAM to AD, and click anywhere outside this box. The Success message is displayed, and behind-the-scenes phpMyAdmin has executed this UPDATE script. This is very handy when administrators are changing anything with the help of the phpMyAdmin interface. They can quickly copy this particular line and can send it to the developer. If they want to generate a PHP call for this DELETE statement, they can click on â€˜Create PHP Code' and it will display the PHP code for the DELETE statement. Let's go back to our screen. Now let's see our second matter. This time, click on this Edit link over here. And this will bring us to a very new tab of Insert. Even though we are doing UPDATE, phpMyAdmin's interface brings us to this particular tab for all the updates. Click on this textbox of first_name, change ADAM to AD, and now click on Go. Once again you can notice that phpMyAdmin behind-the-scenes executed the UPDATE statement and changed the row containing ADAM to AD. We can validate that by searching one more time in this entire table. Change the number of rows to 500, click over here, and type in ad. There are two rows with ad, but there are no rows with the word ADAM. We have successfully completed the second task given by Mike. In the next clip, we will see how Rahul can accomplish the last two tasks given by Mike in a single scenario.

Demo: Profiling Query and Print Table
So far, we have completed two of the tasks from Scenario 1. Now, we will do the rest of the two tasks. We will be preparing Profile for a Table Query. As Mike has not asked details for any specific query, we will just take Profiling for table actor itself. Additionally, Mike has asked to print 50 rows from table actor. Let's go back to our phpMyAdmin screen, where we left off from the previous clip. Here we are in phpMyAdmin. Currently, I have selected actor table, hence, we are seeing details from actor table on the right side of the screen. Profiling means more detail about Query and how Query is executing. You can see that for actor table by clicking a checkbox next to profiling. When you click over here, in a brief second it will load detailed profiling for the entire table and query. On the left side, we can see details related to various States of Query, and on the right side, we can see a Summary by each of the states. So, in simple words, there were 16 stages for this query. The Starting of this entire query took 32 microseconds and Checking Permissions has taken 2 microseconds on the top of it. Opening Tables -- 7 microseconds, and Initializing Query took 11 microseconds. You can see details related to Lock, Optimizing, Statistics, Preparing, Sorting, Executing, and Sending Data. The End of the process, along with Query End, Closing Tables, and Freeing Items also took some amount of the time. Finally, Cleaning Up took 5 microseconds. Now the same data is displayed in terms of percentage on the very right side. The same 16 steps are now ordered based on percentage of the time they have taken to execute the query. When we scroll further down, once again the same view is available in the form of a pie chart. The largest pie of this chart belongs to Sending Data. Right below that, we can see our table actor. What Rahul has to do is to take this particular data, along with the pie chart, and send it to Mike. If Mike wanted profiling of any other query, Rahul can quickly do that as well. He has to just click on Inline and type in the new query right over here. When he hits Go, we will see profiling of that new query. We can also turn off profiling by just unchecking this checkbox. Now, the final task of Scenario 1 was to print the first 50 rows from table actor. For that, Rahul has to just select the number of rows to 50 over here, and scroll down a little bit. Over here we will see two options; â€˜Print view' and â€˜Print view (with full texts)'. Rahul has to just click over here and it will bring up a new window for printing the first 50 rows from table actor. Here is the entire query, which MySQL has executed to retrieve the first 50 rows. This is also displayed in the very next line over here as well. When you scroll all the way down, you can notice a Print button. Upon clicking this, it will send Print command to your printer. By now clicking over here, it will print 2 sheets of paper. Well, that's it. The last one took a little bit of time, but Rahul at the end was successfully able to complete it.

Scenario 2: Data Structure
Scenario 2: Data Structure. Mike asks Rahul to change the data structure of actor table in sakila database and send data statistics for review. This is now a little bit more than just changing data in a single table. What Rahul has to do is change the data type of first_name column to varchar(50), check distinct values of first_name, add column middle_name to the table actor, and send table statistics at the end to Mike. All the four tasks, Rahul can do it, if he knows how to use phpMyAdmin for changing data structures. In the next clip, we will see how Rahul will attempt it.

Demo: Change Data Structure
Here we are on the Home screen of phpMyAdmin. We'll first select actor table from the left Navigation pane and click on Structure. Upon clicking on Structure, it will bring up the details for actor table with regards to schema. Here is column first_name. The data type of first_name column is varchar(45). Mike has suggested that the data type of varchar(45) should be (50). To do that, Rahul has to select particularly this column by checking this checkbox and click on Change. Change will bring up editable fields for the first_name column. The data type we just have to leave as it is to VARCHAR; hence, we'll not make any change over here. However, if we have to change the data type, we can easily change this to any other data type from this dropdown. We'll just click on Escape; hence, it will not make any changes. The Length or the Value is supposed to be 50, so we'll change this 45 to 50. There was no mention of Default by Mike; otherwise, we could've done that right over here. Changing Collation, as well as other properties, are also possible on this particular screen. Now, let's go back and hit Save. Table actor has been started successfully. That means our changes are saved and now first_name column is of varchar(50). We have just completed the very first task from Scenario 2. The next task is to check distinct values of first_name column. For that, either we can write a SELECT statement under this tab, or we can just go all the way on the right and click on the More link. The very last option in this link says â€˜Distinct values'. Click over here, and it will execute a query behind-the-scenes. Query is listed over here. Essentially, it has created a table with two columns. The first column will indicate how many times any name appears in this entire table. If you remember, we have changed two names from ADAM to AD, hence AD, and the Value is 2. That means there are two rows with the name AD. Similar information is displayed over here. Rahul has to just copy this and send it to Mike. It is very easy to find distinct values with the help of phpMyAdmin. Now, let's go back to our Structure tab one more time. Here is a very interesting task, which Mike has assigned to Rahul. Rahul has to add a new column into this table, which is middle_name. For that, Rahul has to change now the structure of this table. Right below this structure, there is an option to Add columns. We can add one or more columns altogether over here. In our case, we just have to Add 1 column; hence, we will leave this as it is. The option is to add the new column â€˜At End of Table', â€˜At Beginning of Table', or â€˜After' any column. Honestly, if you follow Relational Database Fundamentals, the order of the column in the table should not matter. In the real world, I would've not cared where I add any particular column, as at the end of the day, I'm going to select the column with the help of column_name from my application. However, for the sake of this demonstration, we will add a middle_name column right after first_name and before last_name column. Select this option and click on Go. It will open up, once again, an editable field. We'll type in middle_name, data Type we will keep as VARCHAR, and Length we will keep as 15. The Default, we will keep it as NULL. The reason is simple, we are going to add a new column to this table, and if you do not specify any Default, database may give us error. We'll not mention any other value and MySQL Engine will presume all the necessary values. Click on Save, and it will add the new row successfully. The script to add a new row is displayed over here. Now, once again click on Structure, and it will bring up the structure of table actor. Over here, we have middle_name column right between first_name and last_name. Let's go back to Browse one more time, and it will display the contents of actor table. A visual inspection suggests to us that between first_name and last_name, there is a middle_name column. Rahul has successfully completed this task as well. The final task is to send table statistics. For that, Rahul has to click on the Structure tab on the top menu bar and just copy all this information right over here. This is the statistics of the table, which Mike has been asking. The Data is of 16 KB and Index is of another 16 KB. The Format is Compact, where Collation is utf8_general_ci. The Next autoindex is 201 and these statistics were created on May 15, 2014. Well, with this, Rahul completed all the four tasks in Scenario 2.

Scenario 3: Create, Read, Update, and Delete
Scenario 3: Create, Read, Update and Delete Operations. Mike knows that Rahul is an expert DBA, but not an expert developer, however, he still gives him task to write insert, update, delete, and select statements on actor table. Well, Rahul has been doing this task with the help of phpMyAdmin, but this particular time, Rahul has to just provide all the SQL statements, which he has been seeing on the screen. Let's see how easily Rahul can accomplish this task.

Demo: Execute SQL Scripts
Here we are in phpMyAdmin. We have selected actor table. This time, we'll go to the SQL tab on the top menu bar. Select over here and it will display us a textbox, where we can write SQL queries. Mike has asked Rahul to send insert, update, delete, and select scripts for actor table. Hence, as there are no specific WHERE conditions or further detail, it seems like Rahul has to just generate simple templates for various operations and send it to Mike. It's pretty simple, with the help of phpMyAdmin. Here are various tabs. Let's select on the very first tab of SELECT * and it will give us a script about selecting data from actor table. WHERE is equal to 1 indicates we are going to retrieve all the data from actor table. This is absolutely optional; however, phpMyAdmin generates it for the sake of completeness. If you just want to select tables with all column names, we can just click on this tab. If you want to write an INSERT statement, we can select this tab; it will generate a template for the INSERT statement. Similar results for UPDATE statement, as well as DELETE statement. Rahul just has to copy all the SQL statements and send it to Mike in one big file. Afterwards, Mike can review all the statements and can make necessary suggestions.

Scenario 4: Advanced Search
Scenario 4: Advanced Search Mike asks Rahul to search rows from film table where rental_duration is less than 5 days and length of the movie is less than 80 minutes. Essentially, Mike is giving Rahul a little bit more complex tasks now to resolve it. Second asked from Mike is to replace string â€˜ALI' occurring anywhere in any column from actor table to be replaced with â€˜ADI'. This time, Rahul's tasks are a little bit more complicated. He has to do Advance Search and also perform Search and Replace. Earlier, it was very clear, Rahul has to replace first_name. However, this time, string â€˜ALI' can exist anywhere in the entire film table. Let's see how Rahul can accomplish this task.

Demo: Advanced Search and Replace
Here we are on phpMyAdmin's Home screen. This time, we are to perform Advanced Search. Let's click on film table. Now, here we have to build a complex scenario, where we have to retrieve all the films with rental_duration less than 5 days and length of the movie is less than 80 minutes. Now, to build this advanced query, let's click on Search over here. Under the Search table, we can see three different options. First is Table Search. Over here, we can type in any values for any column and can do our _____development Search. Let's use this one to accomplish our very first task in this scenario. Our first condition is that rental_duration should be less than 5 days. Let's come to this particular row of rental_duration, click over this operator, and select the < (less than) operator. Right beside that, under the Value text, type in 5. Now, we have to think about length. Once again, our condition is less than 80 minutes; hence, we will select this operator field of length column and select < (less than). Please notice that we can select any other operator based on our business query. Over here, I will select < (less than) and type in 80 in this textbox. Now, I will scroll all the way down and select Go. It will bring up this result. Let's scroll up all the way and over here you can notice a SELECT statement with two WHERE conditions; "SELECT * FROM â€˜film' WHERE â€˜rental_duration' < 5 AND â€˜length' < 80" This is the query and here is our result. Rahul has to take this result and send it to Mike. Now, let's click on Zoom Search. This is very, very interesting. Over here, we can also build the same query, which we have built under Table Search. Let's select rental_duration and select operation < (less than) 5 and select length operator < (less than) and enter 80 in the Value. Now, click on Go. It will give us this interesting result. The result is no more in table format; the result is in the format of the graph. You can select any data point and can see _____development values over here. When you click â€˜How to use', it will bring up some help. Each data point represents a data row. Now, we'll click on Find and Replace. Find and Replace brings up a very simple interface. The first textbox is for Find and the second is for Replace. Here is the list of the Column, under which we can do Find and Replace. Though, we may want to replace our string from all the columns; however, only a few columns qualify for Find and Replace. The user cannot do Find and Replace on numeric data type columns. We can only do Find and Replace from the columns with the data type strings. Now, first let's select title Column. Over here, we will do Find and Replace of word ali with adi. Click Go, and it displays us a Preview of Replace. In our case, there is not a single place in the Title column with string â€˜ali'. Let's go back. This time, we'll select description column and type in â€˜ali' to Find and â€˜adi' to Replace. Click Go, and now we have many rows in our Preview results. Here is our first example. Over here, there is the word Australia; it contains â€˜ali'. If you look at the right-side column, it states Australia, because now we replace ali with adi. A similar Find and Replace has happened in California. You can notice â€˜ali' is now replaced with â€˜adi'. Now, scroll all the way down and you will notice a Replace button. Let's click over here, and it has replaced the word â€˜ali' with â€˜adi' in the description column. The SQL statement, which was used to do this operation, is also displayed over here. Rahul has to just lay down this SQL statement and send it to Mike with a note that he has performed the task of replacing â€˜ali' from â€˜adi' from the description column. He still has to do the same tasks for the other two columns; rating and special_features. Once he's done with all the four columns, he just has to send the report to Mike. Even though Mike has given a very complicated task, with the help of phpMyAdmin, Rahul has successfully accomplished that.

Scenario 5: Table Maintenance
Performance is always very critical when it is about database and database applications. Mike now trusts Rahul way more than he used to trust before. He asks Rahul to check on the various tasks to maintain their tables. Maintenance keeps the tables tidy, as well as give them optimal performance. So in a nutshell, Mike has just given instructions to Rahul that he should maintain his tables. In the response to that, Rahul does various tasks, like checking them regularly for errors, defragmenting them from any performance-related issue, analyzing them, as well as optimizing them. Let's see how Rahul does with four of these essential tasks on his important tables in sakila database.

Demo: Table Maintenance
Here we are on phpMyAdmin Home screen. Let's select the film table. The film table is one of the most critical tables of sakila database. It contains various important details about films. Now, we'll go to the top menu bar and select More. Under this option, we will see operations over here. Click on it and it will bring up this screen. Here we have four different sections. Let's look at the section which is on the bottom right. There are four options; Check table, Defragment table, Analyze table, Optimize table, and Flush the table. Let's click on the very first -- Check table. Upon clicking that, it says â€˜SQL query has executed successfully'. And here is our answer. We have checked this film table and it looks okay. The syntax for the same is also available over here. Well, if you are not familiar with what Check does, you can simply click on the question mark right beside the Check table, and it will bring up all _____development help, which you need. The explanation is right over here. CHECK TABLE checks a table for errors. Upon scrolling down, we can also see what other message types can exist. Now, let's click on phpMyAdmin one more time. The second link is for Defragment table. Let's click over here, and very quickly it has defragmented our table. Though, there is a message that "MySQL returned an empty result set". This is because, when you execute the command for defragmentation, it does not return us any errors. However, the query has executed successfully and our table is now defragmented. Upon clicking the question mark, it brings up help related to this particular command. It clearly explains in the very first paragraph, Random inserts and deletes can cause performance issues, and by defragmenting them, we improve their performance. Now, click on the very first tab to go back to phpMyAdmin. The third link is to Analyze the table. â€˜The query has executed successfully' and the status is once again OK. Scroll it back down and click on the question mark. The ANALYZE TABLE analyzes and stores the key distribution of the table. This creates lots of positive impact on your performance. MySQL uses this distribution to create various joints and execute your queries efficiently. If you are into performance tuning and query optimization, please refer to Module 1, where I explain what are the other courses you can watch to learn more about how to tune your MySQL. Now, let's go back to phpMyAdmin. The fourth option which we have is Optimize table. When we execute this, it also gives us the status right below that. The status says, "Table does not support optimize", but this particular table does not support this command. Hence, there are no operations over here. Clicking on the question mark help, it further explains that what actually optimization does and why it does not support certain kinds of data storage subsystems. Go back to phpMyAdmin and over here there is one more option of Flush the table. You can click this anytime and it will not bring you any results. Do not worry; flushing does not mean you are going to remove the data from your table. That task can be done from the same screen when we click on deleting the table. Apparently, Flush just removes them from the memory. It is like clearing your cache. You can read about that further when you click on the Help file. Here it is explained in detail. Now let's go back to phpMyAdmin. Scroll down further and pay attention to â€˜Delete data or table' section. This section is very critical. Make sure you accidentally do not click on TRUNCATE or DROP, unless you really want to truncate the table or drop the table. To avoid the accident, these two particular links are given in red font color. Everywhere else, you can notice the color of the link is blue; however, in this section, the color of the link is red. Well, Rahul is frequently going to come to this section and make sure that he has maintained all of the critical tables of the sakila database.

Scenario 6: Table Options
Scenario 6: Table Options If you are a Junior Developer or a Junior Database Administrator, you know that there are certain decisions that do not make sense; however, you still carry them out because your manager or senior member on your team has instructed. Here is a similar case. Mike asked Rahul to change auto_increment to 500 for actor table of sakila database. Rahul can always go back and ask questions to Mike, why they are doing that; however, just like all of us, sometimes it's just okay to follow instructions and not ask questions. Rahul makes a similar decision. He is going to change Auto_Increment of actor table to 500. Let's see how he does that.

Demo: Table Options
Here we are on phpMyAdmin's Home screen. Let's first select actor table as we have to change the auto_increment value for this table. Now, go to the top menu bar and select operations. On the top right corner, we can notice table options. Further down, in this section, we can notice AUTO_INCREMENT. Currently, AUTO_INCREMENT is set to 201. That means whenever the next row is inserted into actor table, it will have actor_id as 201. Now, Mike wants that to reset to 500. Let's change it to 500 and click on Go. It is done successfully. Now, we will go to actor table and see what is the last value over there. Select Browse, and now click on â€˜Show all'. Scrolling it down all the way, we can notice the last row inserted is with actor_id = 200. Now, let's insert one more row into this table. Click on Insert and it will bring us to this screen. Over here, we'll first enter first_name as Pinal, we'll skip the middle_name, and enter last_name as Dave, and finally, we'll leave the last_update date as it is with the default value of CURRENT_TIMESTAMP. We'll not enter any other value in this actor_id column, as we wanted to fill it up with AUTO_INCREMENT default. Go all the way down and click on Go. The message says it has inserted 1 row and inserted row id is 500. Let's verify that; go to Browse and scroll all the way down to see what is the actor_id of the last column. And here it is; the actor_id of the last column is 500. This is because, under Operations, we had set the AUTO_INCREMENT value to 500. The AUTO_INCREMENT value now is 501, as we already have inserted the row with actor_id = 500. Here it is; Mike asks Rahul to change auto_increment value and Rahul has successfully changed that.

Scenario 7: Export and Import
Scenario 7: Export and Import Table rental is frequently updated tables of sakila database. Mike asks Rahul to export rental table and send it to him every day for review in Excel format. Remember, in the previous module, Mike has asked Rahul to export the database in SQL format, as he wanted to import that in his own system. However, this time, we just want to review the rental table; hence, he's asking that in Excel format. Let's see how in the next clip Rahul exports the rental table in Excel format.

Demo: Export Table in Excel Format
Here we are, on Home page of phpMyAdmin. Let's select rental table. Now, we will go to the top menu bar and select Export. There are two options. First is Quick and the second is Custom. We will go over the Export method Quick, as that's what we need for this example. Right below that, we can see our dropdown for Format. Over here, we will select CSV for MS Excel as our Format option. Now, we'll click on Go. Within a few seconds, you can see on my Chrome browser there is a file called rental. csv. Double-clicking the file, it opens up Excel and I can see my result sets are now in Excel Format. To complete this task, Rahul just has to send this file to Mike.

Scenario 8: Tracking
Scenario 8: Tracking This is one of the most challenging tasks, which Mike assigns to Rahul. Film catalogue is very important for rental business. Hence, Mike asks Rahul to track all the changes in the film table of sakila database and send frequent reports to him. It seems like Mike is asking Rahul to spy on film table. If there are any changes, Rahul has to send them back to Mike and Mike wants to see what changes are made on this table. Well, that means Rahul has to track changes on film table and send reports to Mike. This is a very, very critical task for Rahul. Rahul aspires to be Senior Database Administrator, just like Mike, and between his promotion and him, there is only one thing -- this task. Let's see if Rahul can accomplish this task or not in the next demonstration.

Demo: Tracking
Here we are on phpMyAdmin and Rahul wants to track all the changes on film table. Let's select the film table. Now, we'll go on the top menu bar and click on Tracking from More options. Upon selecting this option, it presents us this screen. Right over here, there are two sections; first is â€˜data definition statements' and second is â€˜data manipulation statements'. As Mike wants to track pretty much everything, we will leave all of this checked and now click on â€˜Create version'. Over here we can notice that sakila database film table is now being tracked. The Status is active and the tracking was Created at this point of time. There are two additional links, called â€˜Tracking report' and â€˜Structure snapshot' right after that. Now, we'll click over here and edit some data from this table. We'll make some changes in this description field. Over here, we will say "Modified to track tracking". Year of release will change from 2006 to 2014. Now, let's scroll down and click on Go. And 1 row is affected. Now, we'll go to the Structure section, and over here we'll try to change the structure of the title column. Select over and click Change. Currently, the Length of title column is 255. We'll make it to 250 and click on Save. The table film is altered successfully. That means we have made one change in Data and one change in Structure. Now let's go back to the Tracking tab and click on â€˜Tracking report'. And it will list all the changes, which we have done. On the top area, it talks about â€˜Data definition statement'. That means when we make a structural change, at that point of time these three statements were executed. Earlier, the data type of title column was VARCHAR(255) and now it is VARCHAR(250). Additionally, we have changed one of the lines and changed the description to â€˜Modified to track tracking'. Under the Data manipulation section, we can see that change is also carried out. Rahul should export all this information and send it to Mike. For that, you just have to select Export as SQL dump and click on Go. The file is now downloaded to local machine. Rahul has to take this file and send it to Mike. And now, let's click on â€˜Structure snapshot'. This is a snapshot of our database schema right when we started tracking. Due to any reason, if we revert back to our original version, this structure snapshot can be very helpful for code reversal. Let's click on Close. And we are back on this screen. Now, if you make any changes to film table, all of them will be tracked under this report. You can create multiple versions of tracking any table. This particular feature is useful when you have a different release cycle in your production environment. In simple words, if you want different milestones for tracking changes, multiple version tracking of any table may be useful. Looking at all this, it seems like Rahul has completed all the tasks assigned by Mike. Let's see in our very next clip if he gets the promotion or not.

Summary
Here we are at the very last clip of this module. phpMyAdmin is a very powerful tool; the user can do lots of administrative, as well as development tasks with the help of it. Rahul has demonstrated excellent skills in using phpMyAdmin. Mike is pretty pleased with his performance. Hence, he gives him a promotion and now onwards, Rahul is Senior Administrator, just like Mike. That means Rahul can configure phpMyAdmin, as per his own choice and preference. We will see how Rahul exercises his own preferences with related to settings in our very next module.

Home Screen Settings
Introduction
Hi, this is Pinal Dave, and welcome to the module of Home Screen Settings with phpMyAdmin. So far, we have talked about Database and Table Operations with phpMyAdmin. However, we did not touch much on the settings of phpMyAdmin itself. In this module, we are going to discuss the same with the help of Scenario. Scenario is about two database administrators, which you are very familiar with from the previous module, Rahul and Mike. We will talk about how Home Screen Customization can help efficiency of the database user. Let's start with our scenario.

Scenario Setup
Scenario Setup So far, we have been discussing the story of two Database Administrators, Rahul and Mike. Both of them work for a Company called SQL Authority, and the primary Business of the Company is Movie Rental. The Company also has a large database of movies. Mike from the United States and Rahul works from India. Both of them are now Senior Administrators. At the beginning of this course, Rahul was just an intern; however, with his hard work and sharp skills, he became Junior Developer and now he is Senior Administrator. As Rahul becomes Senior Administrator, just like Mike, Mike suggests to him that he should start taking ownership of the various areas. One of the areas Mike suggested for Rahul to focus is on Setting Up phpMyAdmin. So far, Rahul was working with the settings configured by Mike. Now, as Rahul is also Senior Administrator, Mike wants him to lead those efforts and make phpMyAdmin as per the taste and need of Rahul. Let's see our scenario and the _____development task in our very next clip.

Scenario 1: Home Screen Customization
Scenario: Home Screen Customization Mike has trained Rahul very well and now Rahul is independent. Mike asks Rahul to configure phpMyAdmin as per his choice and need; that means now, without approval of Mike, Rahul is to customize phpMyAdmin. He will have to pay attention to Setting in Main Panel, on the Navigation Panel, and a few Miscellaneous Settings. Let's see in the next demonstration how Rahul configures phpMyAdmin to suit his needs.

Demo: Home Screen Customization - Features
Here we are on the Log in screen of phpMyAdmin. Let's type in Username root and Password for our server. Click Go and now we've logged in into Home screen of phpMyAdmin. The Settings are right over here in the top menu bar. Click over here, and we are on the Settings screen. Now, click on Features. This is the area where you set various features of phpMyAdmin. There are four sections; General, Text fields, Page titles, and Warnings. Version check, I always keep this particular setting checked, because I want to make sure that when I'm logged in, I am using the latest version of my phpMyAdmin. For example, if you go to the Home screen of phpMyAdmin, here is the information of phpMyAdmin's version. For example, the version which we have been using is 4. 2. 0. However, there is a minor update available for phpMyAdmin, which is 4. 2. 1. Let's go back to Settings again. Here is another important setting, Login cookie validity. I personally keep phpMyAdmin open for pretty much the entire day and I never leave my computer unattended. That means, in other words, it's totally safe if I keep a higher value for my login cookie. I prefer that every single time I come to phpMyAdmin, I am already logged in. If you are on a public computer, or you have to leave your computer unlocked and unattended for a longer time, you should keep this Login cookie validity to a very small number. That means, any user who tries to log in into phpMyAdmin, after this many seconds, will have to provide a valid username and password. Here is another very important feature, Show only listed databases. Currently, when we log in, we see pretty much every single database on the navigation panel. If you want only selected databases to be visible when you log in, you can go type in your preferred database name over here and click on Apply. Now, on the left side, incidentally you can see only one database, which is sakila. This is very important when you have a lot of different users working on one database. phpMyAdmin will hide all the other databases; this way it reduces the risk of accidents. If you keep this field empty and click Apply, it will display every single database on your server in the navigation panel. Also, if you want to hide a few databases, you can use the next option about â€˜Hide databases'. For example, I will type in here â€˜test' and click on Apply, and it will immediately hide test database. You could also use regular expression over here, instead of the literal name. Rahul will have to play around with this number and various datas to make these settings of his own. If he's working on sakila database only all the time, he should keep that one visible and hide all other databases. The very next setting is â€˜Text fields'. Currently, when we added the CHAR field, it displays textbox just like this. If you change that to textarea, it will show us a larger text area than a single textbox, just like this. Additionally, there are a few settings related to Maximum and Minimum size, as well as number of the columns. Adjust these settings as per your screen resolution and your business needs. The very next setting is related to the browser title. I usually do not change anything in these settings, as the default settings are good enough for our needs. phpMyAdmin shows some of the warnings and you can disable them over here. Now, we will see Settings related to queries in our very next clip.

Demo: Home Screen Customization - Queries
Here we are in phpMyAdmin under Settings tab. Click on SQL queries. It will bring up this screen, where we can configure various details related to SQL queries. If you'll notice in earlier modules, whenever we change any of the detail or structure of any table, in database phpMyAdmin will display the SQL script right above it. This is very useful for _____ and developers, as it gives us an idea of what it has learned behind the screen. However, due to any reason if you want to hide that, you can just uncheck this box and phpMyAdmin will stop displaying SQL script up on any updates. Dropping tables or databases can be very dangerous. If you try to execute any queries with the DROP command, phpMyAdmin will ask users with a prompt if they really want to drop that object. You can disable that prompt by just unchecking this checkbox. In reality, I strongly recommend that you keep both of these checkboxes checked. There are a few of the settings related to SQL queries right below over here. Currently, queries below 100 characters can be displayed in phpMyAdmin. You can easily change that setting over here. Now, click on â€˜SQL Query box'. SQL Query box contains control of visibility of the links shown in SQL Query box. For example, when you go to any query, at that time there are a few links displayed right below this query. Control for the display of this link is in the Settings of SQL Query box. I usually keep them checked. In the next clip, we will see settings related to the navigation panel.

Demo: Home Screen Customization - Navigation
Let's click on Navigation panel under Settings menu. The Navigation panel is the panel on the left side of this screen. By unchecking this textbox, we can hide the logo of phpMyAdmin on the top of the Navigation panel. Here is an interesting feature, Enable highlighting. I like to keep this one On, because quite often I work with a remote server. The visibility of mouse is not good when you are logged in remotely. This particular setting highlights objects right below the cursor. Hence, you can see where exactly your cursor is very easily. Now, let's click on Database. Over here, you can control â€˜how' and â€˜how many' databases you want to display in your Navigation panel. Clicking on a table, it also brings up a very similar structure. You can also configure Main panel. Over here, you can configure various startup options. For example, keeping options enabled for â€˜Show statistics' displays database and table statistics on that screen. We can also control a few of the settings related to database structure on this screen; I usually leave them unchecked. The main important settings area is Browse mode. Remember, we were only able to see 25 rows when we were clicking on Browse. That was controlled by these particular settings. We can change this 25 to 50, 100, 250 or 500, and every single time we click on Browse, we will see the number of the rows based on this setting. The Default sorting order is displayed as SMART, but you can also set ASC or DESC. The explanation of SMART, ASC, and DESC is just given right besides the setting. And here is the final learning; go to â€˜Manage your setting' one more time and pay attention to this particular box of Reset. If you change something in phpMyAdmin and do not like how phpMyAdmin is behaving, you can just come here and click on Reset. As soon as you click Reset, it will reset all of your settings. You can validate that by looking at the phpMyAdmin logo over here. I have turned it Off under the Navigation panel setting, but as soon as I reset the settings for phpMyAdmin, it has turned back On itself. Just like any other user, Rahul will take some time to come up with his own preferred settings.

Summary
Summary. phpMyAdmin can be customized as per the needs or the taste of the user and it provides consistent user experience across the browser and computers. Here is small after-story. Mike is very pleased with the performance of Rahul. Rahul and Mike are now very good friends. They often talk with each other and make sure they make the right decision together.

Summary and Resources
Summary and Resources
Hi, this is Pinal Dave, and welcome to the module of Summary and Resources. In the very first module, we introduced Rahul and Mike. Rahul was an Intern and Mike was Senior Database Administrator. Mike is a good teacher and he mentored Rahul very well. Now, we are in the very last module and Rahul is also Senior Administrator, just like Mike. They both work together and the organization, SQL Authority, is doing very well. This ends the story of Rahul and Mike. Here are the lists of the software, which you will need to run phpMyAdmin. First, you will need a Web Server; we used Apache in this example. You can download that from this URL. Right after that, we installed PHP Server and you download that from this URL. MySQL was the Database we used in this demonstration. It is available to download from the URL displayed on the screen. Finally, we have used phpMyAdmin. You can also download that from the URL displayed on the screen. Remember, all of these softwares are free and open-sourced. I strongly encourage you install them in the order I have listed on the screen. All the examples, which we have seen in this course, were built with the help of database sakila. Sakila can be also downloaded from MySQL's website. It is the database of movie rental activity in multiple stores; it is a database of movie rental activity. If you want to learn database MySQL, here are the courses available in the Pluralsight library. MySQL Fundamentals Part 1 and 2 teaches you the basics of MySQL. MySQL Workbench is another IDE for MySQL. MySQL Indexing and Query Optimization are Performance Tuning-related courses. Well, that's it; thank you very much! If you have watched all the modules and worked all the examples along with me, you have mastered phpMyAdmin. If you have any questions, you can post them in the Discussion Forum at Pluralsight, or reach out to me on my social media handles. Once again, it was a great journey together!
