resource will be at the root levell of repo javascript-arrays-collections.zip



At the core of using data collections within JavaScript is a thorough knowledge of sets, maps, and typed arrays. In this course, JavaScript Arrays and Collections, you will learn how to create and apply data collections to your web applications. First, you will understand how to apply more advanced array methods to your current arrays. Next, you will explore how to store unique data using sets. Then you will learn how to store data using key and value pairs with maps. Finally, you will discover how to work directly with binary data using typed arrays. When you are finished with this course, you will have a foundational knowledge of data collections within the JavaScript language that will help you as you move forward to building more efficient web apps. Software required: A text editor like Sublime or Visual Studio Code.

Course Overview
Course Overview
[Autogenerated] everyone. My name is Jeff Baton. Welcome to this course on Java script of raising collections. I am the founder and head trainer at learning Jo Jo. Do you understand the basics of a raise? But you want to know where to go next? Or you looking for ways to better store and to work with data inside of your Web APS Acma Script six has introduced some new and exciting ways. Toe work with a raise and data collections, and we'll be covering what you need to know in this course, in this course will walk through some hands on examples of how to work with data collections. Typed a raise in advance to ray methods using Acma script six. Some of the major topics that will include in this course are making a raise more functional, with some advanced methods. Working with new data collections introduced a neck musk Ripped six, which include sets that give you the ability to store unique values and maps the store data using key and value pairs and finally type to raise, which allow you to work directly with binary data for faster performance and processing. By the end of this course, you'll know how to work with a raise, type to raise and how to store. Unique data was sets and key value pair data using maps. Before beginning this course, you should be familiar with the basics of JavaScript, including working with the race. I hope you'll join me in this turning toe learn array in collections with this Java script arraign collections course at plural say.

Methods for Working with Arrays
Module Introduction
[Autogenerated] everyone. My name is Jeff Bats, and welcome to this course on JavaScript to raise in collections. Now we're going to be covering different kinds of methods that you can use when you're working with a raise and different kind of collections like sets and maps. And also, we're gonna be talking about type two race. So really, we're gonna dive into these different types of data storage where we can go in and store some of the data that we're working with with our different applications. So let me go through before we dive into this course and let me talk about what is not covered and what is covered in this course. And so what is not covered is the array basics. You should be coming into the scores basically understanding the basics of a raise and how to create an array and how to add things to the rays. How basic properties of your raise as well as push and pop. Being able to add things and and take things away from an array as well as being able to access the basic race using dot notation or whatever you need to tow access the basic parts of an array as well. You should be familiar with that as well as four loops. You should be familiar with four loops and how to generate over an array using a four loop. Now what is covered in this courses will be talking about advanced methods that you may have not actually come across yet, like list of Find Phil and other types of methods like that. We'll talk about new ways to iterated through an array will talk about for each wants to talk about four of and being able to generate in those different methods, which actually make it a whole lot more simple to operate through in a rain. We'll talk about these new data collections like sets and maps and what are they and how you can store information inside of sets and access information from the sets, as well as access information from the map using keys and values. So really, we're gonna dive into that in a certain section as well. Now we're also going to be talking about specific methods for those sets and map, being able to access and being able to use the values or the keys in other types of methods like that. And then finally, we're going to wrap up this course talking about type two race, type to race, have very specific use cases, and they allow you to access a binary data and get to that data. If you're using a P, I's like canvas Web G l or anything like that. So we'll talk about what type to raise our how to create type to race and how to access information from the type to raise as well. So that's really what we're going to be covering in this course. It's really talking about data. So we're gonna be using JavaScript to create these different types of sets and maps were going to be using these more advanced methods in a raise like list of and find and other things like that. If you're ready and this sounds like a good course for you, let's go ahead and dive in. But if you're not ready and you need to cover some of the basics of a race, I had to recommend you go in and make sure that you check out the Java script fundamentals course before coming here. All right, let's go ahead and get started

Reviewing the Sample Project
[Autogenerated] before we dive in to start talking about using some of the advanced methods with a raise, let's go ahead and review the sample project that we're going to be working with now. This sample project is essentially a cell's tracker, and so we have our carved rock fitness and whatever. We get a new cell. We're going to enter that cell into here, so we see our yearly revenue. We also see our last three months revenue as well. We see are different department cells and how they're doing on the different apartment cells. And then we see the recent cells as well. Most of the course will be working with this monthly cells, and we'll be adding the different cells in there, and we're going to be generating at this chart and using the chart, too, Really graft the cells that come in. We're going to have this motel here, And if I click on this model and I can enter an information about the cell and that will generate the new data inside of this project, so to generate the charts were actually going to be reviewing a framework called Chart Js and we're going to dive into that in the next video. It's not complex to use, but we'll make sure that we know how to use it. And then we're going to use that to actually display that data, and the data is gonna come from our raise. It's also going to come from our sets. It's also going to come from our maps. So we're going to work with the different data formats and show you how to actually go in and and create the data inside of those different formats and then access the data and use it to generate these different graphs. Now, in the next video, you'll download a starter project and you'll download the finished project. The finished project is the project that we use throughout the entire course, and so if you want to go in and take a look at the code to see what was used throughout and you want to see the final vision, you can go ahead and take a look at that. And that will be the finished project for this section, and then we'll have a finished project for the next section and a finish project for the last section as well. Now a lot of the layout has actually been built using bootstraps. So we've attached to some of the bootstrap files so we can use the different layouts. That's how we get the responsiveness as well. That's also how we get some of the functionality like the models, and we have different rose. We also have difference columns that we can use in order to create these different types of layouts. And so you can see here you can go through. It's marked up. You can see where the recent sells comes in. You can see where the new cell entry, which is a motel, and that pops up with a new cell that allows me to actually enter in that information and go from there. So we're not going to be working a lot with the HTML, and we're not going to be looked working a lot with the pages dot Js. But if you wanted to go in and customize the style, you're more than welcome to go in and do that. We are going to be working with this page dot Js. This is really where we're going to be putting in all of our code and working with a code and building the chart Js and everything like that is gonna be inside of this page dot Js All right, so let's go ahead and dive into chart Js and make sure we know how to build these charts using charge, Yes.

Quick Intro to Chart.js
[Autogenerated] So now we're gonna take a look into a framework that allows us to create charts easily called Chart Js. Now, we're not gonna dive into everything that you could do a chart Js but we're at least going to use it to update and visually display our data. So let's go ahead and take a look at the chart J s code and what we can do with that. Now, download the project, files the module to project files and start out with the 01 starter project. If you wanted to take a look at the finished project, you can go ahead and do that as well. But just to play it safe, I like to go ahead and copy and paste that onto my desktop and then close that out and start working with this. Let's go ahead and open this up in our code here. So I'm using sublime text. You can use visual studio code. You can use Adam whatever you wanted to. This is essentially what we're going to be working with. So I'm gonna go ahead and actually open this up as a preview as well. Some double clicking on the folder and I'm gonna go ahead and double click on the index dot html and right now, we don't have any data in there. We don't have any graph or anything like that. So we want to do is we actually want to build the grass and I'm gonna come down here into the index dot html and the first thing I'm going to do is go ahead and create our monthly cells. This is going to be a bar chart. So let's go ahead and just type in canvas. And now we're going to say I d equals monthly cells. That is going to be our I d. That's how we communicate to it in the Java script. And we need to have two more attributes, which is going to be the width. And it's also going to be the height and the height that's going to be 300. The width is going to be 400. All right, so let's go ahead and copy this and this is going to be the same thing for our pie chart. But we need to change the I d to something else. I'm gonna go ahead and just say D E P T Cells department sells. All right, so let's go ahead and open up our page dot Js and swinging to reference those two different objects using the i. D. Now this is a little bit different than normal. We need to add on some additional context when we referenced this. And so let's go ahead and just say, this is our charts. These are charts here, and we're going to say, Let's see t X equal documents. We move this out of the way so you can see it better so document dot get elements Bye. I d. And then we're gonna say inside of there were gonna be looking for our monthly cells, which I can come into the index that html copy where it says monthly sales. Go ahead and paste it right there. And so let's just end that with the semi colon. I'm gonna copy that and paste it down one line. We're also going to do this for our pie charts. So let's go ahead and say pie C t X here, and instead of monthly cells, we're gonna go back into our index that HTML we're gonna grab the department cells, come back into page dot Js there and then just pace that there as well. Now, that's how you would get it Normally with an I d. However, we need to do something additional. When it comes to charge A s, we actually need to say get context and then within there, we need to actually get the two D context. And so we're working with the Tootie Element because with charge, Yes, you can do three d. You can do to tea as well, so we need to make sure that we define it as the to deal. So we have those two things that we can communicate to. So from here, we essentially just need to actually go in and build out our chart now for the sake of time because we're not focused on Chart J. S in this course. I'm just gonna go ahead and copy that, and then I'm going to come come in here on line five and I'm going to pace that, and I'm gonna make sure that this is my bar chart and this is my monthly sales and the monthly sales. Let's actually do monthly sells chart here, and that is going to create a new chart and it's gonna give it the type of bar. And then it's also going to have labels that says October, November and December and then our date of which is going to be 12 19 and three Now this will associate the October with 12 November with 19 and December with three automatically. It will also add on the background color. This is how we define the color with RGB A also the border with right now we're defining it as zero and there's a couple different options that you can do with the bar chart. And right now we're just starting out at zero. That's where the bar chart itself is going to start out. So if I went ahead and save that and came in here and previewed it, you could see that the bar chart is right there, and all I need to do to update that is actually come in here and change this to a different data point and you can see automatically adjust. Really, We're just creating, and we're feeding an array into this bar chart. In order to create that data, I'm gonna come in here and actually copied the pie chart here and you can see the difference between the pie chart and the bar chart. Let's come down here and just call this one pie and then just paste that in right there and you could see you were just creating a variable. And the reason why I'm using violence that have led is because that is the way that is defined in Charge A s and their documentation. So I'm just sticking with their documentation there. But everywhere else I'm using light here. All right, so here we're also passing in labels and we're passing in the data as well. If I save that and hit preview, you can see that I am pulling up my pie chart here and I'm pulling up my bar Char. That's essentially what you need to do in order to work with Chart Js and to feed the data. We're going to be working with different arrays and methods in order to update the labels and update the data. So we'll be coming back to these data points often throughout the course. In the next video, let's talk about creating a ray through a list of arguments

Create an Array from a List of Arguments
[Autogenerated] So let's talk about creating an array from a list of arguments. And so this is a method that we can use in order to actually create this or race. So what we're going to do is come up here and we're going to just create an array here. So I'm gonna say, let and then save monthly cells and this is going to be our monthly cells that contains all of the data for it. And then I'm going to create in a ray here by simply just saying array of This is a method that we're calling that will take the list of arguments and it will convert it into an array. So I'm gonna give it three different arguments. I'm gonna say 12 9 and then I'm going to say three there, and that's essentially it. I've created this courageous by simply calling a method and passing in some parameters. If you were to create an array just by saying a ray, for example, you still have to create it in a variable. But if you were to say array and then open close parentheses and then just say five, that is actually not going to create an array with the five parameter. With the date of five in there, it's going to create an array with five different spots. That's what we're avoiding here is by using the of method work Reading Array with three different spots in the first value is going to be 12. The second values going to be nine and the third value is going to be three. So that is how you go in and pass in the parameters instead of just creating how many spots there coming down here. All we need to do to update the monthly cells is copy that and come down to where it says data right here. And I could just basically get rid of that array of data right there and copy and paste that in there. And now, if I was to go ahead and preview this, you can see that it's going to use my 12 9 and three array in my monthly cells instead of using the array that was there. That way I can have it be more dynamic, and I can bring in the data from a form or something like that and then have an update automatically from there. I'm gonna go ahead and do the same thing with the labels. So I'm gonna say monthly labels and I'm going to say equals array dot of ants. Now I'm going to pass in strings instead of numbers. And so the 1st 1 is going to be October. The 2nd 1 is going to be in November, and then the 3rd 1 is going to be December, so we're passing in three different strings there. And now I'm gonna take this monthly labels. I'm gonna copy that. Get rid of this array where it says labels right here and we'll go ahead and pace that there. Now, if I was to go ahead and preview this, you can see that it has October, November and December, which is what it was before. But now it's actually being pulled from this array. Instead, let's do one more thing. I'm gonna make sure that these air together and I'm gonna create two more a raise here. The 1st 1 is going to be department sells, so we're going to State Department, sells equals and then array of and then I'm going to say 12 nine, three, and then I'm going to say, Let's departments, labels equals array off and then we'll pass in. We're gonna have different types of categories, so we'll say hiking will also say running. And then finally will say hunting. All right, now if I basically just copy that and come down here and then a let's update this variable to chart just so we can talk to the chart here and we're going to say the labels is Let's grab the labels right there. The department labels. I want to go ahead and update this right here. And then I'm gonna go ahead and grab the cells and then I'm going to update this right here, and that's it. So let's go ahead and hit. Refresh now so you can see now where a pie chart is updating. Our bar chart is updating as well, and we've been able to create the erase pretty quickly just by passing in the parameters

Using the Spread Operator with Arrays
[Autogenerated] The next thing that we're gonna be talking about is the spread operator with a raise. Now, this comes in handy tremendously. Before I show you how to use it, Let's go ahead and actually create a function that will add the yearly total. So I'm gonna say function and they were going to say, ad yearly total. And then I'm going thio allow three different parameters. And so I'm gonna say, ABC, I'm gonna make this more useful as the course goes on here. But let's just go ahead and accept those and then I'm going to return a plus B plus. See, I'm gonna take all these three parameters. I'm gonna Adam together, and that's what it's going to return. So let's see how this is working. So I'm gonna go ahead and just create ah very well here, and I'm gonna say, Let's yearly total equal, And then we're gonna say and Yearly Total. We're gonna call that function, and so I'm just gonna go ahead and pass in those monthly sales there. If I was to go ahead and alert, Dez will have a problem here and let's go ahead and see what that problem is. so I'm gonna say Yearly total and let's go back in and preview this hit refresh and you'll notice that it has 12 93 undefined, undefined. The problem is, is it's not separating out. These as parameters. It's not taking okay, the 1st 1 and that's gonna be the first parameter than the 2nd 1 That's gonna be the second parameter and so forth. We actually have to define it as separate parameters. And so I would have to come in here and actually say, Well, let's pass in the 1st 1 And then let's pass in the 2nd 1 and passing the 3rd 1 and so forth, so there's an easier way to do that. That's where spread operators comes into play. All you have to do to use a spread operator is if you have this array, you just add a dot, dot dot when you're passing that in, and now it will take each of these individual items and it'll pass it in as separate parameters, and that's it. So if I go ahead and come back in and preview this, let's hit Refresh. You'll notice that it has 24 now, which is the total of 12 9 and three. So it just automatically does that for me, grabs him in and uses them as each individual parameters. Well, let's go ahead and actually update our total instead of alerting this, let's actually go in and grab our label. So I'm gonna come up here where it says yearly revenue. I have this yearly total i d. So I'm gonna come back into page dot Js and I'm going to go ahead and call this yearly total of label. Let's actually just say nearly label here and just say equals documents dot get element by I d. And we're gonna go ahead and get that element, which is yearly Total. That's the I. D. Inside of the HTML. So after that has grabbed and it's done the addition. We're gonna go ahead and say yearly label dot inner html, and then we're gonna say equals. And then we're gonna cap me a dollar sign on there. And then after that, we'll go ahead and add on the yearly total, so it's going to update our label here. As soon as we hit Refresh, you'll notice. There it is has 24 it's automatically updated for me. So that's how you can go in and update that label and use the spread operator. So let's go ahead and actually update our monthly cells to be a lot more than just these small numbers. I want to go into the thousands here, so I'm gonna say 12,000, 9000 and then let's go ahead and say 3000. Now, if I come back in here Hit refresh, you'll notice that the total has gone up a lot more. Now I'm gonna come in and do a couple other things and I'm going to down here. So let's go ahead and add on to this a little bit more. So I'm gonna go ahead and create three different variables and I'm gonna say October numbs. And then I'm going to pass in an array of and then let's go ahead and just update random numbers here, 13,000 and then let's do 9000 there and now I'm gonna go ahead and copy that because I want to have three different ones. The 1st 1 is going to be October. The 2nd 1 is going to be November, and then 3rd 1 is going to be December and let's go ahead and update that they used to be random numbers, and I just wanna have different numbers to work with here. So I'm gonna go ahead and say that when it's going to be 4000 let's make sure we have 4000 there, all right, I want to just go in and calculate all of these different totals. The's a rolled my different parameters that I'm passing in, but I want to take all of those parameters and calculate him into one total. So I'm going to say, Let's total equal And they were going to say array off and then we're gonna pass in each of those numbers now. I don't have to actually pass in each individual one. I could actually use the spread operator to pass in each of those so I can say dot, dot, dot, copy, October and then say dot, dot, dot again go ahead and copy November and then say dot, dot, dot again and then copy in December. Now that's gonna basically create all of those. And if I wanted to, let's go ahead and alert total. And now if I hit, save and preview you could see it does alert all those different numbers, but it doesn't actually Adam together. So if I wanted to Adam together, I would have to have each of them actually go through the ad yearly total so I can go ahead and just pass in each of those and then just make sure I have it on each of those there and they're going inside of the parentheses there. And there we go. So now if I come back in here and hit refresh now we have three numbers. So now we have those three numbers. But let's go ahead and say Add total. But let's actually come in here. Well, let's do a spread operator here and then also at total to that spread. Operator, do one more thing here, hit, refresh, and now you can see I get my total. So I've been able to use the spread operator to get all of these numbers pretty quickly without having to type in each one or reference each location of each one as well. It's a pretty quick and easy way to be able to go in and to update that now, if I wanted to also come in here and at other ones. I don't have to stick with just the spread operator. I can add other ones and use the sprint operator as one of the parameters there. So that's an introduction to the spread operator. Let's go ahead and move on to the next section.

Using Array.find and findIndex to Find a Value
[Autogenerated] So we're going to use a method called array dot find and find Index to find a value. So let's go ahead and come in here. And what we want to do is we want to set up a button. First of all, if I come back into my example, you can see that we have this ad cell, but I wanna have a button that says find 1000. I want to find the 1st 1 that's over 1000. Let me go ahead and make sure that the 1st 1 here and we're gonna loop through all of those. Let me come in here and on the monthly sales. Let me sure make sure that the 1st 1 is under 1000. So we know that we're finding the one after that. I'm gonna come back into the code here, and so I'm gonna go into the index dot html and I'm gonna copy this ad button and I'm gonna go ahead and pace that. Let's go ahead and change this ad cell over to find over 1000. So that's what that button is going to do. And it's gonna find the first cell over 1000 Now I'm gonna go ahead and add on an on click and in the on click, we're gonna call a function called Find over 1000 in that open and close parentheses and we need to go ahead and create that function. So I'm gonna come back into page, not Js. I don't want to use that alert anymore. So I'm gonna go ahead and get rid of that alert and then we're gonna come down here and then just call that function and make sure that we come back into the index that html I'm gonna copy that function, come back into page dot gs and that just pace that function there in that open, close curly brackets and there is our function. So now let's come in here and find the first value. That's over 1000. I'm gonna store this inside of a variable, and I'm going to say first 1000 and now I'm going to say equals and what we're going to do is we're going to search the monthly cells, so I'm gonna say monthly sells dot find, and we're going to look for in elements. We're going to return an element that is greater than 1000. That's really what it's going to go in. It's gonna go through and find an element that is greater than 1000 element being value. Essentially, that is going to do now. I'm gonna come in here and alerts, and we're gonna say Alert 1st 1000 and then end that with a semicolon. Now let's go ahead and preview this. You can see where it says Add cell and then we have to find over 1000. Let's go ahead and click on that. You can see that the first value is 9000. Even though the first value is not actually 9000 it's 500 but we're looking for that specific one that's over 1000. So if you wanted to filter out, you know anything that's above 500 or so forth, you can do a method like this. So the next thing that we're going to do is we're actually going to come in here and find index. So instead of find, let's say we wanted to get the actually index number. So remember that in an array, the index starts out with zero and then goes to 1234 and five. So if you need to get the index for any reason you can use instead of fine, you can actually add on index, and then it will give you that number back. So if I come in here and hit, refresh again and then click on, find over 1000 it's going to give me back the number one keeping in mind that the 1st 1 is zero, the 2nd 1 is one. All right, so that is how you actually go in and use the find and find index to find a number or a location oven elements.

Using Array Fill
[Autogenerated] So let's say you wanted to take an array and then just put all the numbers back to zero, for example, that he could use something like a ray film method. And we're gonna actually cover that in this video. But before we do, we have a problem. If I come back into my example on a hit refresh here. If I click on, find over 1000 it does Give me that alert. If I click on close, it's gonna pop open that motile. So I'm gonna go ahead and just get rid of that model. And the way that I do that is by coming back into the HTML, I'm going to get rid of where it says data ta go all the way down to her, says example Motile that will get rid of it. That's a bootstrap thing that will just make sure that that doesn't pop up. All right, so let's go ahead. And while we're here, we're gonna copy this and we're going to go ahead and pace that and we're going to change the label here to reset 20 is gonna take that numbers, and it's gonna reset it back to zero and let's go ahead and call the function of resets numbers or just reset numb there. And I'm gonna go ahead and copy that function, coming to page dot Js and let's go ahead and create the function of recent number. Now it's going to go into the monthly sales, and it's going to essentially fill all of them back to zero. So I'm gonna say monthly sells dot fill and then I'm going to pass in the value that all of them are going to be set out. So I'm gonna go ahead and say zero there and now what I want to do is I actually want to update that where we have monthly cells here. I want to update this chart in the way that I could do that in Charge. A s is just by copying the name of that's variable there and then just paste in it and then just clicking updates, open close parentheses and that will update the values and it will reset it all back to zero there. So let's go ahead and hit. Refresh, and you can see that we have our numbers, but I have this reset to zero and I could click on that. It takes all of them down to zero. So that's just a useful method. To be able to say, OK, I want to start back from scratch And then, as you start to add more than we'll start to add more and start to fill out the chart and everything like that. So just a useful method that you may need to use to reset data or to set data across the board on an array.

Methods for Iterating through Arrays
[Autogenerated] Now we're gonna be talking about different methods to be able to iterated through an array. We're going to focus more on for each in this video, and in the next section we're gonna be talking about four of and these air new methods to be able to go through each of the difference elements inside of the array and work with that, our race. So let's go ahead and come in here. And really, we have some inefficient code. We have this ABC and it's returning the value. But if we had additional parameters like this one right here, it's gonna throw off that coat. It's not goingto work. And so what we want to do is we want to modify this code a little bit. And so I'm gonna come in here, and I'm going to just modify this to accept one parameter, and I'm gonna go ahead and get rid of this return, and I'm gonna get rid of this line right here, or at least comment out the line Line 20 and I'm gonna get rid of this yearly total right there as well. I still want this yearly label that's going to go in and update the label. But we need to do some calculations with this before it actually gets updated. So we'll just leave that there. All right, So coming in here, let's create a variable. First of all, so I'm gonna say, let's nearly total, and by default, it's going to be zero. All right, so now I'm gonna come in here, and I'm gonna say yearly total is equal to every time this function gets called. It's equal to whatever the perimeter is that's getting past in, plus the current amount of yearly total whatever amount it. Maybe at that time. And that's really all that I want to do inside of that function. Now, what I want to do is actually want to loop through this Monthly sells a rain, and I actually want to pass in whatever the parameter is right here. I want to go ahead and pass that in. Now I can simply just go ahead and just type in or paste in the name of the array and then just do it for each loop across all of that. And that's how we do it. For each just four and then a capital E for for each there. And now if I wanted to call a function for each of these different parameters, all they have to do is copy in that's function name into the parentheses there. And what it will do is it will basically go through this function, and we'll take the yearly total ad on whatever the Promenade is to the yearly total. And then it's gonna go ahead and update our total there. And since we have this label right here, after all that calculation is done, it's gonna go ahead and update the inner HTML to that yearly total. That's it. So now I can come in here and hit refresh, and you'll notice that automatically updates for me so I can see here that it has 12,500. If I came back into my code here and I went ahead and updated that amount to say, OK, let's pass in another parameter like 400 here hit Refresh. You can see that automatically updates. So it's just a more dynamic way to be ableto handle any amounts that this array may have, and so they'll just go through each of those rays and I will go ahead and add that to our total in the next section, we're gonna be talking about the four of Loop and how to use the floor of Lupin sets, but it's going to work exactly the same way inside of a race, so we'll focus on that in the next section. But let's go ahead and talk about what we've learned about in this section and wrap everything up before we move on to the next section.

Module Conclusion
[Autogenerated] so we have covered a lot in this section. So let's just quickly review what we've learned here. We've talked about the course overview, and we talked about what will be learning in each of the different sections and what we won't be learning. And some of the difference basics of a raise that you may need to go back and review from a different course. We also talked about chart Js and howto update Charge A s. We talked about howto ad in the different values of Charge A s as well. We talked about array of being able to create an array from a list of different values. We talked about using the spread operator as a quick way to be able to add all the difference values of Honore inside of parameter or something like that. We also talked about a Ray find as well as a very find index. If you wanted to find the specific in next, we talked about using a Ray Phil to be able to fill out the content of the arraign like I mentioned before. That's mostly if you wanted to reset it all to a certain number and then finally We talked about Iterating through an array and using the four each to be able to go through and quickly take all the values and use all the values to do something more efficiently. So that's really what we've covered. We talked about Maur Advanced features for this standard a race. But now we're gonna go in and dive into working with sets, which sets are data collections, and we can use sets for being able to handle data more efficiently and adding on some additional methods that we can do. That's beyond our standard array methods that we have here. So really, we're gonna dive in the sets you're going to become familiar with sets in the next section in the section after that will be talking about maps and how they differ and some of the different methods you can use and maps and then finally typed a race. So we're just scratching the surface. Let's go ahead and jump onto the next section

Working with Sets
Module Introduction
[Autogenerated] Now we're gonna get into different types of data collections that we can work with That goes beyond a raise in the first set of data collection that we're gonna be talking about is set. So we're gonna be talking about what sets are how to actually work with sets out, add content to sets, how to remove content from sets, a cz well, how weaken iterated through sets and really grab out the values of the set. So that's really what we're gonna be focused on in this section before we dive too deep into it. Let's just talk about data collections as a hole in the next video.

Reviewing Data Collections
[Autogenerated] before we dive into sets, let's just make sure that we understand what data collections are now. Data collections can be found in other languages. We have Python, which uses list as well as topples as well as dictionaries. And so it's just different ways to be able to store data and work with the data. Java uses list as well sets and maps similar to Java script that we're going to be learning about here in a little bit as well. Askew's so really uses hashes and erased. So data collections, air, really not anything that's new to programming languages, so we're gonna be focused specifically on the new enhancements of JavaScript. And so that's ECMO Script six, which was released the 17th of June in 2015. And it brought a whole lot of new features with it, and one of the main features that it brought was new data collections. Now a data collection, stores and structures, large amounts of data for easy access. So it's a way to organize the data and a way to be able to get that data and use that data, and it provides methods to be able to access and use that data. So before Atmos script six, the only thing that we could really use was a ray and objects inside of javascript. So, Emma, Script six gave us sets as well as maps and then week sets and weak maps. So in this section, we're gonna be talking about sets and weak sets. In the next section, we're gonna be talking about maps and weak maps and went to use maps and when not to use maps and when to use week map since, like to use sets and so forth before we dive into that, though, there is a couple more things that I wanted to talk about, and that's really the data types that we can work with. And so there's really eight different types of data types that we can work with. There's billions. There's Knowles. There's undefined data. There's also number data. There's big entered, your data, their strings, and then they're symbols as well as objects. You can work with objects now. Seven of these data types are actually primitives, and that's important to know the final one is object. Now, primitives really can't be changed. You can't change what number one actually stands for, but objects can actually be changed. And so their value in memory, which could be referenced by an identify rhe so an object itself you could have stored inside of a set. And you can reference that with that idea of the object. And we're gonna be working with those different objects. We're gonna be working with the different sets and these different types of data values. And so we're going to work about primitives. We're also going to be working with objects and then storing each of those data types inside of our sets. So let's go ahead and actually introduce sets. And let's talk about sets in the next video.

Introducing Sets
[Autogenerated] before we get into sets and creating sets and adding sets and adding data and other things like that. I wanted to talk about what sets are in general now. Sets enable you to store unique values of any type, whether it's a primitive or whether it's an object. So all that primitive data that we talked about in the last video we can store that type of data inside of a set. Or we can create an object and weaken reference that inside of an object as well. So really, one thing that helps set stands out is this data type, although it could be similar to an array, must be unique values. And so that means If I have this set of data and I decide to inter content into that data, then I could say OK, one of the pieces of the data is 50 to another. Piece is 1 83 and other pieces 200. Another piece of 52 another piece is 47. Well, let's take a look at this because what happens is 52 is actually repeated, and so you notice that the first number is 52 as well So what happens is if you start to generate or you start to look for a value of 52. It'll go through all of these different values, but a little notice that this is a duplicate, and it will ignore that value and just move on to the next value. So it does need to be unique values. You can have duplicates in there, but it will completely ignore Ms Oh really doesn't do you any good. So if there are a set of numbers, where you need to have these unique values than sets are actually a good way to be able to store that data and to make sure that you do not have any duplicate numbers if that's what you need. But they could be of any type, and so we can have the numbers. We can have strings. We can have functions. You can actually have a function inside in the set that will call and return of value as well. You can have objects, and then you can also have just, you know, whatever other big enters or any other type of number there, and all of that could be stored inside of the set. Now sets have their own properties and methods as well. The properties air a little bit more limited. Instead of a ray dot length, you actually have a set dot size, and so you can determine the size of the set by using that property. Now the methods that actually gives us a lot of methods to work with So we can add, we can clear out all the sets and so we don't have toe settle the values or pop all the values or anything like that. We could just clear him out. We can delete certain data from the set. We can also reference the different entries in the set. Weaken it a rate through the set, using for each weaken check to see if the set has a certain type of value just by using has and then we can reference all of the keys and the set. We can reference all of the values in the set as well, so those are the different methods that we can use in order to work with the sets, and that's really the power of the senses that gives us these additional methods and allows us to work with sets in Maur functional ways than we could with a race. So let's talk about actually adding and removing values from a set. So let's get back into the code and start working with that.

Adding and Removing Values to a Set
[Autogenerated] we've talked about. What it said is we've also talked about different properties in different methods that you can use on a set. So make sure that you download the sample files for this module. Make sure that you also store the sample files from the last module. Make sure that you start with a 01 start a project file and copy that onto your desktop. I'm gonna go ahead and double click on that, and I'm gonna double click on the index that HTML here just to make sure that I have that up. And I'm also going to open this up inside of sublime. Really? What's changed is mostly the module that pops up. We have our month that is saving it inside of a month. I d. We also have our item amounts, which is going to save it inside of a I d called item amount. And then we're also calling a function called ad cell open up page dot Js. We have our reference to that new amounts so we can grab the value from that form. We also have the reference to the new Month, and I've also commented out the chart the pie chart as well. And then I've removed some of the code from the last section as well. So we're gonna add some new code right here. The first thing that we're going to do is we're going to create a constant and that we're going to say, OK, this is going to be monthly. Cells were going to store our monthly cells inside of here, and this is going to equal a new set. We're also going to do the same thing for our monthly labels are gonna go ahead and say this is also equal to a new set. Now that we have that there, we want to add our content in assumes that button is clicked. Now we're calling the function on that ad sell button called ad cell. So let's go ahead and create that function and we're gonna name it, add cell I copied and pasted that in there and then open close curly brackets there. We're going to say it monthly cells is going to add a ______, and that value is going to be our new amounts and then dot value. Now, keep in mind that this is actually going to be passed in as a string. We're going to convert it into a number later. But for now, just keep that in mind, because when we alert it or when we try to find it, it's actually going to be a string and not a number. We're going to do the same thing here with labels, so we're going to go ahead and say, knew month and that's going to be the value, so not value And there we go. Now I'm going to alert a message letting them know how big the actual monthly cells is. And so I can use that by using the property of this set so I could go ahead and say You have entered in and then we're going to add on monthly cells dot size and then we'll add on one more thing. So it's going to say you have entered in a number of cells, so two cells or three cells or whatever it is there, let's go ahead and make sure that this is working into the values are being interred in. So I'm gonna come back in here and hit refresh, and then I'm going. Thio, entering the month will enter in the value and then we'll click on Add Cell. Now it says that I've entered in one cell, so let's go ahead and close that. Let's add it again And let's say this is going to be November and this is going to be 1500 if I click on at Cell here. It now says that I've entered in two cells. Well, how do we get the value of those cells? I can come back in here and I can say consul, dot log and then save monthly cells. That's going to alert the content of the monthly cells as soon as I added. So let's go back in here and hit, refresh and click on Add Cell and the 1st 1 is going to be October. The 2nd 1 is going to be 1200. It's still going to alert that message for me, but let's go ahead and right click and go down to inspect element. And now if I come in here and click on this, then I go down two sets and it says 1200 right there. So that's adding a new cell. But what if we wanted to delete something? Well, we can actually delete something by using the delete method. If I come back into my index dot html, I'm gonna go up to this button here that says Phil Cells. And we're gonna change this to deletes Val, it's gonna call a function called Delete Val. I'm gonna copy that. And so we're going to save delete. Now, I'm gonna come back into my page dot Js and let's go ahead and create that function. Delete valve, open close parentheses, Open, close, curly bracket. Now we're going to say monthly cells were going to dot deletes, and that is going to delete the value of 1500. Keep in mind, I'm putting this inside of a string because we have not converted into a number. And so I'm really trying to find a string that is in the amount of 1500. But let's console that log the amount again. So let's say we're gonna consul dot log of monthly cells just so it alerts it again there. So if I go ahead and hit refresh, let's add our 1st 1 as 1500 and then let's add our 2nd 1 as 1200 we'll say the month is going through November and that is going to be 1200 then click on Add Cell. If I right click and go down to inspect Element, it's going to have those two different values there by expand this out. We have the 1500 we have the 1200. If I click on delete cells, nothing really alerts there. But if I go in to inspect Element and then go into the console that log, it will only give me 1200. So that's how I get rid of that. Now there are a couple different ways to actually add content into this. I'm gonna actually create just a test one here and say test equals new sent. If I wanted to come in here and add several different values that can actually change this and so I can say test dot ad and let's go ahead and add five and then dot ad and six as well. And so that's one way to just change the different values into adding to that one set. Or if I'm creating the set, I can actually create values right inside of here is well just by passing that inside of brackets and that is going to be by initial values inside of there. So that's another way. But you can also pass in other values. You can pass in strings and then you can also pass in objects. And so, if I wanted to go ahead and create like an object here, I just open close curly bracket there and then I can give it a value of let's say, test colon and then give it a string of this. Now, if I come in here and consul dot log, let's just say tests there. If I'm gonna add it inside of the sets actually need to add inside of brackets like that hit, refresh. And now, if I right click, going to inspect elements you could see that has now logged that object. So those are different ways to be able to add, to be able to delete and to be able to work with sets. So in the next video, we're gonna talk about iterating. So we're gonna be talking about going through the different values and finding certain ones and updating contents based off the values that we get here. So we'll talk about that in the next video

Iterating a Set
[Autogenerated] So now we're gonna be talking about Iterating to set how we actually go through a set. And we used to set values to do whatever we need to. So let's go ahead and come in here and clean up the code a little bit. I'm gonna get rid of this test and I'm also going to get rid of this alert in this Consul inside of ad sales. So the first thing we want to do, though, is we want to use this four of loop. We have already talked about the four each loop, but we're gonna use this four of loop, so I'm gonna say four and I'm gonna say, Let's and then we're going to say total of monthly cells were gonna iterated through monthly cells and we're going to assign each of those to this total value. Now, what I can do is I can actually open this up instead of curly brackets or a shortcut if I'm just gonna do one line of code is I can say consul dot log And then I can say total, this is going to go through each of them and it's going to log the total. Let's go ahead and preview this. I'm going to hit, refresh, and then click on Add Cell. Now I'll enter in the value of 1200 at this point it should only have one values. If I click on add cell, it's going to console dot log that one value, which is 1200. Well, I could do a whole lot more, but I don't want to do this on the ad. I actually want to do this on this fine cell or this is really going to be our figure out our total. So let's go ahead and go into our index dot html. Let's find that button where it says fine cell. And instead of find over 1000 were going to say add total and we're gonna change the label to add total here as well, just so it makes more sense, they're So now we need to create that function now. So I'm gonna come back into page dot Js and I'm going to come down below this delete value. I'm gonna save function at total open close parentheses Open close, Carly bracket. And there we go. Now what we want to dio inside of here is we want to do a four loop and we're going to say four and then let the amounts of monthly cells and then inside of here I want to go ahead and open and close curly bracket. And now I'm going to alert just to make sure this is working, we're gonna alert the amount here. I'm going to save that hit refresh. Really, Nothing should happen at this time. Let's go ahead and actually add in some values and then she say, Add value and then let's add one more and then 1500. Now, if I click on that, it'll say 1200 then it alerts to 1500 it will loop through each of those. That way, when I click on that, it's basically going to update this label. That's our end goal is to go in and update that label. So what we want to do is any time that this ad total actually gets added here, what we want to do is initially set back the yearly total to zero. If we don't do this, it's actually gonna take the value, and then it's going to add on to that value so here. We're gonna say yearly total is equal to the amount plus yearly total. So we're gonna take whatever the current amount is as we're starting to loop and we're going to add on the new amounts here. Now I'm going to update that yearly label. We have this yearly label as well. That's going to update the label for the element called Yearly. Total were going to say dot Inner HTML is equal to yearly total and there we go. We have a problem, though, so let me go ahead and preview us. Let's start to add in a value and I'm gonna say October, we're gonna add in 1200 for the 1st 1 And then let's add in November, and this one is going to be 1500 and then click on add Cell. Now, if I click on add Total noticed that 1500 gets added, 1200 gets added. But zero gets added as well because what's happening is remember, this is the issue that we're running into in the last video is the value from that form is a string. It's not actually a number. So what happens when you add one string to another string. Well, that uses concoct nation. So it actually takes that string and adds it to the other string. And really, we're just displaying a string. At this point, we want to work with this as a value and not a string. So what we have to dio is when we actually add this value to our monthly cells is we want to parse the integer. We want to grab this value from the form, and we actually want to Parson and create an integer. And so that's really what we do is we wrap the new amounts into a value. Now if I hit, save and let's come back in here and hit, refresh and start to add in the values now well, go ahead and say October is gonna be 1200 and then November is going to be 1500 and then click on add cell. Now, if I click at Total, you'll notice it does the math. Now it is now 2700 and automatically did that for me. So just by adding this part's integer method around that value, it took the string and it converted it into an integer. Now there is another way that we can actually go in and loop through our content here instead of the four of we can actually go in and use a four each. And so if I came in here and let's do this under the delete value, let's actually come in here and say monthly cells dots for each. Now, when you're using the four each, you actually need to pass in three different values, the first value because it returns to different values back to you. So the first value is really what we need to use. And then the second value is kind of a duplicate from the first value. But the 1st 1 and the 2nd 1 are pretty much the same. What I need to do now is say, Okay, what am I actually going to be looping through? Well, that's going to be our monthly cells. This is going to return a value so you do return by an equal sign and then a greater sign as well. And then we're going to open and close this with a curly bracket, and this is where we're going to place in our amounts. So I'm gonna go ahead and alert that, and I'm gonna say Value one, but it's going to loop through that and then give me the value. Now let's go ahead and just hit, refresh and then click on Add Cell. And now, if I could October and then add in the value there, I go ahead and type in November. Out of value there, click on Add Cell now gonna hit delete cells and you can see that it alerted the 1200 so and now it's alerted the 1500. It will look through that using this for each loop. So just keep that in mind that you can do it in either one of these ways you could do the four of or you could do the four each. Whatever way, you're most comfortable with those air. The different methods for being able to literary you're different sets

Updating the Graphs
[Autogenerated] So we've been updating our concept instead of sets. But now we actually need to take those values and we need to update the graphs in our charts here. So what we need to do is come in here and we see that if I come down toothy and sell right here, we're adding to our monthly labels. This value, what I want to do is actually go in and take those values and actually converted over to data that I can actually be used instead of charge A s. Let's go ahead and uncommon. Tout this monthly sales chart. But you can see here I'm referencing monthly labels Row. I don't really have those labels instead of a variable. I do have that label as a set, But watch what happens if I come in here and hit Refresh. You can see that it does not actually get updated just because we're using charge. Yes, we actually need to take that and we need to create it into an array here. What I'm going to do from here and probably the easiest way to do this is to actually come into the ad cell and what we're going to do is we're gonna say monthly sales chart. And this is a method for Chart J s. We can say dot data dot labels and then we're gonna say equals array dot from and then open close parentheses. And then we're going to say this is going to be from our monthly labels. We've used a rate of, but we have not used a ray from, so it's very similar array from will actually take these different values, and this is what we're going to create the array from. And so now we're basically telling Charge A s. We're going into the data, and then we're going into the labels and we're updating it and saying this is now the new value so it can actually get rid of that and just create a blink array for now because that's gonna be updated later once we actually go through and add ourselves. So I'm gonna come in here and hit Refresh now and you can see that we have no label, but our chart is actually showing up, which is a good sign if I click on add cell and then I go ahead and just say october and now we're gonna enter in the value of 1200 I'm gonna click on Add Cell and it's actually updated. However, it's not updating this church. So what we need to do is one more thing. If we come back into here after we make a change to the chart Gs, we actually need to call an update methods. So I'm gonna say Charts monthly sales chart dot updates open close parentheses. I'm gonna call in that method, and that's going to update the chart for us. So I'm gonna come back in here and entering. The new labels will say October 1200 then go ahead and click on Add Cell and you can see it's automatically updated that label. So that's how you do the monthly labels. But let's actually go in and inside of this monthly amount here. So the let amounts of monthly cells. This is how we get the total here. What we're going to do is we're actually going to create a new for each loop that's inside of here, So let's go in and we have to loop through. We have to use this for each method toe loop through the different values and then update the values inside of our data here. So I'm gonna say monthly sales charts and then I'm gonna say dot data dot data sets. That's how we're getting down to the ______ and they're going to say four each. We're gonna use this for each and then inside of there were actually going toe actually pass in the data set, ______ open, close curly brackets and bring that down the line. And now we're going to save data set dots dita dot push and we're going to push in this amount. So I'm gonna basically make sure that this starts out with no data there. This is going to be a blank array there and because we're already getting the amount and we're looping that in, essentially, we're basically just going to loop through all the data sets inside of our data, and we're going to push in the amount that we get back there. One thing that we forgot to do is actually make sure that we return the values. And so now, if I had saved and let's come back in here and hit refresh, let's go ahead and add the value here, and we'll say October and then we'll do 1200 click on add cell. So let's actually do this at the same time that we're updating, we're adding our cell here, so I'm actually gonna take this yearly total in this four loop and I'm gonna cut That s O as soon as I click on Add Cell is when I want to update that you want to come in here and I'm gonna pace that there. And now I'm actually gonna get rid of this because we're kind of doing the same thing right here. Amounts of monthly cells. We don't need all of that, Really. So we're gonna say Yearly total. And now we're going to loop through that. We're gonna push in our data, and then we're going to update the labels right there. And then after all that's done, we're going to update ourselves chart. So let's go ahead and preview this now and let's say October 1200 then click on add cell and you can see that it's updated the chart automatically with 1200. But watch this if I go ahead and add in November, for example, and then I say this one is going to be 1400 then click on Add Selma, you'll notice that November is actually registering as 1200 because it takes the values from initially when I added the first time and the ads in both values the second time. So we actually have three values and you can't see the 3rd 1 because it doesn't have a label, But we actually have three values that are inside of here. So I actually need to reset the data and clear out the data before I actually start adding anything inside of there. Exactly how I do with this yearly total is they sent it back to zero before we looped through everything. And the way that you do that is actually by doing a four each loop as well. So I need to come in here right after yearly total, and then I need to actually loop through the data set exactly what we've done down here, and I need to set the data set data back to this empty array just by doing that. Now, if I come in here and click on add cell and if I come into October and then say 1200 then click on add cell. It'll add that, but as soon as I start to add other ones here. So now I'm gonna say this one is going to be 1400 click on add sell. It adds the 2nd 1 is 1400 the 1st 1 as 1200 so it essentially just clears out the array. And then it starts the array again as it starts to reiterate through the set values. So that's really how you go in and you update the graphs. So you go in and you illiterate through the different sets, and then you change the federation back into an array and then update the charge A s. And the only reason why I have to do that is because I'm working with chart jsf. Charge, Yes, updates where it will actually accept values from a set or a map. Then you won't have to do this. You won't have to convert it back into an array. So in the next video, we're actually going to be talking about weeks sets and what week sets aren't how you actually start toe work with weak sets. And there is a little bit of a difference between sets and weak sets, and so we'll go ahead and talk about what that difference is and then dive into working with weak sets.

Differences between a Set and WeakSet
[Autogenerated] So let's explore some of the differences between a set and a weak set. So first of all, it can only contain objects that cannot contain any type of primitive data types, and the objects themselves are only reference weekly, and we'll talk about what that is here in a second. It cannot be miserable so that I cannot operate through a week set. It's only really designed to contain certain type of information. It has no access to the size property, the recent wise because these references or contained weekly, which means that there may not be a reference where you may get rid of that reference or something like that. And so that's one of the reasons why you cannot use the size property. Really it comes down to this. Is being garbage collected your opening up certain parts of your data Thio allow it to be garbage collected. You may be wondering, OK, Jeff, what is garbage collection? So basically garbage collection happens default inside of browsers, and it monitors the memory allocation, and it determines when a block of allocating memory is no longer needed, and it basically reclaims it sets by default, will not get rid of that memory, so it will just stay there in that memory. When you decide inside of a sets that saying, Hey, I no longer need this You actually would want to use a week set instead of a set because what that does is when you define it as a week set. It says that if this is no longer being used, it could be garbage collective. You can get rid of it, no longer hold it inside of memory. And that's really the power of being able to use thes week sets. So sets you have access to all of these methods, but with weak sets you only have add, you have deletes. You have has as well, so you can see if there's a certain value or something like that. But that's really it. You only have those references, so it's really just if you wanted to store certain types of data that you're okay with it being garbage collected, you're okay. If the data is not there, you're basically just holding it as a certain type of value. If it is there and you can store it inside of a week seven. So in the next video. We're actually going to go in and start working with a weak set right instead of our code.

Working with WeakSets
[Autogenerated] Okay, Now we're gonna be talking about working with weak sets. So let's go into our code, and I'm gonna go ahead and create a new set. This one is going to be a week seven. We're gonna call this categories now. I don't want to actually store a category that's not chosen, because that will just take up unnecessary space. So this is a good use case for being able to use a week set instead of using a set. So I'm gonna say, New week set in order to create that new weeks up. Now, I can't simply go in here and start adding a category so I could come in and say categories and then I'm gonna do dot ad. And so we have the ad method that we can add for here. But notice if I come in here and just say hiking, for example, and then I do a consul or let's do an alert on categories and so I'm gonna say categories here, we're gonna run into a problem. So I'm going to save that, and I'm gonna go ahead and preview this, and if I hit right click here, I have a problem there because that is a non object key. Remember that we cannot work with primitives. We cannot use strings. We cannot use numbers or anything like that. We can only really use objects. Sense of what I would need to do is actually add this as an object. And when you create an object, you have to put it inside of curly brackets and then you have to give it a name. So I'm gonna say category and then Colon. And then I'm gonna go ahead and put hiking there now. So I'm gonna say hiking. And now let's go ahead and try that hit refresh so you can see that it alerts. But it says that it's an object. We actually need to get to that in a different way. So we'll work with that here in the seconds. One way to work with objects will be easier, as I can actually store that object inside of a variable. So let's just say let hiking equal and they were going to say category colon and then hiking there. Now what? I'm adding it. I can actually add hiking right there, and that will be a little bit easier. So now if I wanted to say I wanted to check to see if hiking is, they're all they have to do in the alert is say categories DOTs has and then hiking. Does this have hiking? And it will alert if that's true or not. So if I go ahead and hit, refresh its going to alert that, yes, it's true. It does have hiking. So if you just store it inside of a variable there, it's a little bit easier to add and actually check to see if it has a certain value as well as you're going through the code here. Now I'm gonna go ahead and create these three different values because we have in our form if I come back into my preview here. If I click on add cell, we have hiking, running and hunting. So I want to store each of those inside of a variable here. So we already have hiking and I'm gonna copy that and just pace that here. I'll change this label Thio running, and I will change this label. Chu Hun _____. Okay, so we have those different categories that we can go ahead and add, but I want to grab the value from each of those radio elements. If I go back into the index that html want to grab to see if this is checked or not, so you can see we have hiking as label one. We have running as labeled, too, and we have hunting as level three. So I'm gonna go ahead and just store each of those labels those i d. S inside of a variable here. So I'm gonna copy and paste this and you're more than welcome that pause and write this out. So now what I need to do is under add cell. I'm gonna come in and check to see if those labels have been added coming in here. Let's go ahead and to say, if hiking radio and they were going to say dot checked That's how you check to see if a radio button has been selected. If that has been checked, then we're going to do something here. And that's where we're going to say categories. We're gonna get rid of our categories to add up here. Let's get rid of that alert as well. And if that's been checked, we're gonna add categories dot ad and then we're gonna say hiking. Now The nice thing about the week set is if this never gets run, that is actually even nowhere to be found inside of the memory. And so it's being garbage collected. It's not being used at all. If I remove this, it will be garbage collector at the next available time. And so again, that's one of the benefits to this. Now you can also say else if and then we can check to see if the running radio let's stroll up here running radio right there, done, checked, and then we can go ahead and add. That's running to our category as well. So I'm just gonna copy in the rest of this year. Fact that'll just paste it right there so else if running radio is checked that we're gonna go ahead and add categories of running. If this is hunting is checked, we're gonna go add that to the category there as well. And I'm just gonna consul that log. We're gonna do categories and see what we get there. Let's go ahead and preview this. Let's add cell October 1200 then let's go ahead and add hiking there. Now, If I right click here going to my console, there's my week set and you can see that it's added the category of hiking. So just a nice way to be able to and the values when you need it, not use it when you don't need it. It's not something that I'm going to need to reiterate over. It's just basically going to be inside of my category inside of my value there. So that's how you work with the weak set inside of JavaScript in the next video, we're going to talk about what we've learned in this section, and then in the next section we're gonna be talking about maps.

Module Conclusion
[Autogenerated] So we've learned a lot in this section, and I wanted to review what we've learned before. We move on to maps, so here's what we've really been able to dive into. We initially started talking about data collections of what data collections are and how they're new to eggman Script six. We then went into sets and talked about what sets are, how you can create sets as well as adding and removing different values from the sets and then how to generate through the sets to graft it values and to work with those values in whatever way that you want. We then talked about the differences between sets and weak sets and when you would want to use a set when you would want to use a week set. And then finally, we wrapped up with actually working with weak sets and using that data inside of our code. And that's initially what you'd want to know. When you start working with sets, we're gonna talk about actually using maps in the next section. Now, maps gives us some additional functionality and one of the nice things that allows us to work with keys and values and so we can define a key in any way that we want, and we can define a value in any way that we want as well. So let's go ahead and dive into maps in the next section.

Creating and Using Maps
Module Introduction
[Autogenerated] we've learned about advanced arrays. We've also learned about sets and what you can do with sets. And in this section, we're really going to dive into maps. We're gonna talk about what? The differences between the sets and the maps. Where else we're gonna be talking about week maps similar to what we talked about with weak sets as well. Maps add some additional functionality on top of sets. It is a very similar way to be able to store the data. But to be able to access the data and how you stored the data is different. So let's go ahead and dive in and start talking about what maps are to begin with.

Introducing Maps
[Autogenerated] before we dive in and start using maps. Let's go ahead and just talk about maps in general. So we understand what maps are and some of the differences with maps compared to sets. The maps use a key value pair, and it keeps the original insertion order. That's important to know. We're gonna be talking about that here in a second, but it keeps it in order. In any value, like objects or primitive values can actually be used as either the key or the value. With maps, you have to define a key, and you have to define a value, just like with sets. When we added a value to a set, we had to pass in the value of that set. But instead, with map, we actually have to pass in the key and the value. And there's important things to know. Tate here noticed that instead of ad for using sets, so we're setting the ______ ands were setting the value of the key, and we're setting the value of that. Kia's well, it's really important to know, because when we want to reference this map as well, we want to grab the key. We need to know what that he is to be able to identify. Really. Maps are a storage location, just like sets are, but we're storing different types of values in this key value pair. We can have strings is part of the key. We can have numbers as part of the key. We can even have functions as part of the key as well. And we can have objects is part of the key as well. It just depends on what you want to use and how you want the maps to function. An important thing to know tape because you can do something similar with keys and values with a raise. But the problem with the races. If you try to literary in order, there's no guarantee that it will actually go in the order that you've inserted it. If you've inserted and you wanted to go through that specific order, you can't guarantee that it'll jump around. Sometimes. Sometimes it will get in that order. Sometimes it may not. There's just no guarantee, but with maps there is a guarantee, and it will go in that insertion order to go one by one and go through all of your difference values that you've entered in. Let's talk about the different properties and methods that come with maps. Some of them are very similar to sets, but other ones are different, so size is the same as the set. So we have access to the size, but that's pretty much it. We can get the size of the maps, but we don't have access to a lot of other properties there. But for as faras methods go, we have clear so we can clear out the map completely. We have delete so it can delete specific items of the map as well. We have entries so we can get into the entries of the map we have for each to be able to iterated through him. We have gets so we can actually get the value we also have set so we can set the value as well. We can check to see if a map has a certain value. We can also access the keys. If we want to just get all the keys for all the entries. We can go in and just access the keys and we can access the values. That's the property that we're going to be working with throughout the section and the different methods that we're going to be working with throughout the section. So I just wanted to make sure that we were clear on the different methods available when you're working with maps.

Adding and Removing Values in a Map
[Autogenerated] Now let's talk about creating a map and then adding and removing values from that map as well. I'm gonna come into this project and make sure you download the project files, saved the project files that you had from the set section and make sure that you have that so you can go back in and reference. But I'm gonna download the project files for this section, and I've modified the code a little bit so you can just start off from where I'm starting off. I'm gonna go ahead and copy this start a project, and then I'm going to paste it on my desktop. Let's go ahead and preview this first of all, so going to double click on that folder and then double click on index dot html So nothing's really set up to work on this yet. I'm gonna go ahead and open this up in sublime, and I'm going to open up the index dot html. It's pretty much the same here. There are a couple differences with find value and find cell. And there is also the ad cell function as well. If I open up page dot Js, I have my ad cell. I have my fine cell. And then I went ahead and commented out the charts again because we're not ready to use those yet. I need to come in here and right below the yearly total. We're gonna go ahead and creates our new maps. So I'm gonna say, const. And then we're gonna save monthly cells. And then in that, I'm gonna go ahead and say equals. And this is very similar to creating a set. But instead of a set, we're gonna go ahead and create a map so open, close parentheses. That is now our monthly cells. Now, in our new cell, as soon as we click on add Selma, which happens as soon as the motor pops up, we enter. In the information we had new cell in our ads sell. We're gonna go ahead and save monthly cells, and then we're going to dot set. Remember, we're using set instead of ad. Now I'm going to give this a title. I'm gonna give it a key. How am I going to identify this later on? I want to go ahead and just do it as a string first of all, So I'm gonna go ahead and say it. New cell. The new cell is going to go in and grab that value from our new amount. We're still referencing that new amount right there. He's gonna grab that dot's value, and that's how we're gonna go ahead and alert that value. Let's go ahead and just consulate that log this. I'm gonna go ahead and go to monthly cells and then just said Safe. I'm gonna go ahead and preview this now, coming back into my project, I'm gonna hit, refresh, going to add cell, go ahead and enter in October. Let's entering the amounts and then hit. Add cell. Well, let's go into our inspect element here and let's go into our consul dot log. I was going to our consul, and you can see we have the key being new cell in the value being 12 hundreds to automatically separates out for me. And that way I can go in and I can grab all the keys. I can grab all the values. What's a nice little handy function there? Let's go back in here. And instead of New Cell here as a string, let's actually enter this and as a number I'm gonna hit, Save here, go back in here and hit, Refresh. And then let's add our new set. And then let's add our value here and click on Add Cell right click here and then you can see that it's has that one as the key and then 1200 as the cell. Let's say that I wanted to find a cell, and I want to actually go in. And after I've entered in the cell, I wanted to find that specific cell so you can do that by actually using the get method. What I'm going to do here is consul dot log, and I'm going to say monthly cells and then dot get and what you do inside of open, close parentheses there is You basically type in the key. In this case, we're using the key as one, and that will actually go in and get that value. Let's go back in here and hit. Refresh. Then let's hit at Cell, go into this and add in October for the month and then 1200 for the amounts. Now, if I right click on this and going to inspect elements and go over to here, it will add that I'm going in and I'm actually logging that out when I add the cell. But let's go in and use that fine cell function. Go back into the window here and then you could see that it is logging out that 1200. It's going in and finding the key. And once it finds the key is logging the value there. That's a way that I can go in and I can get the value. Let's say I wanted to go in and delete that. So let's use this fail cells to actually delete gonna go into my index that HTML come up here to find where it says Phil sells right there and you can see I have this filled value. I'm gonna go ahead and leave that function the same here. Come back into page dot Js and let's create of function open close parentheses Open close, curly bracket there, and we're gonna say monthly cells dots deletes We're gonna go ahead and pass in the key. So that's how I go in and identify which one that I actually wanted to leave. Oh, make sure that I actually consul that log that as well just so I can see the value well, Consul, about log monthly cells. And now let's hit. Refresh. Okay, let's go ahead and enter in October 1200 for the amounts. Click on Add Cell right click and going to inspect Window. Go into our consul and there we go. It is inside there, but now let's go ahead and hit Phil cells, which will actually let's right, click on that inspect window or inspect elements. Come in here and you could see that it has no value. We've gone in and we added it. But we've also deleted it, and we're logging it just to make sure that it's been deleted. Okay, so that's how you can go in and you can delete it and just make sure that it has been deleted. Let's actually get rid of fine cell right there. And let's just check to see if it has the number one as well. So we can also do a function that says, Let's go ahead and consul dot Log and let's log to see if this monthly sales has the value of one. The key of one monthly sales Dot has and then passing the value of one. That's the key that we're looking for. Let's go ahead and hit, refresh and let's add in value so we'll go ahead and start with October 1200. And then let's add the cell click on Fine Cell and we should get that consulate out log that it's been true. And yes, we have that here that that key does exist, so I can quickly go in and check to see if there is a certain key inside of there. Now I want to modify this a little bit differently because we're just setting a key there. But I actually want to modify it to set the key to be whatever the month is. All I have to do is actually come into New month right here. Come down to where I have this key right there. Go ahead and paste in New Month and then just type in value. Whatever somebody enters in as the value of that month. That's what we're going to be checking, which means we're no longer checking for one here so we can go ahead and just get rid of those for now. It's basically going to set that and it's going to set the key as the month and then the amount as the value. When I was working with sets, I was working with two different sets. But in this case I can work with one set and be able to store the key the month as the key and then the value as thehe mounts that the person entered it in. Well, go ahead and hit save and then preview and let's enter in October here and then let's hit 1200 click on Add Selma and then right click and going to inspect Element there. And then let's go ahead and expand this out and you can see the key is now set to October, and the value is now set to 1200. Now. If I was to add in another one here and then go ahead and hit at Selma, right click and going to inspect Element go into here Now you can see that we have to hear let's actually council dot log the size so I can actually get the property of the size. Then I can log that size so I can say October 1200. Go ahead and add cell and then let's say this one is now. November, this is gonna be 1400. Hey, add cell right click and go into inspect elements, and then you can see that it now has alerted one, and it has alerted to because that's the size. The first time we ran it, it only had a size of one. The second time we ran it, it had a size of two. But it's a property that we can use to see how many different entries there are. But that's how you go in and how you add and how you removed and some of the other basic methods that you can do with maps. In the next video, we're gonna be talking about iterating through a map and grabbing in the values and being ableto work with that map data to be able to update our graphs

Iterating through a Map
[Autogenerated] Now we're gonna be talking about iterating through the map and how we actually go in and grab the keys, how we go in and grab the different values and what we can do with those. And it's very similar to working with sets. There are the two different ways to be able to generate. We have the four each and we have the four of as well. Now I'm gonna come in here and under add sell. What we're going to do is we're actually going to update the labels first of all. So let's go ahead and uncommon out that bar chart here and you can see that we have this monthly sells chart. We have our labels, which is a blank array. We have our data, which is a blink array as well. Let's add, our labels were gonna update our labels. Okay? Now, I can easily do this by a similar methods. What I was doing before so I can say monthly sales chart dot data dot labels, and then we're going to say equals and we're going to use the array from just like we learned about in the first section here. And we're gonna say a ray from. And then now we're actually going to just say array from not just monthly cells, but we want to grab just the keys. You can come in here and say monthly cells, dots, keys open and closed parentheses. And then there we go. Let's update that chart. So I'm gonna come in here, and that's a monthly sales charts dot update. We're gonna call the method for Chart J s to be able to update the graph. And let's just do that for now. Let's go ahead and go in and preview our project. So I'm gonna hit refresh here, and I have that as soon as they update it. So I'm gonna click on add. I'm gonna go into say October and then say, 1200 and then add cell so you can see automatically updates that. So let's go and add one more here, So I'm gonna say in November, and then we'll say 1400 here and then click on add cell. It automatically does that for me, so I don't necessarily need to go in and generate through the keys just to grab the keys. I could just quickly do that by converting over the keys. There's just a lot more simple than what I had to do before, all right? What we need to do now, though, is we actually need to go push in that data we're going to use. For example, we're going to use a simple for each. Just a log out sits to see if this is what you wanted to do. So we're gonna say monthly cells, and then we're gonna go dot for each open, close parentheses, and then inside of those parentheses, we're gonna go ahead and do a function, and then we're gonna pass in the parameter of cell. That is going to be the data that we're going to work with. And then we're gonna say, Consul, that log, and then we're going to log cell. Okay, so let's go ahead and preview this. Now, come down here, click on add cell. We're gonna go say October 1200 then go ahead and click on add cell. Let's go into our inspect elements and you can see that it logs 1200 so I can get right into that cell for each of the monthly cells were basically going to go in and grab that value. However you might remember a problem that we had with the set is that data that we're working with is actually a string when it comes in as the new amount, it is a strength. So we actually need to go in and parse the integer of that. So we actually get the number instead of the string. Now if I hit refresh visually, it won't look much different here. If I enter in the amounts of 1200 then go into ad Cell and then inspect element, it looks like we got a problem. We have our parts integer. Looks like I misspelled parse. Yep, needed either. So let's try this again. 1200 click on Add Cell here and now if I inspect elements, there we go. This is blue. So it does. Let me know that it is a number and not a string by that text color. I wanted to loop through and grab all those values. I can do that, but another way that I can do that is by using the four off. So let's actually get rid of that, and I'm gonna go in and just grab the value. So I'm gonna say four and then I'm gonna inside of here. Say, let amount of monthly cells dot values where you just want to go in and grab the values were still parsing the integer. So that's great. And we just want to grab the values, make sure that that is plural in there and then open and close curly rackets there and also make sure that I actually close this with the parentheses there as well. I don't need Apprentice E at the end of that. It actually needs to be right here. It's gonna go through each of those and then it's going to allow me to go in and updates the amounts to the yearly total. So we have our yearly total up here. I'm gonna say a yearly total is equal to amount plus yearly total. So we're gonna take the new amounts and added to whatever the current amount is, and then we're going to update that label. So we'll say yearly label dot inner HTML equals and they're gonna say, Yearly total. That's going to be the new number. If I go ahead and hit, save and hit refresh here and then click on add cell. You can see as soon as I add that cell. It's now update of that label. Let's go ahead and add another cell so November and then 1100 and click Add cell and updates that automatically. It does the math for me now what we're going to do for each of that data amounts for that mounts here. What I'm going to do is push that amount similar to what we did inside of our sets. If I just copy this code in here, what we're doing is we're saying a monthly sales chart data data sets for each of them. So we're doing for each inside of here. We're gonna take the data set and we're going to push in the amount right here. It's going to do that automatically for us, and then it's going to update the chart. Now if I come in here and hit, refresh and click on add Cell, it's going to update the label. But it's also going to update the amount here. Now we'll have a problem, a similar problem to what we had before. If I come in here and say this is now 1500. Notice that the 1st 1 actually gets set to 1200 then 1/3 1 which doesn't have a label, gets set to 1500. I just can't see it. That's because I need to clear out the data. I need to clear out a yearly total as well. And then I need to clear out the data for this before I start adding new amounts. And I don't need to do it in the four loop there. I can actually come in here and say, Yearly total is equal to zero just to set that back to zero there. And now I can actually come in here and copy the same code that we worked with inside of our sets. And this is just basically setting the chart J s data back to a blink array. For each of those, we're gonna set the data back to that Blanca rain. Now, if I come in here and hit, refresh and then click on add cell, go into this and start adding in our value here, it's going to add in that first value. But let's go ahead and add in the second value as well. We'll do 1500 here and then click on Add cell and you can see it automatically updates for us in the next video. We're gonna be talking about what the difference is because some questions might have popped up. It's like, Why don't I just use objects for this type of thing? We're gonna talk about what the difference between objects and maps are and why you'd want to use maps over objects.

Difference between Maps and Objects
[Autogenerated] so a question may have come up throughout this. If you're familiar with objects, you're familiar with the rays. Why are we not just using objects? Why would I actually want to go in and use maps? There are a couple big differences, and in this video I wanted to explore what those differences are. The 1st 1 is being able to generate so much faster through a map than you can through an object. As far as structure, you can go in and create a map, and you can have a key and a value for that map for the object. You can go in and still do a key and a value for that object as well. But there is a difference in the key value, the key and the object. The keys must be simple data types. That means you can only have integers. You could only have strings, or you can only have symbols and really nothing more than that. For maps, you can have any data type. You can have those primitives. You can have objects as well as a key. You can have the object. You could have a raise. You can have functions you could pass in a spread operator for the arraign. Really, that is. Some of the differences is if you're wanting to work with more than those simple data types as a key. Another one is element order. So keep in mind that objects in a raise, you essentially can't guarantee the insertion order. It could be jumping all over the place, but with maps you guarantee the insertion order. So if you wanted to go into first cell until the last the latest cell, you can go through the map and jittery through that and make sure that you have that in that insertion order. There. Another one is inheritance. A map is inherited from an object. That means that as a map, I can actually go in and get the methods and difference properties of an object. But an object is not a child of a map, so you can't actually inherent some of those methods inside of an object. And so you don't get some of the methods that make it a little bit easier to work with, like just being able to use has or being able to use, set and get as far as setting the data of the map. So just things like that that you don't get that when you're working with a map. But you do get the message from an object when you're working with a map as well. Now, some of the other functional differences that I wanted to run through is, for example, creating. There are several different ways to be able to create an object. You can see that you can create a blink object. You can create a new object as well. But for maps, there is just one way to be able to create a map, so simplifies the whole process and makes it more consistent. Getting there's a couple different ways to be able to get the object data. But for a map, there's only really one way you used to get method for checking. You can do a bunch of different things to see if something exists, and if it's equal to an object. But for checking inside of a map, it really comes down to that has. Does this have a certain object? And if it does, it'll result in true. If it doesn't, it'll result in faults, and so it just kind of simplifies the checking a little bit more for adding you can add to an object in a couple different ways, but for adding in a map, it really simplifies it down to set you basically set and you pass in the key and the value for size. You have to basically say object keys object at length in order to get the object size. But for map, you just use a simple math dot size in order to get the object size, and that some of the main difference is that you want to keep in mind. When you're using maps over something like objects, you get access to these additional methods that you don't have with an object. It simplifies some of the code as well. It is faster to use. And so that's really some of the main difference is why you'd want to use a map over an object. So in the next video, we're gonna go ahead and dive into what some of the differences between a map are and a week map, and then we'll go into actually using the weak map and explore how to go in and create a weak man.

Understanding the Difference of Maps and WeakMaps
[Autogenerated] Now let's die, Vince, you some of the differences between a map and a weak map. Just so we're on the same page as far as when you would want to use a map. And when you want to use a week map and a lot of it is very similar to when you would want to use a set and when you would want to use a week set keys must be objects. In this case, you cannot have a key value as a primitive value, so you have to have it as an object. Now the objects similar to sets are actually held weekly, and so if it's there, it's there. If it's not there, it's not there. And they're not terrible, Just like sets. You cannot operate through a week map, and they're also garbage collecting. And so if it's not necessary for that to be stored inside of data, it will automatically free it up. So weak maps they're also not innumerable innumerable means that they cannot be fully counted. So even though I created a map, if it's not being referenced, I can't count on that in that certain number. In maps, you can use keys and values and clear and entry and for each and getting set and has. But for week maps, you really can only use delete, gets and set and has, and that's really it. You're basically down to those different methods to be able to get to set, to delete and to check to see if the value is there. So let's actually go ahead and set up our week map and work with some of the different methods that a week map has. Now that we have a general idea of what a week map is, let's just go in and explore the week map here. You wanna go ahead and create variable here, and I'm actually gonna place this inside of a block of code, and I'm gonna go ahead and say, Let's cells sells aim and we're going to create an object here and because the key inside of a week map needs to be an object. So let's just go ahead and create the object. And I'm going to say the object is going to have two different values and it's gonna be one comma, too. Now, what I'm going to do is actually create a map, and we'll just start out with a map here just to explore the differences. But I'm gonna say this is going to be a new map, open, close parentheses and then end that with the semi colon. And now I'm going to say map dot sets and we're going to pass in the value of sells aim, that is going to be our key. And now we're gonna pass in the value of hiking now inside of here because it's inside of curly brackets. I should not be able to actually consulate out. Log the map. However, because maps are not garbage collected in general, you can actually go in and you can console that log this and so I can say, consul dot log. And then I'm gonna go ahead and consul dot log map. Now let's go ahead and preview this gonna go ahead and hit, refresh, and then I'm gonna right click and going to inspect elements. Now, As soon as I do that, you'll notice that the map actually gets alerted. Here I have my object and I have my hiking. But again, I should not be able to do that because it's inside of here. One way to make sure that that does not happen. That's garbage collected is I can come in here and change this two week map instead of using map. I can go ahead and say week map and then it will be garbage collected. I should not be able to access it. I'm gonna log this first of all inside of the brackets and say, Consul, that log. And then inside of there, I'm gonna say first and then add. Plus and let's make sure we have a space. So we have a space in between the word and we're going to say, Consul Doubt Log. And then we're going to say seconds and then I'm going to say plus and then sells A as well can see here, the consul, that log. The 1st 1 should give me that information, but the 2nd 1 will no longer actually work. So if I come in here and hit refresh, you'll notice that it's not loading fully because I'm getting an air. If I go in to inspect window and you can see that this air is essentially the same, that I cannot find sales A because it's inside of these brackets, I don't have access to it. And if I go ahead and comment this out, let's go back in here and hit. Refresh. And now if I inspect the elements again now, I will have access to that. So it is garbage collecting, so it's not available outside of that scope. So it's just a way to be able to work with your data more securely and make sure that it's not available outside of a start in scope as well. That's one way that you'd want to use a week map.

Module Conclusion
[Autogenerated] let's wrap up by talking about what we've learned about in this section. And first of all, we were introduced to maps. And so we talked about what maps are, how you can actually add and remove values for maps, how you can iterated through maps and also the differences between maps and objects and the reason why you'd want to use maps and some of the additional methods that you get when using maps. And then also the difference between maps and weak maps, what maps are and what week maps are and some of the benefits that you get with weak map. That's really what we've covered. This section was designed just to cover maps and talk about some of the benefits to maps in the next section. We're actually going to go back to a raise, but we're going to go back to a specific type of array and that is called type to Race, and we're gonna talk about why you would want to use type to raise what type to raise their used for and actually start exploring type to raise in the next section

Exploring Typed Arrays
Module Introduction
[Autogenerated] So we talked about sets and we talked about maps and we talked about a ray functions in this course. We're going to wrap up this course by exploring type to raise. Now, type two raises a very specific type of array, and it is designed to handle direct memory allocation. So you can actually go in and store things inside of the memory and work with it that way, which helps being able to have your applications run faster, as whether have starts work more and more with large amounts of data, this might be useful as well. So we're gonna go ahead and define what a type to Ray is. We're not gonna dive too deep into type to raise in this section, but we're at least going to explore what it is. We're gonna explore, how you can start using it and how you can go in and start manipulating the type to raise as well. So let's go ahead. And first of all, just talk about what it's like to rate is

Defining Typed Arrays
[Autogenerated] before we start working with Type two race, let's go in and let's define what type to raise our so type to raise our ray like objects that provide a mechanism for accessing raw binary data. And you can get straight to this data so you can actually work with this data quicker and easier. And if you have a Web after working with the Web, that has to do with a lot of data than type of rays may be a good source for you. Let's talk about some of the benefits of using type to raise and the main benefit we've already talked about, but it bears. Repeating is accessing raw binary data. You can get straight to that data. It then allows you to do faster performance, faster data manipulation as well and in strictly controlled data. So that means you can't put just any data inside of a type to ray. It is controlled, and it depends on what type of you that you're actually working with. And there are a lot of AP ice that support type to raise that you can use in order to get this faster performance and access to this raw binary data. So some of the e p I set you may need to use or you may want to use our things like Web G l canvas Web Audio AP I xml. Http request That's a P I. Web sockets. Web workers Media source. A p I and file AP eyes a lot of different AP eyes available that will support type to raise, and you can start using them right away. So the key to the type to race structure is being able to actually create an array buffer. When you create this array buffer you defined how many bites you actually want to work with inside of this array buffer, and you do that inside of your Java script file. The problem is, though, this Java script file cannot communicate directly to this array buffer. In order to communicate and get the functionality of an array, you actually have to create what's called a view. Now that view can contain different types of data, so in this case we have a U. N A array, or we have a U 60 Narain you went 32 array float 64 array, and there's other types, depending on the type of view that you create. You'll have different sets of structures in there that contain different types of bites. They're the key is how many bites you actually initially created. So if I created 16 bites than that means with an eight array, that means I have one bite each. And so that means I can have 16 different sections starting out with zero going all the way up to 15 and I can store data in there now if it is going to be an into eight array, that means I can only actually use certain types of numbers. Now, if I'm going to do as in 16 that means I have two bites each, and that means I can only have eight. And so if I'm using to bite, so I only have eight tow work with and I can't go beyond, and I can't play something in like the nine section or anything like that, I'm working with the into 32 array. Then I can work with higher numbers, but it's gonna take up four bites each, and that way I only have actually four spots to work with. If I'm going to do a float 64 That gives me a greater amounts of numbers, but it lessens the amount of space is that I have to work with. So in this case, with the only 16 bites, I can only split that up into two different spots there and then in sight of my job, a script. I actually communicate to these views. So I've defined what type of number I'm working with. I have also defined the spot that that number is going to be stored inside of my array. And then I do all of that inside of my job script. So hopefully that helps you actually understand how to create the rays and how to split up the rays, depending on the types of numbers that you're using. The key, though, is remembering that you're communicating to these different spots. And so if I wanted to place a number, that's this Ada ray here that I would actually have to define what spot it's going to go in. It automatically creates those spots for me, and all of them start out as zero. But if I want to update a number in the second spot that I would have to make sure that I updated in that spot. Oregon Update in the fifth spots, or in this case, it's the six spot because it starts out at zero. What type of numbers can I place in each of these types of a race? Well, that depends on the array that you're actually using. So these are the different types of a race that I can create. So if I'm going to use an ent eight of rain that I have from negative 1 28 to 1 27 if I tried to place anything like 1 28 or anything above there, it won't happen. I'll run into some different Arizona now the size and bites. If I stick within those numbers and within that array is only one by per section, essentially so then they have you in it, which gives me 022 55. You went eight clamped, which means that if it goes up of 2 55 I won't get that error. But it's just going to clamp it and keep it at 2 55 in case it does go beyond. That's maybe something as kind of a safety mechanism that you want to keep in there? In 16 you have negative 32,768 to 32,000 767. So it just depends on what type of a ray that you actually want to use in the types of numbers that you're actually going to store in that array. And it goes all the way up to big on a signed integer 64 array and you'll notice also the float 64 Ray, if you're working with those numbers but it does take up eight bites with these each of these bigger numbers. So that's the concept. We're gonna go ahead and start creating an array of we're gonna create a buffer, and then we're gonna go in and create some views in order to communicate to them. Now, the view will then store that inside of that buffer. But I can't actually go into that buffer and manipulate anything about that buffer. I have to go into the view and manipulate the view, and then it will automatically manipulate an update the buffer from there. So that'll make a little bit more sense once we actually dive in and start working with these type to race

Typed Arrays vs. Standard Arrays
[Autogenerated] So one more thing that I wanted to cover before we dive in and start working with these arrays is what our type to raise versus standard or race. Why would I use type to raise and why would I use standard a race? And so let's compare the different two types of a raise. So in standard or raise, we accept pretty much any data type we're able to use standard variable storage were also able to use standard processing as well, and being able to generate through it as well. With type two rays were restricted on the data types. We only have certain numbers, depending on what type of view array that you actually create. So if you do the on assign integer eight array, you have certain types of numbers that you have to stick with within that or Ray. One of the benefits those you have access to this binary data is it becomes a lot faster to actually work with this type of ray. And so if you're using a lot of data, that's just numbers. Well, then a type to ray, maybe a very beneficial thing for you to dio, because it's just so much faster as faras, the processing, being able to work with this. You have your AP ice like the Web, G l. You have your media ap eyes as well. So if you're doing a lot of that type of manipulation on really heavy coating there, then you may want to stick with that. Once it's interview, it does act like an array. So you have all of the methods to an array in properties to Honore and so you can actually use it just like an array at that point. And then you get access to those native AP. I so Web G l u have canvas as well. So if you're working with those different types of AP eyes, you have access to that, and you can take advantage of that and make it go quicker and perform quicker by using these type to race so that some of the differences between a standard array and a type to ray and in the next section we're actually gonna go in and build the buffer and show you how to build the buffer itself. And in the following section, we're gonna go in and build the views and show you how to actually add data through the views

Creating Typed Array Buffers
[Autogenerated] let's first start out by creating this buffer. It's a pretty simple process to be able to create the buffer. But we need to be able to do that before we can start creating the views on top of that buffer and start adding the data. Keep in mind that we cannot manipulate the buffer itself. We have to create a view in order to do that, download the sample project and then we have this 01 starter project file. Make sure you download it for this section and make sure that you save your project from the last section. So you don't mess that up a cz well, and so I'm gonna come into this 01 starter project file, and I'm gonna copy that and paste it onto my desktop. Now, with that on my desktop, I'm gonna go ahead and double click on this and then double click on the index dot html That's going to pull up my project here, and we're gonna go in and open this project up inside of sublime. So I have this project open up inside of sublime. I'm gonna go ahead and open up the index dot html and notice if I come back into my window here. I don't have all those different sections. I've kind of simplified it a little bit more because we're just going to be working with this binary data. Now, I'm gonna come in here and actually go into my page dot Js and I've gotten rid of some of the different functions I've gotten rid of. The yearly total is well, we're mostly going to be working with the JavaScript inside of this section here. So now I'm going to go in and create my array buffer where it says code goes here, let's go ahead and get rid of that. And let's say let's test buffer. This is just a test that we're going to be working with equal knew, and then we're going to say a Ray buffer. So this is actually not an array, but this isn't a ray buffer. Now we need to define the number of bites that we're going to allow inside of this array buffer. I'm gonna go ahead and say six team because that's the examples that we've been working with. So we're gonna go ahead and create that array buffer that just defines inside of the memory that we have these 16 bites that we can work with. So at this point, I can't really do much with that. We need to be able to create a view. So I know what type of data is acceptable inside of this array. But we can check to see if the bite length is a certain number. So I could come in here and run an if statement here and say if test buffer dot length or bite links were looking for bite length. Exactly. So bite length is equal to 16. Then we're going to say alerts, Yes, that's really all that we're gonna do. We're just gonna test the bite length there. So if I come in here and hit preview, you'll notice that it says alert, Yes. So if you needed to do a quick if you have a lot of difference array buffers in here and you needed to do a quick check to see if this is the right bite length, then you can go ahead and do that as well. I'm gonna get rid of that. If statement there And now in the next video, we're gonna talk about actually creating a view on top of that array buffer

Accessing Typed Arrays with Views
[Autogenerated] Now that we've created the buffer, we're gonna go ahead and actually create the view so we can access the data and update the data. And there's different ways that we can actually do this. So I'm going into the code and we're going to explore a couple different ways. So let's just go ahead and create our data here, and I'm gonna say, Let view one equals and we're gonna save new int eight. Ray, this is how we define it. As far as what type of integers are going to be placed inside of this buffer that we're going to say that this is going to be an inch array and we are going to go ahead and pass in test buffer. We have to pass in what our array buffer is. And that's how we know how many bites we have to work with. Now that I have that wanna go ahead and type in view one and I'm going to choose the ____, you've just created 16 different slots inside of this array buffer. And now I want to go in and update the 1st 1 So within these brackets, I'm gonna say zero, and that will update the 1st 1 and I can define it by saying 32. Now keep in mind the difference amounts that are available inside of my end's eight. I believe it was negative 1 28 to 1 27 so I can't really go above that. So I'm gonna go ahead and consul dot log this and now I'm going to pass in view one. So let's go ahead and preview this. Let's hit Refresh. Nothing's really updating on the screen here. We're just kind of working with the data in the background. I'm gonna right click and go to inspect Element. It logs all of the 16 different a raise because I created this ends eight array. It has logged all of them in the 1st 1 which is zero has now been logged as 30 to all The rest of them because they've been created are now zero. They're set to zero by default. That's something to keep in mind and something important to remember there. So I can come in here with me and this with semicolon. But I can also come in here and save you brackets view one and then say to and then update that with a number as well. But keep in mind that if I actually tried to update this beyond that number, so in 80 only allows me to go up to 1 27 However, if I try to go up to let's save 1 32 here, watch what happens. We're going Thio alerts, View one again. I'm gonna hit, save and hit, refresh and then go into inspect element. Now I'm gonna go into here and then expand this outs and you'll notice it automatically jumps to be back to negative 1 24 That is because we're trying to pass in a value that that is not accepting. And so that's why you have to work with the correct data, making sure that you don't go beyond that. If you wanted to make sure that it goes beyond that does some air checking that you may want to use the clamped array instead of using Aunt Ada rain. So just a couple things to keep in mind there. Okay, so now let's actually change this instead of eight. We're gonna change this to 16 and if I go ahead and save that in preview, it Let's go ahead and right click and going to expect elements and you'll notice a soon as I alert this. I don't have as many toe work with now. The 16 bites are actually being taken up by two because we're using this integer 16 now we can also place a date of you on top of this array as well that we can actually work with separate. So if I come in here, I can say let's view too equal. And then I could do with a new data of you and I can pass in that test buffer as well. So instead of defining the exact amounts right here, I can create just a generic data view there. Now, as soon as I've created that generic data view, I can now set that that data with certain types of values so I can save you, too. Dots set. And I'm using a method called Sets into eight, and this will set the view to AIDS here, and it'll allow me to pass in the value need to pass in two parameters. The 1st 1 is the position, and the 2nd 1 is the amount that we want to actually update it with. So let's go ahead and do that. And so let's just go ahead and consul dot log, and we're going to go ahead and consul dot log of you, too. It's kind of a different way of doing it. Instead of defining the intruder, there were defining the integer as soon as we said it. So let's go ahead and hit, refresh and then go to inspect element. And you could see that the 1st 1 is that in 16 and there's all of our different values here. The 2nd 1 is just our date of you. But if I expand that out, I can actually get to that data. And you can see that the bite length is set to 16 as well. But notice what's actually happening when I set the second position to 43. It's actually updated that insight of the array inside of the buffer because I'm working with the data on not just working with the view, but that view is going through and actually passing in that data inside of here. So just keep that in, mind them creating a new view. But I'm still working with that same array buffer data. So it's still updating that as well. A couple other things that I want to do here, Let's go ahead and actually just take that out here. And so we're going to just create a variable on save. Numb equals view. Two dots gets in, we're gonna go ahead and get the integer, and we're gonna go ahead and get the position to make sure we do get into eight. Because that's Thea. How he said it was insecure ate there, and I'm gonna go ahead and log. That's as well. So we'll say, consul dot log. And then we're gonna go ahead and pass in numb there. Now if I hit safe and then preview, let's go ahead, inspect that and you can see that we actually getting an error. So let's double check this. It looks like I spelled Consul wrong, So let's try this one more time hit preview, go ahead and go in to inspect elements. And then let's preview that and you could see that we're getting that number of 43. So I'm going into that position and I am updating the value of 43 then I'm getting that position, and I'm alerting that position here or logging that position there. All right, so let's try something else here. What I want to do is actually create another view here. So let's say let's. So let's do this One is view three and we're gonna say new data view. Actually, we have a space, their data view, and then we're gonna pass in that test of buffer. Let's go ahead and create another variable and store this data inside of Numb to this is gonna be our number two that is going to be equal to the view. Three. Get the integer eight and we're gonna say this is going to be too as well. Let's do consul dot Log and we're going to log number two. So even though I'm creating a new view, I'm still gonna be able to access that data. So if I go ahead and write, click here and going to inspect elements, forgot an equal sign there. So let's do equals. Make sure we have semi Colon is there and come back in here and hit refresh, right click and going to inspect element. And you can see here that we're still getting that. So even though I'm actually creating a new view, I'm still working with that same type of based data. So we're gonna do something a little bit different. We're actually going to go in, and we're going to define how many numbers we actually want to work with inside of a certain view. So we have these 16 bites and so these 16 different positions here and I'm gonna go in here and I'm going to create a view. So let's go ahead and save you four and we're gonna say equals. And then we're going to go ahead and say knew, date of you and we're going to pass in the date of you and say, this is going to work with the test buffer. But we're going to actually go in and we're going to start at position seven. So just like we've done here, we have this test buffer. But by adding a couple more parameters, we can say that we're going to start a position seven and we went to move over three positions. So inside of this view, I really only have three positions to work with now. So I'm only updating it from position seven to the next three of those positions. And so now I can come in here and I can save you for and then I can say sets into eight into eight. And then we're gonna go ahead and say we're gonna set the position of zero, cause we're only working with those three positions. So that first position, which is positioned seven, is now in this case, the position of zero. So we're gonna say 54 they were going to save you for dot sets. And eight is we're gonna update position one that is now going to be 23 we're gonna go ahead and view for dot sets into eight, and we're gonna update position to, and that is now going to be 32. So now from here, let's go ahead and get those values, and we're going to alert those values. So I'm going to say, let's numb alerts equal, and then view four dots, get into eight, and then we're gonna go ahead and get the integer zero, and then we're going to console dot log. Oh, forgot the e there, and they were going to say num alerts. So Let's go ahead and preview that right click going to inspect elements and you can see I get that 54. So even though I'm getting that zero and I'm updating the zero, it's actually at that seventh position. So I'm still working with that same array buffer, and I've still working with that same coat. So that's how you start working with Type two race. And when you start getting into other AP eyes, you may be working with these different types of a raise in different ways. And so I wanted to explore some of that inside of this video. In the next video, we're gonna go ahead and wrap up everything that we've learned talk about what we've learned in this section as well. Let's talk about what we've learned in this entire course.

Module Recap
[Autogenerated] So let's wrap up this section by talking about what we've learned. We dove into an introduction to type to raise what it is, how it works and how you can actually take advantage of it. We also talked about type to raise versus standard a race and the differences between those different arrays. We also talked about creating a ____ buffers and what a rain buffers are, as well as being able to access type to raise with views, how you can't actually access the data with buffers or anything like that. But so that's really what you need to know to get started. What type to race. And there's a lot more that you can dive in with type to raise. This was designed mostly just to be an introduction to what type to raise are and how to initially start working with type to raise. That is what we have covered in this module. In the next video. Let's quickly review what we've learned throughout the course and talk about some next steps

Course Conclusion
[Autogenerated] Let's quickly recap what we have learned in this course. We started out by talking about some more advanced methods that you can use when you're working with the Rays. We then covered new collection types like sets and maps and howto work with each of those data collections. We then finally finished off with tight the race and how to use type to race. You may be wondering, Where do I go from here? Everything that we have learned about is great for working with data. But you may have noticed that every time I hit refresh on the browser, the data went away. A great next step would be to learn how to work with data that stays even after you hit Refresh, like local storage or polling data from the database sets, maps and type two rays are still useful when working with databases and local storage. So learning how to store the data in a database is a good next step for your progression. But I wanted to thank you for taking this course and making it all the way to the end. If you have any feedback on how I can improve this course, please don't hesitate to share Thanks, everyone
